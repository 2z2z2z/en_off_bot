const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Encounter
class EncounterAPI {
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–∞–∂–¥–æ–º—É –¥–æ–º–µ–Ω—É
  static lastRequestTime = {};
  static requestQueues = {};

  // –ö–µ—à –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ getGameState
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { "domain_gameId_user": { levelId, levelNumber, timestamp, isPassed } }
  static levelCache = {};

  constructor(domain, authCallback = null) {
    this.domain = domain.startsWith('http') ? domain : `https://${domain}`;
    this.timeout = 10000; // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    this.authCallback = authCallback; // Callback –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –º—å—é—Ç–µ–∫—Å–æ–º
  }

  // Rate limiter: –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –æ–¥–Ω–æ–º—É –¥–æ–º–µ–Ω—É
  async _waitRateLimit() {
    const domain = this.domain;
    const queueTail = EncounterAPI.requestQueues[domain] || Promise.resolve();

    let releaseQueue;
    const queueSlot = new Promise(resolve => {
      releaseQueue = resolve;
    });

    EncounterAPI.requestQueues[domain] = queueTail.then(() => queueSlot);

    await queueTail;

    try {
      const now = Date.now();
      const lastTime = EncounterAPI.lastRequestTime[domain] || 0;
      const elapsed = now - lastTime;

      if (elapsed < 1200) {
        const waitTime = 1200 - elapsed;
        console.log(`‚è±Ô∏è Rate limit: –∂–¥—É ${waitTime}ms –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ ${domain}`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }

      EncounterAPI.lastRequestTime[domain] = Date.now();
    } finally {
      if (typeof releaseQueue === 'function') {
        releaseQueue();
      }

      // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ resolved promise,
      // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–æ—Å—Ç–∞ —Ü–µ–ø–æ—á–∫–∏ –ø—Ä–æ–º–∏—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏
      if (EncounterAPI.requestQueues[domain] === queueSlot) {
        EncounterAPI.requestQueues[domain] = Promise.resolve();
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  async _saveErrorHtml(htmlContent, prefix = 'error') {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `${prefix}-${timestamp}.html`;
      const filepath = path.join(__dirname, 'error_logs', filename);

      await fs.ensureDir(path.join(__dirname, 'error_logs'));
      await fs.writeFile(filepath, htmlContent);

      console.log(`üíæ HTML –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${filepath}`);
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML –æ—à–∏–±–∫—É:', error.message);
    }
  }

  _makeLevelCacheKey(gameId, login = null) {
    const base = `${this.domain}_${gameId}`;
    if (!login) {
      return `${base}__shared`;
    }
    const normalized = String(login).trim().toLowerCase();
    return normalized ? `${base}_${normalized}` : `${base}__shared`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –∏–∑ –∫–µ—à–∞
  _getLevelFromCache(gameId, login = null) {
    const cacheKey = this._makeLevelCacheKey(gameId, login);
    let cached = EncounterAPI.levelCache[cacheKey];

    if (!cached) {
      const legacyKey = `${this.domain}_${gameId}`;
      if (EncounterAPI.levelCache[legacyKey]) {
        cached = EncounterAPI.levelCache[legacyKey];
        delete EncounterAPI.levelCache[legacyKey];
        EncounterAPI.levelCache[cacheKey] = cached;
      }
    }

    if (!cached) {
      return null;
    }

    // –ö–µ—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 —Å–µ–∫—É–Ω–¥
    const age = Date.now() - cached.timestamp;
    if (age > 30000) {
      console.log(`üóëÔ∏è –ö–µ—à —É—Ä–æ–≤–Ω—è —É—Å—Ç–∞—Ä–µ–ª (${Math.floor(age / 1000)}—Å), —É–¥–∞–ª—è–µ–º`);
      delete EncounterAPI.levelCache[cacheKey];
      return null;
    }

    return cached;
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –≤ –∫–µ—à
  _saveLevelToCache(gameId, levelData, login = null) {
    const cacheKey = this._makeLevelCacheKey(gameId, login);
    EncounterAPI.levelCache[cacheKey] = {
      levelId: levelData.LevelId,
      levelNumber: levelData.Number,
      isPassed: levelData.IsPassed || false,
      timestamp: Date.now()
    };
    console.log(`üì¶ –ö–µ—à —É—Ä–æ–≤–Ω—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ‚Ññ${levelData.Number} (LevelId: ${levelData.LevelId})`);
  }

  // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à —É—Ä–æ–≤–Ω—è
  _invalidateLevelCache(gameId, reason = '', login = null) {
    const baseKey = `${this.domain}_${gameId}`;
    const keysToRemove = [];

    if (login) {
      keysToRemove.push(this._makeLevelCacheKey(gameId, login));
    } else {
      for (const key of Object.keys(EncounterAPI.levelCache)) {
        if (key === baseKey || key.startsWith(`${baseKey}_`) || key.startsWith(`${baseKey}__`)) {
          keysToRemove.push(key);
        }
      }
    }

    if (keysToRemove.length === 0) {
      return;
    }

    for (const key of keysToRemove) {
      delete EncounterAPI.levelCache[key];
    }

    console.log(`üóëÔ∏è –ö–µ—à —É—Ä–æ–≤–Ω—è –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω${reason ? ': ' + reason : ''} (${keysToRemove.length})`);
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É API Encounter
  async authenticate(login, password) {
    try {
      // Rate limiting: –∂–¥—ë–º –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É
      await this._waitRateLimit();

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ form-urlencoded
      const formData = new URLSearchParams();
      formData.append('Login', login);
      formData.append('Password', password);
      formData.append('ddlNetwork', '1');

      const response = await axios.post(`${this.domain}/login/signin?json=1`, formData, {
        timeout: this.timeout,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      const result = response.data;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ JSON –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      if (typeof result !== 'object' || result === null) {
        console.error('‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ –æ–±—ä–µ–∫—Ç:', typeof result);
        console.error('üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:', String(result).substring(0, 500));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        const resultStr = String(result);
        if (resultStr.includes('<html') || resultStr.includes('<!DOCTYPE')) {
          console.error('üö´ Encounter –≤–µ—Ä–Ω—É–ª HTML - IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–ø—á–∞');
          await this._saveErrorHtml(resultStr, 'auth-blocked');
          throw new Error('IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Encounter - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç.');
        }

        throw new Error('API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–µ JSON –æ–±—ä–µ–∫—Ç)');
      }

      if (result.Error === undefined || result.Error === null) {
        console.error('‚ùå API –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –±–µ–∑ –ø–æ–ª—è Error');
        console.error('üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(result, null, 2).substring(0, 1000));
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ Error');
      }

      if (result.Error === 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const cookies = response.headers['set-cookie'];
        let authCookies = {};
        
        if (cookies) {
          cookies.forEach(cookie => {
            const [nameValue] = cookie.split(';');
            const [name, value] = nameValue.split('=');
            if (['GUID', 'stoken', 'atoken'].includes(name)) {
              authCookies[name] = decodeURIComponent(value);
            }
          });
        }
        
        return {
          success: true,
          cookies: authCookies,
          message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
        };
      } else {
        const errorMessages = {
          1: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',
          2: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
          3: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –¥–∞–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞',
          4: 'IP –∞–¥—Ä–µ—Å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö',
          5: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
          7: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
          8: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
          9: '–î–µ–π—Å—Ç–≤–∏—è —Ä–∞—Å—Ü–µ–Ω–µ–Ω—ã –∫–∞–∫ –±—Ä—É—Ç—Ñ–æ—Ä—Å',
          10: 'E-Mail –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
        };
        
        let message = errorMessages[result.Error] || `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∫–æ–¥ ${result.Error})`;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å URL –∫–∞–ø—á–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if (result.Error === 1 && result.CaptchaUrl) {
          message += `\n\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏:\n${result.CaptchaUrl}`;
        }
        
        return {
          success: false,
          message: message
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫
      if (error.response) {
        const status = error.response.status;
        const statusMessages = {
          400: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å',
          401: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
          403: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
          404: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–º–µ–Ω',
          500: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Encounter',
          503: '–°–µ—Ä–≤–µ—Ä Encounter –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };
        
        return {
          success: false,
          message: statusMessages[status] || `HTTP –æ—à–∏–±–∫–∞ ${status}: ${error.message}`
        };
      } else if (error.code === 'ENOTFOUND') {
        return {
          success: false,
          message: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞'
        };
      } else if (error.code === 'ETIMEDOUT') {
        return {
          success: false,
          message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
        };
      } else {
        return {
          success: false,
          message: error.message
        };
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  async getGameState(gameId, authCookies, login = null, password = null, isRetry = false) {
    try {
      // Rate limiting: –∂–¥—ë–º –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É
      await this._waitRateLimit();

      const cookieString = Object.entries(authCookies)
        .map(([key, value]) => `${key}=${value}`)
        .join('; ');

      const url = `${this.domain}/GameEngines/Encounter/Play/${gameId}?json=1`;
      console.log(`üåê –ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:`);
      console.log(`   URL: ${url}`);
      console.log(`   GameID: ${gameId}`);
      console.log(`   Domain: ${this.domain}`);
      console.log(`   Cookies: ${cookieString.substring(0, 100)}...`);

      const response = await axios.get(url, {
        timeout: this.timeout,
        headers: {
          'Cookie': cookieString,
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API, —Å—Ç–∞—Ç—É—Å: ${response.status}`);

      const data = response.data;

      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞) –≤–º–µ—Å—Ç–æ JSON ‚Äî —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞/–Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (typeof data === 'string' && (data.includes('<html') || data.includes('<!DOCTYPE'))) {
        const authError = new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞)');
        authError.needsAuth = true;
        throw authError;
      }

      // –ï—Å–ª–∏ —è–≤–Ω–æ –ø—Ä–∏—à–µ–ª Event=4 ‚Äî –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (data && typeof data === 'object' && data.Event === 4) {
        const authError = new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        authError.needsAuth = true;
        throw authError;
      }

      return {
        success: true,
        data
      };
    } catch (error) {
      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –ò –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ò —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
      if (error.needsAuth && login && password && !isRetry) {
        console.log(`üîÑ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –≤—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è ${login}...`);

        try {
          let authResult;

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º authCallback –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (—Å –º—å—é—Ç–µ–∫—Å–æ–º), –∏–Ω–∞—á–µ –ø—Ä—è–º—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          if (this.authCallback) {
            console.log(`üîê –ò—Å–ø–æ–ª—å–∑—É—é —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –º—å—é—Ç–µ–∫—Å–æ–º`);
            authResult = await this.authCallback();
          } else {
            console.log(`‚ö†Ô∏è Fallback: –ø—Ä—è–º–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ –º—å—é—Ç–µ–∫—Å–∞`);
            authResult = await this.authenticate(login, password);
          }

          if (authResult.success) {
            console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å...`);
            const mergedCookies = {
              ...(authCookies || {}),
              ...(authResult.cookies || {})
            };
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ cookies (isRetry=true —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏)
            const retryState = await this.getGameState(gameId, mergedCookies, login, password, true);
            if (retryState && retryState.success) {
              retryState.newCookies = mergedCookies;
            }
            return retryState;
          } else {
            // –†–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
            const reAuthError = new Error(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${authResult.message}`);
            reAuthError.reAuthFailed = true;
            reAuthError.authMessage = authResult.message;
            throw reAuthError;
          }
        } catch (authError) {
          // –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
          if (!authError.reAuthFailed) {
            const wrappedError = new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`);
            wrappedError.reAuthFailed = true;
            throw wrappedError;
          }
          throw authError;
        }
      }

      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error.message);

      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫
      if (error.response) {
        const status = error.response.status;
        const data = error.response.data;

        console.log(`üîç –î–µ—Ç–∞–ª–∏ HTTP ${status} –æ—à–∏–±–∫–∏:`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${status}`);
        console.log(`   –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, JSON.stringify(data, null, 2));
        console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, JSON.stringify(error.response.headers, null, 2));

        const statusMessages = {
          400: `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å HTTP 400. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
          - –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä—ã (${gameId})
          - –ò–≥—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
          - –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –Ω–∞ –¥–æ–º–µ–Ω–µ
          - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞`,
          401: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - cookies —É—Å—Ç–∞—Ä–µ–ª–∏',
          403: '–î–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —É—á–∞—Å—Ç–∏—è',
          404: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏–≥—Ä—ã',
          500: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Encounter'
        };

        throw new Error(statusMessages[status] || `HTTP –æ—à–∏–±–∫–∞ ${status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã`);
      } else if (error.code === 'ENOTFOUND') {
        throw new Error('–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
      } else if (error.code === 'ETIMEDOUT') {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      } else {
        throw error;
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∏–≥—Ä—É –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É API Encounter —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  async sendAnswer(gameId, answer, authCookies, login = null, password = null, isRetry = false, expectedLevelId = null) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (!authCookies || Object.keys(authCookies).length === 0) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.');
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –∏–∑ –∫–µ—à–∞
      let levelData = this._getLevelFromCache(gameId, login);
      let model = null;

      if (levelData) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log(`üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à —É—Ä–æ–≤–Ω—è ‚Ññ${levelData.levelNumber} (ID: ${levelData.levelId})`);
      } else {
        // –ö–µ—à–∞ –Ω–µ—Ç - –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (—Å –∞–≤—Ç–æ—Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)
        console.log(`üîÑ –ö–µ—à–∞ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è ${gameId}...`);
        const gameState = await this.getGameState(gameId, authCookies, login, password);

        if (!gameState.success) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã');
        }

        model = gameState.data;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞)
        if (typeof model === 'string' && (model.includes('<html>') || model.includes('<!DOCTYPE'))) {
          console.log(`üîí –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ - —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞`);
          throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞)');
        }

        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
        console.log(`üéÆ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: Event=${model.Event}, GameId=${gameId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Event –≤ –æ—Ç–≤–µ—Ç–µ
        if (model.Event === undefined || model.Event === null) {
          console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: Event –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`);
          console.log(`üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):`, JSON.stringify(model, null, 2).substring(0, 500));
          throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Event –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)');
        }

        if (model.Event !== 0) {
          const eventMessages = {
            1: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            2: '–ò–≥—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
            3: '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É Encounter',
            4: '–ò–≥—Ä–æ–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥',
            5: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å - –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã',
            6: '–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å',
            7: '–ù–µ –ø–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–º - –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ',
            8: '–ù–µ –ø–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π - –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É',
            9: '–ò–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ –∏–≥—Ä—É - –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            10: '–£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã - –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—É',
            11: '–ò–≥—Ä–æ–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ - –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ—Å—å –≤ –∫–æ–º–∞–Ω–¥–µ',
            12: '–í –∏–≥—Ä–µ –Ω–µ—Ç —É—Ä–æ–≤–Ω–µ–π',
            13: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ',
            14: '–ò–≥—Ä–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            15: '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞',
            16: '–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è',
            17: '–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞'
          };

          const errorMsg = eventMessages[model.Event] || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–≥—Ä—ã (–∫–æ–¥ ${model.Event})`;
          console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–≥—Ä–æ–π: ${errorMsg}`);

          // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è - –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
          if (model.Event === 16) {
            this._invalidateLevelCache(gameId, '—É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è');
          }

          throw new Error(errorMsg);
        }

        const level = model.Level;
        console.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ä–æ–≤–Ω—è: ‚Ññ${level.Number}, ID=${level.LevelId}, IsPassed=${level.IsPassed}`);

        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
        if (level.IsPassed) {
          console.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å ${level.Number} —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω`);
          this._invalidateLevelCache(gameId, '—É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω', null);
          throw new Error(`–£—Ä–æ–≤–µ–Ω—å ${level.Number} —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω`);
        }

        if (level.Dismissed) {
          console.log(`üö´ –£—Ä–æ–≤–µ–Ω—å ${level.Number} —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
          this._invalidateLevelCache(gameId, '—É—Ä–æ–≤–µ–Ω—å —Å–Ω—è—Ç', null);
          throw new Error(`–£—Ä–æ–≤–µ–Ω—å ${level.Number} —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –≤ –∫–µ—à
        this._saveLevelToCache(gameId, level, login);
        levelData = {
          levelId: level.LevelId,
          levelNumber: level.Number,
          isPassed: level.IsPassed
        };
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–µ–∂–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã)
      if (model && model.Level && model.Level.HasAnswerBlockRule) {
        if (model.Level.BlockDuration > 0) {
          const minutes = Math.floor(model.Level.BlockDuration / 60);
          const seconds = model.Level.BlockDuration % 60;
          const timeStr = minutes > 0 ? `${minutes}–º ${seconds}—Å` : `${seconds}—Å`;

          console.log(`‚è∞ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ ${levelData.levelNumber}: –æ—Å—Ç–∞–ª–æ—Å—å ${timeStr}`);
          throw new Error(`‚è∞ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ ${levelData.levelNumber}. –û—Å—Ç–∞–ª–æ—Å—å: ${timeStr}`);
        } else {
          console.log(`‚ÑπÔ∏è –ù–∞ —É—Ä–æ–≤–Ω–µ ${levelData.levelNumber} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞`);
        }
      }

      console.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å ${levelData.levelNumber} –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –æ—Ç–≤–µ—Ç–æ–≤`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π levelId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const currentLevelIdFromState = levelData.levelId;
      const currentLevelNumberFromState = levelData.levelNumber;

      // –ï—Å–ª–∏ expectedLevelId –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const expectedLevelIdForCheck = expectedLevelId || currentLevelIdFromState;

      console.log(`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è: –æ–∂–∏–¥–∞–µ–º—ã–π=${expectedLevelIdForCheck}, —Ç–µ–∫—É—â–∏–π –∏–∑ API=${currentLevelIdFromState}`);

      // –§–æ—Ä–º–∏—Ä—É–µ–º cookie —Å—Ç—Ä–æ–∫—É
      const cookieString = Object.entries(authCookies)
        .map(([key, value]) => `${key}=${value}`)
        .join('; ');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç "${answer}" –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ${levelData.levelNumber} (LevelId: ${levelData.levelId})`);

      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è)
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π...`);
      const verifyState = await this.getGameState(gameId, authCookies, login, password);
      if (verifyState.success && verifyState.data && verifyState.data.Level) {
        const currentLevelId = verifyState.data.Level.LevelId;
        const currentLevelNumber = verifyState.data.Level.Number;

        console.log(`üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ–∂–∏–¥–∞–µ–º—ã–π levelId=${expectedLevelIdForCheck}, —Ç–µ–∫—É—â–∏–π levelId=${currentLevelId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –û–ñ–ò–î–ê–ï–ú–û–ì–û —É—Ä–æ–≤–Ω—è
        if (currentLevelId !== expectedLevelIdForCheck) {
          // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
          const expectedLevelNumber = (expectedLevelId === currentLevelIdFromState)
            ? currentLevelNumberFromState
            : '?';

          console.log(`‚ö†Ô∏è –ó–ê–©–ò–¢–ê –°–†–ê–ë–û–¢–ê–õ–ê: –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è! –û–∂–∏–¥–∞–ª—Å—è: ${expectedLevelNumber} (ID: ${expectedLevelIdForCheck}), —Ç–µ–∫—É—â–∏–π: ${currentLevelNumber} (ID: ${currentLevelId})`);
          const error = new Error(`–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è (–æ–∂–∏–¥–∞–ª—Å—è ${expectedLevelNumber}, —Ç–µ–∫—É—â–∏–π ${currentLevelNumber})`);
          error.isLevelChanged = true;
          error.oldLevel = expectedLevelNumber;
          error.newLevel = currentLevelNumber;
          error.answer = answer;
          throw error;
        }

        console.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç—É–∞–ª–µ–Ω (${currentLevelNumber}, ID: ${currentLevelId}), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É`);
      }

      // Rate limiting: –∂–¥—ë–º –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É
      await this._waitRateLimit();

      const postData = new URLSearchParams({
        LevelId: levelData.levelId.toString(),
        LevelNumber: levelData.levelNumber.toString(),
        'LevelAction.Answer': answer
      });

      console.log(`üåê POST URL: ${this.domain}/GameEngines/Encounter/Play/${gameId}?json=1`);
      console.log(`üì¶ POST –¥–∞–Ω–Ω—ã–µ: ${postData.toString()}`);

      const response = await axios.post(`${this.domain}/GameEngines/Encounter/Play/${gameId}?json=1`,
        postData, {
        timeout: this.timeout,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json, text/html, */*',
          'Cookie': cookieString,
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: Event=${response.data.Event}`);

      const result = response.data;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞)
      if (typeof result === 'string' && (result.includes('<html>') || result.includes('<!DOCTYPE'))) {
        console.log(`üîí –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ - —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞`);
        const authError = new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞)');
        authError.needsAuth = true;
        throw authError;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Event=4 (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
      if (result.Event === 4) {
        console.log(`üîí Event=4: –∏–≥—Ä–æ–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
        const authError = new Error('–ò–≥—Ä–æ–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        authError.needsAuth = true;
        throw authError;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (result.Event === undefined || result.Event === null) {
        console.log(`‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ Event –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ LevelAction –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      } else if (result.Event !== 0) {
        // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if ([16, 18, 19, 20, 21, 22].includes(result.Event)) {
          console.log('–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
        } else {
          throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–∫–æ–¥ ${result.Event})`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
      const engineAction = result.EngineAction;
      const levelAction = engineAction?.LevelAction;
      
      let isCorrect = false;
      let message = '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      
      if (levelAction) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        console.log(`üìä LevelAction.Answer: "${levelAction.Answer}"`);
        console.log(`üìä LevelAction.IsCorrectAnswer: ${levelAction.IsCorrectAnswer}`);
        
        if (levelAction.IsCorrectAnswer !== null) {
          isCorrect = levelAction.IsCorrectAnswer;
          message = isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç';
          
          console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ "${answer}": ${isCorrect ? '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π' : '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π'}`);
        } else {
          console.log(`‚ö†Ô∏è –û—Ç–≤–µ—Ç –ù–ï –ë–´–õ –û–ë–†–ê–ë–û–¢–ê–ù (IsCorrectAnswer = null)`);
          message = '‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Ä–æ–≤–µ–Ω—å
        if (result.Level && result.Level.IsPassed) {
          message += ' üéâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω!';
          console.log(`üèÜ –£—Ä–æ–≤–µ–Ω—å ${result.Level.Number} –ø—Ä–æ–π–¥–µ–Ω!`);
          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à - —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è
          this._invalidateLevelCache(gameId, '—É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω', null);
        }

        // –ï—Å–ª–∏ Event –∏–∑–º–µ–Ω–∏–ª—Å—è (—É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è) - –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
        if (result.Event && [16, 18, 19, 20, 21, 22].includes(result.Event)) {
          this._invalidateLevelCache(gameId, `Event ${result.Event} - —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è`);
        }
      } else {
        console.log(`‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö LevelAction –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞`);
        message = '‚ùå –û—Ç–≤–µ—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ';
      }

      return {
        success: true,
        correct: isCorrect,
        message: message,
        levelNumber: levelData.levelNumber,
        data: result,
        level: result.Level,
        newCookies: null // Cookies –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å
      };

    } catch (error) {
      if (!isRetry) {
        this._invalidateLevelCache(gameId, '–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞');
      }

      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –ò –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ò —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
      if (error.needsAuth && login && password && !isRetry) {
        console.log(`üîÑ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞, –≤—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è ${login}...`);

        try {
          let authResult;

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º authCallback –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (—Å –º—å—é—Ç–µ–∫—Å–æ–º), –∏–Ω–∞—á–µ –ø—Ä—è–º—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          if (this.authCallback) {
            console.log(`üîê –ò—Å–ø–æ–ª—å–∑—É—é —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –º—å—é—Ç–µ–∫—Å–æ–º`);
            authResult = await this.authCallback();
          } else {
            console.log(`‚ö†Ô∏è Fallback: –ø—Ä—è–º–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ –º—å—é—Ç–µ–∫—Å–∞`);
            authResult = await this.authenticate(login, password);
          }

          if (authResult.success) {
            console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞...`);
            const mergedCookies = {
              ...(authCookies || {}),
              ...(authResult.cookies || {})
            };
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ cookies (isRetry=true —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏)
            // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º expectedLevelId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è
            const retryResult = await this.sendAnswer(gameId, answer, mergedCookies, login, password, true, expectedLevelId);
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö cookies –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
            retryResult.newCookies = mergedCookies;
            return retryResult;
          } else {
            // –†–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
            const reAuthError = new Error(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${authResult.message}`);
            reAuthError.reAuthFailed = true;
            reAuthError.authMessage = authResult.message;
            throw reAuthError;
          }
        } catch (authError) {
          // –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
          if (!authError.reAuthFailed) {
            const wrappedError = new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`);
            wrappedError.reAuthFailed = true;
            throw wrappedError;
          }
          throw authError;
        }
      }

      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ Encounter:', error.message);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  async getGameInfo(gameId, authCookies, login = null, password = null) {
    try {
      const gameState = await this.getGameState(gameId, authCookies, login, password);

      if (gameState.success) {
        const model = gameState.data;
        return {
          success: true,
          data: {
            id: model.GameId || gameId,
            name: model.GameTitle || `–ò–≥—Ä–∞ #${gameId}`,
            number: model.GameNumber,
            status: model.Event === 0 ? 'active' : 'inactive',
            level: model.Level ? {
              id: model.Level.LevelId,
              name: model.Level.Name,
              number: model.Level.Number,
              isPassed: model.Level.IsPassed,
              sectorsTotal: model.Level.RequiredSectorsCount,
              sectorsPassed: model.Level.PassedSectorsCount
            } : null,
            team: model.TeamName,
            login: model.Login
          }
        };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ:', error.message);

      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async checkConnection() {
    try {
      // Rate limiting: –∂–¥—ë–º –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É
      await this._waitRateLimit();

      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const response = await axios.get(this.domain, {
        timeout: 5000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      return response.status === 200;
    } catch (error) {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error.message);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –¥–æ–º–µ–Ω–∞
  async getGamesList() {
    try {
      // Rate limiting: –∂–¥—ë–º –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É
      await this._waitRateLimit();

      const response = await axios.get(`${this.domain}/home/?json=1`, {
        timeout: this.timeout,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      return {
        success: true,
        comingGames: response.data.ComingGames || [],
        activeGames: response.data.ActiveGames || []
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = EncounterAPI;
