const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const { logger } = require('./src/infra/logger');
const {
  EncounterError,
  AuthRequiredError,
  NetworkError,
  LevelChangedError,
  RateLimitError
} = require('./src/core/encounter-errors');

const STATUS_MESSAGE_MAP = Object.freeze({
  default: {
    400: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Encounter',
    401: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - cookies —É—Å—Ç–∞—Ä–µ–ª–∏',
    403: '–î–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å—É Encounter –∑–∞–ø—Ä–µ—â–µ–Ω',
    404: '–†–µ—Å—É—Ä—Å Encounter –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
    500: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Encounter',
    503: '–°–µ—Ä–≤–µ—Ä Encounter –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
  },
  getGameState: {
    400: context => {
      const gameId = context?.gameId ?? '?';
      return `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å HTTP 400. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
 - –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä—ã (${gameId})
 - –ò–≥—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
 - –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –Ω–∞ –¥–æ–º–µ–Ω–µ
 - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞`;
    }
  },
  sendAnswer: {
    400: () =>
      'Encounter –æ—Ç–∫–ª–æ–Ω–∏–ª –æ—Ç–≤–µ—Ç: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä',
    409: () =>
      'Encounter –≤–µ—Ä–Ω—É–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç —É—Ä–æ–≤–Ω–µ–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è',
    423: () => 'Encounter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–∏—ë–º–∞ –æ—Ç–≤–µ—Ç–æ–≤ (HTTP 423)'
  }
});

const NETWORK_CODE_MESSAGES = Object.freeze({
  ENOTFOUND: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞',
  ECONNREFUSED: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - —Å–µ—Ä–≤–µ—Ä Encounter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç IP',
  ECONNRESET: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Encounter –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ',
  ETIMEDOUT: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç',
  ECONNABORTED: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
});

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Encounter
class EncounterAPI {
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–∞–∂–¥–æ–º—É –¥–æ–º–µ–Ω—É
  static lastRequestTime = {};
  static requestQueues = {};

  // –ö–µ—à –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ getGameState
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { "domain_gameId_user": { levelId, levelNumber, timestamp, isPassed } }
  static levelCache = {};

  constructor(domain, authCallback = null) {
    this.domain = domain.startsWith('http') ? domain : `https://${domain}`;
    this.timeout = 10000; // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    this.authCallback = authCallback; // Callback –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –º—å—é—Ç–µ–∫—Å–æ–º
  }

  _log(level, message, context = {}) {
    const logLevel = typeof logger[level] === 'function' ? level : 'info';
    const payload = { domain: this.domain, ...context };
    if (Object.keys(payload).length > 0) {
      logger[logLevel](payload, message);
    } else {
      logger[logLevel](message);
    }
  }

  _isHtmlPayload(payload) {
    if (!payload) {
      return false;
    }
    const text = String(payload);
    return text.includes('<html') || text.includes('<!DOCTYPE');
  }

  _extractAuthCookies(setCookieHeader = []) {
    if (!Array.isArray(setCookieHeader)) {
      return {};
    }

    const cookies = {};
    setCookieHeader.forEach(cookie => {
      const [nameValue] = cookie.split(';');
      const [name, value] = nameValue.split('=');
      if (['GUID', 'stoken', 'atoken'].includes(name)) {
        cookies[name] = decodeURIComponent(value);
      }
    });
    return cookies;
  }

  _maskLogin(login) {
    if (!login) {
      return null;
    }

    const value = String(login);

    if (value.length <= 3) {
      return `${value[0] ?? '*'}***`;
    }

    return `${value.slice(0, 2)}***${value.slice(-1)}`;
  }

  _serializePayloadSnippet(payload, maxLength = 500) {
    if (payload === null || payload === undefined) {
      return null;
    }

    try {
      const raw =
        typeof payload === 'string' ? payload : JSON.stringify(payload, null, 2);

      if (!raw) {
        return null;
      }

      return raw.length > maxLength ? `${raw.slice(0, maxLength)}...` : raw;
    } catch (err) {
      logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å payload Encounter', { error: err });
      return '[unserializable payload]';
    }
  }

  _resolveStatusMessage(status, operation, context = {}) {
    const operationMap = STATUS_MESSAGE_MAP[operation] || {};
    const resolver = operationMap[status] || STATUS_MESSAGE_MAP.default[status];

    if (typeof resolver === 'function') {
      return resolver(context);
    }

    if (resolver) {
      return resolver;
    }

    return `HTTP –æ—à–∏–±–∫–∞ ${status} –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation}`;
  }

  _normalizeNetworkError(error, meta = {}) {
    if (error instanceof EncounterError) {
      return error;
    }

    const { operation = 'request', context = {} } = meta;

    if (error.response) {
      const { status, headers = {}, data } = error.response;
      const payloadSnippet = this._serializePayloadSnippet(data);

      logger.warn('Encounter API –≤–µ—Ä–Ω—É–ª HTTP –æ—à–∏–±–∫—É', {
        operation,
        status,
        context,
        payload: payloadSnippet
      });

      if (status === 429) {
        const retryAfterHeader = headers['retry-after'] ?? headers['Retry-After'];
        const retryAfter = retryAfterHeader ? Number.parseInt(retryAfterHeader, 10) : null;
        return new RateLimitError('Encounter –æ–≥—Ä–∞–Ω–∏—á–∏–ª —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ (HTTP 429)', {
          retryAfter,
          context
        });
      }

      const message = this._resolveStatusMessage(status, operation, context);

      return new NetworkError(message, {
        status,
        context,
        retryable: status >= 500,
        original: error
      });
    }

    if (error.code && NETWORK_CODE_MESSAGES[error.code]) {
      const retryable = error.code === 'ECONNRESET' || error.code === 'ETIMEDOUT' || error.code === 'ECONNABORTED';
      return new NetworkError(NETWORK_CODE_MESSAGES[error.code], {
        code: error.code,
        retryable,
        context,
        original: error
      });
    }

    return new NetworkError(error.message || '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Encounter', {
      context,
      retryable: true,
      original: error
    });
  }

  _normalizeAuthResponse(response) {
    const result = response.data;

    if (!result || typeof result !== 'object') {
      if (this._isHtmlPayload(result)) {
        return {
          success: false,
          code: 'IP_BLOCKED',
          message: 'IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Encounter ‚Äî —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç.'
        };
      }

      return {
        success: false,
        code: 'INVALID_RESPONSE',
        message: 'API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–µ JSON –æ–±—ä–µ–∫—Ç)'
      };
    }

    if (result.Error === undefined || result.Error === null) {
      return {
        success: false,
        code: 'INVALID_RESPONSE',
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ Error'
      };
    }

    if (result.Error === 0) {
      return {
        success: true,
        cookies: this._extractAuthCookies(response.headers['set-cookie']),
        message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
      };
    }

    const errorMessages = {
      1: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',
      2: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
      3: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –¥–∞–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞',
      4: 'IP –∞–¥—Ä–µ—Å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö',
      5: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
      7: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
      8: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
      9: '–î–µ–π—Å—Ç–≤–∏—è —Ä–∞—Å—Ü–µ–Ω–µ–Ω—ã –∫–∞–∫ –±—Ä—É—Ç—Ñ–æ—Ä—Å',
      10: 'E-Mail –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
    };

    let message = errorMessages[result.Error] || `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∫–æ–¥ ${result.Error})`;
    if (result.Error === 1 && result.CaptchaUrl) {
      message += `\n\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏:\n${result.CaptchaUrl}`;
    }

    return {
      success: false,
      code: 'AUTH_FAILED',
      errorCode: result.Error,
      message
    };
  }

  _normalizeAuthError(error) {
    if (error instanceof EncounterError) {
      return { success: false, code: error.code, message: error.message };
    }

    if (error.response) {
      const status = error.response.status;
      const statusMessages = {
        400: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å',
        401: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        403: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
        404: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–º–µ–Ω',
        500: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Encounter',
        503: '–°–µ—Ä–≤–µ—Ä Encounter –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      };

      return {
        success: false,
        code: 'HTTP_ERROR',
        message: statusMessages[status] || `HTTP –æ—à–∏–±–∫–∞ ${status}: ${error.message}`
      };
    }

    if (error.code === 'ENOTFOUND') {
      return {
        success: false,
        code: 'DNS',
        message: '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞'
      };
    }

    if (error.code === 'ETIMEDOUT') {
      return {
        success: false,
        code: 'TIMEOUT',
        message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
      };
    }

    return {
      success: false,
      code: 'UNKNOWN',
      message: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    };
  }

  // Rate limiter: –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –æ–¥–Ω–æ–º—É –¥–æ–º–µ–Ω—É
  async _waitRateLimit() {
    const domain = this.domain;
    const queueTail = EncounterAPI.requestQueues[domain] || Promise.resolve();

    let releaseQueue;
    const queueSlot = new Promise(resolve => {
      releaseQueue = resolve;
    });

    EncounterAPI.requestQueues[domain] = queueTail.then(() => queueSlot);

    await queueTail;

    try {
      const now = Date.now();
      const lastTime = EncounterAPI.lastRequestTime[domain] || 0;
      const elapsed = now - lastTime;

      if (elapsed < 1200) {
        const waitTime = 1200 - elapsed;
        this._log('debug', 'Encounter rate limit –æ–∂–∏–¥–∞–Ω–∏–µ', {
          waitTime,
          lastRequestElapsed: elapsed
        });
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }

      EncounterAPI.lastRequestTime[domain] = Date.now();
    } finally {
      if (typeof releaseQueue === 'function') {
        releaseQueue();
      }

      // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ resolved promise,
      // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–æ—Å—Ç–∞ —Ü–µ–ø–æ—á–∫–∏ –ø—Ä–æ–º–∏—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏
      if (EncounterAPI.requestQueues[domain] === queueSlot) {
        EncounterAPI.requestQueues[domain] = Promise.resolve();
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  async _saveErrorHtml(htmlContent, prefix = 'error') {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `${prefix}-${timestamp}.html`;
      const filepath = path.join(__dirname, 'error_logs', filename);

      await fs.ensureDir(path.join(__dirname, 'error_logs'));
      await fs.writeFile(filepath, htmlContent);

      this._log('info', 'Encounter HTML –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', { filepath });
    } catch (error) {
      this._log('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML –æ—à–∏–±–∫—É Encounter', { err: error });
    }
  }

  _makeLevelCacheKey(gameId, login = null) {
    const base = `${this.domain}_${gameId}`;
    if (!login) {
      return `${base}__shared`;
    }
    const normalized = String(login).trim().toLowerCase();
    return normalized ? `${base}_${normalized}` : `${base}__shared`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –∏–∑ –∫–µ—à–∞
  _getLevelFromCache(gameId, login = null) {
    const cacheKey = this._makeLevelCacheKey(gameId, login);
    let cached = EncounterAPI.levelCache[cacheKey];

    if (!cached) {
      const legacyKey = `${this.domain}_${gameId}`;
      if (EncounterAPI.levelCache[legacyKey]) {
        cached = EncounterAPI.levelCache[legacyKey];
        delete EncounterAPI.levelCache[legacyKey];
        EncounterAPI.levelCache[cacheKey] = cached;
      }
    }

    if (!cached) {
      return null;
    }

    // –ö–µ—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 —Å–µ–∫—É–Ω–¥
    const age = Date.now() - cached.timestamp;
    if (age > 30000) {
      this._log('debug', 'Encounter –∫–µ—à —É—Ä–æ–≤–Ω—è —É—Å—Ç–∞—Ä–µ–ª, –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º', {
        gameId,
        login: this._maskLogin(login),
        ageMs: age,
        levelId: cached.levelId,
        levelNumber: cached.levelNumber
      });
      delete EncounterAPI.levelCache[cacheKey];
      return null;
    }

    return cached;
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –≤ –∫–µ—à
  _saveLevelToCache(gameId, levelData, login = null) {
    const cacheKey = this._makeLevelCacheKey(gameId, login);
    EncounterAPI.levelCache[cacheKey] = {
      levelId: levelData.LevelId,
      levelNumber: levelData.Number,
      isPassed: levelData.IsPassed || false,
      timestamp: Date.now()
    };
    this._log('debug', 'Encounter –∫–µ—à —É—Ä–æ–≤–Ω—è –æ–±–Ω–æ–≤–ª—ë–Ω', {
      gameId,
      login: this._maskLogin(login),
      levelId: levelData.LevelId,
      levelNumber: levelData.Number
    });
  }

  // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à —É—Ä–æ–≤–Ω—è
  _invalidateLevelCache(gameId, reason = '', login = null) {
    const baseKey = `${this.domain}_${gameId}`;
    const keysToRemove = [];

    if (login) {
      keysToRemove.push(this._makeLevelCacheKey(gameId, login));
    } else {
      for (const key of Object.keys(EncounterAPI.levelCache)) {
        if (key === baseKey || key.startsWith(`${baseKey}_`) || key.startsWith(`${baseKey}__`)) {
          keysToRemove.push(key);
        }
      }
    }

    if (keysToRemove.length === 0) {
      return;
    }

    for (const key of keysToRemove) {
      delete EncounterAPI.levelCache[key];
    }

    this._log('debug', 'Encounter –∫–µ—à —É—Ä–æ–≤–Ω—è –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
      gameId,
      login: this._maskLogin(login),
      reason,
      keysRemoved: keysToRemove.length
    });
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É API Encounter
  async authenticate(login, password) {
    try {
      await this._waitRateLimit();

      const formData = new URLSearchParams();
      formData.append('Login', login);
      formData.append('Password', password);
      formData.append('ddlNetwork', '1');

      const maskedLogin = this._maskLogin(login);
      this._log('info', '–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Encounter', { login: maskedLogin });

      const response = await axios.post(`${this.domain}/login/signin?json=1`, formData, {
        timeout: this.timeout,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      const normalized = this._normalizeAuthResponse(response);

      if (!normalized.success && normalized.code === 'IP_BLOCKED' && this._isHtmlPayload(response.data)) {
        await this._saveErrorHtml(response.data, 'auth-blocked');
      }

      if (normalized.success) {
        this._log('info', 'Encounter –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', {
          login: maskedLogin,
          cookies: Object.keys(normalized.cookies || {})
        });
      } else {
        this._log('warn', 'Encounter –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π', {
          login: maskedLogin,
          code: normalized.code,
          errorCode: normalized.errorCode || null,
          message: normalized.message
        });
      }

      return normalized;
    } catch (error) {
      this._log('error', '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Encounter', { login: this._maskLogin(login), err: error });

      if (error.response && this._isHtmlPayload(error.response.data)) {
        await this._saveErrorHtml(error.response.data, 'auth-error');
        return {
          success: false,
          code: 'INVALID_RESPONSE',
          message: 'Encounter –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        };
      }

      return this._normalizeAuthError(error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  async getGameState(gameId, authCookies, login = null, password = null, isRetry = false) {
    try {
      // Rate limiting: –∂–¥—ë–º –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É
      await this._waitRateLimit();

      const cookieString = Object.entries(authCookies)
        .map(([key, value]) => `${key}=${value}`)
        .join('; ');

      const url = `${this.domain}/GameEngines/Encounter/Play/${gameId}?json=1`;

      this._log('info', '–ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', {
        gameId,
        login: this._maskLogin(login),
        url,
        cookiesPreview: cookieString.substring(0, 80)
      });

      const response = await axios.get(url, {
        timeout: this.timeout,
        headers: {
          Cookie: cookieString,
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      this._log('info', '–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç Encounter –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è', {
        gameId,
        login: this._maskLogin(login),
        status: response.status
      });

      const data = response.data;

      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞) –≤–º–µ—Å—Ç–æ JSON ‚Äî —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞/–Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (typeof data === 'string' && (data.includes('<html') || data.includes('<!DOCTYPE'))) {
        throw new AuthRequiredError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞)');
      }

      // –ï—Å–ª–∏ —è–≤–Ω–æ –ø—Ä–∏—à–µ–ª Event=4 ‚Äî –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (data && typeof data === 'object' && data.Event === 4) {
        throw new AuthRequiredError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      return {
        success: true,
        data
      };
    } catch (error) {
      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –ò –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ò —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
      if (error instanceof AuthRequiredError && login && password && !isRetry) {
        this._log('info', '–°–µ—Å—Å–∏—è Encounter –∏—Å—Ç–µ–∫–ª–∞, –ø—ã—Ç–∞—é—Å—å —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏–∑–∞—Ü–∏—é', {
          gameId,
          login: this._maskLogin(login)
        });

        try {
          let authResult;

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º authCallback –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (—Å –º—å—é—Ç–µ–∫—Å–æ–º), –∏–Ω–∞—á–µ –ø—Ä—è–º—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          if (this.authCallback) {
            this._log('info', '–ò—Å–ø–æ–ª—å–∑—É—é —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –º—å—é—Ç–µ–∫—Å–æ–º', {
              gameId,
              login: this._maskLogin(login)
            });
            authResult = await this.authCallback();
          } else {
            this._log('warn', 'Fallback: –ø—Ä—è–º–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ –º—å—é—Ç–µ–∫—Å–∞', {
              gameId,
              login: this._maskLogin(login)
            });
            authResult = await this.authenticate(login, password);
          }

          if (authResult.success) {
            this._log('info', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', {
              gameId,
              login: this._maskLogin(login)
            });
            const mergedCookies = {
              ...(authCookies || {}),
              ...(authResult.cookies || {})
            };
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ cookies (isRetry=true —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏)
            const retryState = await this.getGameState(
              gameId,
              mergedCookies,
              login,
              password,
              true
            );
            if (retryState && retryState.success) {
              retryState.newCookies = mergedCookies;
            }
            return retryState;
          } else {
            // –†–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
            const reAuthError = new AuthRequiredError(
              `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${authResult.message}`
            );
            reAuthError.reAuthFailed = true;
            reAuthError.authMessage = authResult.message;
            throw reAuthError;
          }
        } catch (authError) {
          // –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
          if (!authError.reAuthFailed) {
            const wrappedError = new AuthRequiredError(
              `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`
            );
            wrappedError.reAuthFailed = true;
            throw wrappedError;
          }
          throw authError;
        }
      }

      this._log('error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', {
        gameId,
        login: this._maskLogin(login),
        err: error
      });

      throw this._normalizeNetworkError(error, {
        operation: 'getGameState',
        context: { gameId }
      });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∏–≥—Ä—É –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É API Encounter —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  async sendAnswer(
    gameId,
    answer,
    authCookies,
    login = null,
    password = null,
    isRetry = false,
    expectedLevelId = null
  ) {
    const baseContext = {
      gameId,
      login: this._maskLogin(login),
      expectedLevelId
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (!authCookies || Object.keys(authCookies).length === 0) {
        throw new AuthRequiredError(
          '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.'
        );
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –∏–∑ –∫–µ—à–∞
      let levelData = this._getLevelFromCache(gameId, login);
      let model = null;

      if (levelData) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this._log('info', '–ò—Å–ø–æ–ª—å–∑—É—é –∫–µ—à Encounter —É—Ä–æ–≤–Ω—è', {
          ...baseContext,
          levelId: levelData.levelId,
          levelNumber: levelData.levelNumber
        });
      } else {
        // –ö–µ—à–∞ –Ω–µ—Ç - –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (—Å –∞–≤—Ç–æ—Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)
        this._log('info', '–ö–µ—à–∞ Encounter –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã', baseContext);
        const gameState = await this.getGameState(gameId, authCookies, login, password);

        if (!gameState.success) {
          throw new EncounterError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã', { code: 'GAME_STATE_FAILED' });
        }

        model = gameState.data;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞)
        if (
          typeof model === 'string' &&
          (model.includes('<html>') || model.includes('<!DOCTYPE'))
        ) {
          this._log('warn', 'Encounter –≤–µ—Ä–Ω—É–ª HTML –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞)', baseContext);
          throw new AuthRequiredError('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞)');
        }

        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
        this._log('info', '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Encounter', {
          ...baseContext,
          event: model?.Event ?? null
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Event –≤ –æ—Ç–≤–µ—Ç–µ
        if (model.Event === undefined || model.Event === null) {
          this._log('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç Encounter: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', {
            ...baseContext,
            payload: this._serializePayloadSnippet(model)
          });
          throw new EncounterError('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Event –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)', { code: 'INVALID_EVENT' });
        }

        if (model.Event !== 0) {
          const eventMessages = {
            1: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            2: '–ò–≥—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
            3: '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É Encounter',
            4: '–ò–≥—Ä–æ–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥',
            5: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å - –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã',
            6: '–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å',
            7: '–ù–µ –ø–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–º - –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ',
            8: '–ù–µ –ø–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π - –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É',
            9: '–ò–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ –∏–≥—Ä—É - –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            10: '–£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã - –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—É',
            11: '–ò–≥—Ä–æ–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ - –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ—Å—å –≤ –∫–æ–º–∞–Ω–¥–µ',
            12: '–í –∏–≥—Ä–µ –Ω–µ—Ç —É—Ä–æ–≤–Ω–µ–π',
            13: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ',
            14: '–ò–≥—Ä–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            15: '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞',
            16: '–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è',
            17: '–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞'
          };

          const errorMsg =
            eventMessages[model.Event] || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–≥—Ä—ã (–∫–æ–¥ ${model.Event})`;
          this._log('warn', 'Encounter —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã', {
            ...baseContext,
            event: model.Event,
            message: errorMsg
          });

          // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è - –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
          if (model.Event === 16) {
            this._invalidateLevelCache(gameId, '—É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è');
          }

          throw new EncounterError(errorMsg, { code: 'LEVEL_STATE_ERROR' });
        }

          const level = model.Level;
          this._log('info', '–°–æ—Å—Ç–æ—è–Ω–∏–µ Encounter —É—Ä–æ–≤–Ω—è –ø–æ–ª—É—á–µ–Ω–æ', {
            ...baseContext,
            levelId: level.LevelId,
            levelNumber: level.Number,
            levelPassed: level.IsPassed
          });

          // –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
          if (level.IsPassed) {
            this._log('info', 'Encounter —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω', {
              ...baseContext,
              levelId: level.LevelId,
              levelNumber: level.Number
            });
            this._invalidateLevelCache(gameId, '—É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω', null);
          throw new EncounterError(`–£—Ä–æ–≤–µ–Ω—å ${level.Number} —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω`, {
            code: 'LEVEL_COMPLETED',
            retryable: false
          });
          }

          if (level.Dismissed) {
            this._log('warn', 'Encounter —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', {
              ...baseContext,
              levelId: level.LevelId,
              levelNumber: level.Number
            });
            this._invalidateLevelCache(gameId, '—É—Ä–æ–≤–µ–Ω—å —Å–Ω—è—Ç', null);
          throw new EncounterError(`–£—Ä–æ–≤–µ–Ω—å ${level.Number} —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`, {
            code: 'LEVEL_DISMISSED',
            retryable: false
          });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –≤ –∫–µ—à
        this._saveLevelToCache(gameId, level, login);
        levelData = {
          levelId: level.LevelId,
          levelNumber: level.Number,
          isPassed: level.IsPassed
        };
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–µ–∂–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã)
      if (model && model.Level && model.Level.HasAnswerBlockRule) {
        if (model.Level.BlockDuration > 0) {
          const minutes = Math.floor(model.Level.BlockDuration / 60);
          const seconds = model.Level.BlockDuration % 60;
          const timeStr = minutes > 0 ? `${minutes}–º ${seconds}—Å` : `${seconds}—Å`;

          this._log('warn', 'Encounter –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ', {
            ...baseContext,
            levelId: levelData.levelId,
            levelNumber: levelData.levelNumber,
            blockDuration: model.Level.BlockDuration,
            blockTimeLeft: timeStr
          });
        throw new EncounterError(
          `‚è∞ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ ${levelData.levelNumber}. –û—Å—Ç–∞–ª–æ—Å—å: ${timeStr}`,
          { code: 'LEVEL_LOCKED', retryable: true }
        );
        } else {
          this._log('info', 'Encounter —Å–æ–æ–±—â–∞–µ—Ç –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞)', {
            ...baseContext,
            levelId: levelData.levelId,
            levelNumber: levelData.levelNumber
          });
        }
      }

      this._log('info', '–£—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –æ—Ç–≤–µ—Ç–æ–≤', {
        ...baseContext,
        levelId: levelData.levelId,
        levelNumber: levelData.levelNumber
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π levelId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const currentLevelIdFromState = levelData.levelId;
      const currentLevelNumberFromState = levelData.levelNumber;

      // –ï—Å–ª–∏ expectedLevelId –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const expectedLevelIdForCheck = expectedLevelId || currentLevelIdFromState;

      this._log('info', '–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞', {
        ...baseContext,
        expectedLevelId: expectedLevelIdForCheck,
        currentLevelId: currentLevelIdFromState
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º cookie —Å—Ç—Ä–æ–∫—É
      const cookieString = Object.entries(authCookies)
        .map(([key, value]) => `${key}=${value}`)
        .join('; ');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
      this._log('info', '–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –≤ Encounter', {
        ...baseContext,
        levelId: levelData.levelId,
        levelNumber: levelData.levelNumber,
        answerLength: answer?.length ?? 0
      });

      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è)
      this._log('info', '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π', baseContext);
      const verifyState = await this.getGameState(gameId, authCookies, login, password);
      if (verifyState.success && verifyState.data && verifyState.data.Level) {
        const currentLevelId = verifyState.data.Level.LevelId;
        const currentLevelNumber = verifyState.data.Level.Number;

        this._log('info', '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞', {
          ...baseContext,
          expectedLevelId: expectedLevelIdForCheck,
          currentLevelId,
          currentLevelNumber
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –û–ñ–ò–î–ê–ï–ú–û–ì–û —É—Ä–æ–≤–Ω—è
        if (currentLevelId !== expectedLevelIdForCheck) {
          // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
          const expectedLevelNumber =
            expectedLevelId === currentLevelIdFromState ? currentLevelNumberFromState : '?';

          this._log('warn', 'Encounter —Å–æ–æ–±—â–∏–ª –æ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π', {
            ...baseContext,
            expectedLevelNumber,
            currentLevelNumber,
            currentLevelId,
            expectedLevelId: expectedLevelIdForCheck
          });
          throw new LevelChangedError(
            `–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è (–æ–∂–∏–¥–∞–ª—Å—è ${expectedLevelNumber}, —Ç–µ–∫—É—â–∏–π ${currentLevelNumber})`,
            {
              oldLevel: expectedLevelNumber,
              newLevel: currentLevelNumber,
              answer
            }
          );
        }

        this._log('info', '–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç—É–∞–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É', {
          ...baseContext,
          currentLevelId,
          currentLevelNumber
        });
      }

      // Rate limiting: –∂–¥—ë–º –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É
      await this._waitRateLimit();

      const postData = new URLSearchParams({
        LevelId: levelData.levelId.toString(),
        LevelNumber: levelData.levelNumber.toString(),
        'LevelAction.Answer': answer
      });

      this._log('debug', 'POST –∑–∞–ø—Ä–æ—Å –∫ Encounter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞', {
        ...baseContext,
        levelId: levelData.levelId,
        levelNumber: levelData.levelNumber,
        endpoint: `/GameEngines/Encounter/Play/${gameId}?json=1`
      });

      const response = await axios.post(
        `${this.domain}/GameEngines/Encounter/Play/${gameId}?json=1`,
        postData,
        {
          timeout: this.timeout,
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            Accept: 'application/json, text/html, */*',
            Cookie: cookieString,
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        }
      );

      this._log('info', '–û—Ç–≤–µ—Ç Encounter –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω', {
        ...baseContext,
        event: response.data?.Event ?? null,
        status: response.status
      });

      const result = response.data;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞)
      if (
        typeof result === 'string' &&
        (result.includes('<html>') || result.includes('<!DOCTYPE'))
      ) {
        this._log('warn', 'Encounter –≤–µ—Ä–Ω—É–ª HTML –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ (—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞)', baseContext);
        throw new AuthRequiredError('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞)');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Event=4 (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
      if (result.Event === 4) {
        this._log('warn', 'Encounter —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ', baseContext);
        throw new AuthRequiredError('–ò–≥—Ä–æ–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (result.Event === undefined || result.Event === null) {
        this._log('warn', 'Encounter –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –±–µ–∑ Event', {
          ...baseContext,
          payload: this._serializePayloadSnippet(result)
        });
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ LevelAction –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      } else if (result.Event !== 0) {
        // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if ([16, 18, 19, 20, 21, 22].includes(result.Event)) {
          this._log('info', 'Encounter —Å–æ–æ–±—â–∏–ª –æ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏', {
            ...baseContext,
            event: result.Event
          });
        } else {
          throw new EncounterError(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–∫–æ–¥ ${result.Event})`, {
            code: 'ANSWER_FAILED',
            retryable: true
          });
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
      const engineAction = result.EngineAction;
      const levelAction = engineAction?.LevelAction;

      let isCorrect = false;
      let message = '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω';

      if (levelAction) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        this._log('debug', 'Encounter LevelAction –ø–æ–ª—É—á–µ–Ω', {
          ...baseContext,
          levelId: levelData.levelId,
          levelNumber: levelData.levelNumber,
          answerEcho: levelAction.Answer,
          isCorrectAnswer: levelAction.IsCorrectAnswer
        });

        if (levelAction.IsCorrectAnswer !== null) {
          isCorrect = levelAction.IsCorrectAnswer;
          message = isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç';

          this._log('info', 'Encounter –æ—Ü–µ–Ω–∏–ª –æ—Ç–≤–µ—Ç', {
            ...baseContext,
            levelId: levelData.levelId,
            levelNumber: levelData.levelNumber,
            isCorrect
          });
        } else {
          this._log('warn', 'Encounter –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –æ—Ç–≤–µ—Ç (IsCorrectAnswer = null)', baseContext);
          message = '‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Ä–æ–≤–µ–Ω—å
        if (result.Level && result.Level.IsPassed) {
          message += ' üéâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω!';
          this._log('info', 'Encounter —Å–æ–æ–±—â–∞–µ—Ç –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è', {
            ...baseContext,
            levelNumber: result.Level.Number,
            levelId: result.Level.LevelId
          });
          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à - —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è
          this._invalidateLevelCache(gameId, '—É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω', null);
        }

        // –ï—Å–ª–∏ Event –∏–∑–º–µ–Ω–∏–ª—Å—è (—É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è) - –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
        if (result.Event && [16, 18, 19, 20, 21, 22].includes(result.Event)) {
          this._invalidateLevelCache(gameId, `Event ${result.Event} - —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è`);
        }
      } else {
        this._log('warn', 'Encounter –Ω–µ –≤–µ—Ä–Ω—É–ª LevelAction', {
          ...baseContext,
          payload: this._serializePayloadSnippet(result)
        });
        message = '‚ùå –û—Ç–≤–µ—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ';
      }

      return {
        success: true,
        correct: isCorrect,
        message: message,
        levelNumber: levelData.levelNumber,
        data: result,
        level: result.Level,
        newCookies: null // Cookies –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å
      };
    } catch (error) {
      if (!isRetry) {
        this._invalidateLevelCache(gameId, '–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞');
      }

      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –ò –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ò —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
      if (error instanceof AuthRequiredError && login && password && !isRetry) {
        this._log('info', '–°–µ—Å—Å–∏—è Encounter –∏—Å—Ç–µ–∫–ª–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞, –≤—ã–ø–æ–ª–Ω—è—é —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏–∑–∞—Ü–∏—é', {
          ...baseContext,
          err: error
        });

        try {
          let authResult;

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º authCallback –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (—Å –º—å—é—Ç–µ–∫—Å–æ–º), –∏–Ω–∞—á–µ –ø—Ä—è–º—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          if (this.authCallback) {
            this._log('info', '–ò—Å–ø–æ–ª—å–∑—É—é —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –º—å—é—Ç–µ–∫—Å–æ–º', baseContext);
            authResult = await this.authCallback();
          } else {
            this._log('warn', 'Fallback: –ø—Ä—è–º–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ –º—å—é—Ç–µ–∫—Å–∞', baseContext);
            authResult = await this.authenticate(login, password);
          }

          if (authResult.success) {
            this._log('info', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞', baseContext);
            const mergedCookies = {
              ...(authCookies || {}),
              ...(authResult.cookies || {})
            };
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ cookies (isRetry=true —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏)
            // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º expectedLevelId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è
            const retryResult = await this.sendAnswer(
              gameId,
              answer,
              mergedCookies,
              login,
              password,
              true,
              expectedLevelId
            );
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö cookies –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
            retryResult.newCookies = mergedCookies;
            return retryResult;
          } else {
            throw Object.assign(
              new AuthRequiredError(
                `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${authResult.message}`,
                { details: { gameId } }
              ),
              { reAuthFailed: true, authMessage: authResult.message }
            );
          }
        } catch (authError) {
          // –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
          if (!(authError instanceof AuthRequiredError) || !authError.reAuthFailed) {
            throw Object.assign(
              new AuthRequiredError(
                `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`,
                { details: { gameId } }
              ),
              { reAuthFailed: true }
            );
          }
          throw authError;
        }
      }

      this._log('error', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ Encounter', {
        ...baseContext,
        err: error
      });
      throw this._normalizeNetworkError(error, {
        operation: 'sendAnswer',
        context: { gameId, expectedLevelId }
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  async getGameInfo(gameId, authCookies, login = null, password = null) {
    try {
      const gameState = await this.getGameState(gameId, authCookies, login, password);

      if (gameState.success) {
        const model = gameState.data;
        return {
          success: true,
          data: {
            id: model.GameId || gameId,
            name: model.GameTitle || `–ò–≥—Ä–∞ #${gameId}`,
            number: model.GameNumber,
            status: model.Event === 0 ? 'active' : 'inactive',
            level: model.Level
              ? {
                  id: model.Level.LevelId,
                  name: model.Level.Name,
                  number: model.Level.Number,
                  isPassed: model.Level.IsPassed,
                  sectorsTotal: model.Level.RequiredSectorsCount,
                  sectorsPassed: model.Level.PassedSectorsCount
                }
              : null,
            team: model.TeamName,
            login: model.Login
          }
        };
      } else {
        throw new EncounterError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã', { code: 'GAME_STATE_FAILED' });
      }
    } catch (error) {
      const normalized = this._normalizeNetworkError(error, {
        operation: 'getGameInfo',
        context: { gameId }
      });

      this._log('error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ', {
        gameId,
        err: normalized
      });

      return {
        success: false,
        error: normalized.message
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async checkConnection() {
    try {
      // Rate limiting: –∂–¥—ë–º –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É
      await this._waitRateLimit();

      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const response = await axios.get(this.domain, {
        timeout: 5000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      return response.status === 200;
    } catch (error) {
      const normalized = this._normalizeNetworkError(error, {
        operation: 'checkConnection'
      });
      this._log('warn', 'Encounter –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å', {
        err: normalized,
        message: normalized.message
      });
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –¥–æ–º–µ–Ω–∞
  async getGamesList() {
    try {
      // Rate limiting: –∂–¥—ë–º –º–∏–Ω–∏–º—É–º 1.2 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É
      await this._waitRateLimit();

      const response = await axios.get(`${this.domain}/home/?json=1`, {
        timeout: this.timeout,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      return {
        success: true,
        comingGames: response.data.ComingGames || [],
        activeGames: response.data.ActiveGames || []
      };
    } catch (error) {
      const normalized = this._normalizeNetworkError(error, {
        operation: 'getGamesList'
      });

      this._log('error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä Encounter', { err: normalized });
      return {
        success: false,
        error: normalized.message
      };
    }
  }
}

module.exports = EncounterAPI;


