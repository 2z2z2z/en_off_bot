/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Å –º—å—é—Ç–µ–∫—Å–æ–º
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π
 */

const { logger } = require('../infra/logger');

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –º—å—é—Ç–µ–∫—Å–æ–º
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –í–°–ï–• –≤—ã–∑–æ–≤–æ–≤ API (sendAnswer, getGameState, –∏ —Ç.–¥.)
 * @param {Object} user - –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} EncounterAPI - –∫–ª–∞—Å—Å EncounterAPI
 * @param {Function} saveUserData - —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * @returns {Promise<Object>} - cookies –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function ensureAuthenticated(user, EncounterAPI, saveUserData) {
  // –ú—å—é—Ç–µ–∫—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –µ—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –∂–¥–µ–º –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  if (user.isAuthenticating && user.authPromise) {
    logger.info(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${user.login}...`);
    await user.authPromise;
    logger.info(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ cookies`);
    return user.authCookies;
  }

  if (!user.authCookies || Object.keys(user.authCookies).length === 0) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
    if (user.isAuthenticating && user.authPromise) {
      await user.authPromise;
      // –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è cookies –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
      if (user.authCookies && Object.keys(user.authCookies).length > 0) {
        logger.info(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º cookies –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
        return user.authCookies;
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç cookies, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!user.authCookies || Object.keys(user.authCookies).length === 0) {
      logger.info(`üîê –ù–µ—Ç cookies, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è ${user.login}...`);
      logger.info(`üéÆ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: –¥–æ–º–µ–Ω=${user.domain}, ID=${user.gameId}`);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      user.isAuthenticating = true;
      let resolveAuth, rejectAuth;
      user.authPromise = new Promise((resolve, reject) => {
        resolveAuth = resolve;
        rejectAuth = reject;
      });

      try {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π API —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const tempApi = new EncounterAPI(user.domain);
        const authResult = await tempApi.authenticate(user.login, user.password);

        if (authResult.success) {
          user.authCookies = authResult.cookies;
          await saveUserData();
          logger.info(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${user.login}`);
          resolveAuth();
          return user.authCookies;
        } else {
          const error = new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authResult.message}`);
          rejectAuth(error);
          throw error;
        }
      } catch (authError) {
        rejectAuth(authError);
        throw authError;
      } finally {
        user.isAuthenticating = false;
        user.authPromise = null;
      }
    }
  } else {
    logger.info(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ cookies –¥–ª—è ${user.login}`);
  }

  return user.authCookies;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç callback –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ EncounterAPI
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ API –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à—É—é —Å–µ—Å—Å–∏—é
 * @param {Object} user - –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} EncounterAPI - –∫–ª–∞—Å—Å EncounterAPI
 * @param {Function} saveUserData - —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * @returns {Promise<Function>} - callback —Ñ—É–Ω–∫—Ü–∏—è
 */
async function createAuthCallback(user, EncounterAPI, saveUserData) {
  return async () => {
    logger.info(`üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ callback –¥–ª—è ${user.login}...`);
    const cookies = await ensureAuthenticated(user, EncounterAPI, saveUserData);
    return { success: true, cookies };
  };
}

module.exports = {
  ensureAuthenticated,
  createAuthCallback
};
