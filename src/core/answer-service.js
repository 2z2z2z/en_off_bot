function createAnswerService(deps) {
  const {
    EncounterAPI,
    sendMessage,
    sendOrUpdateMessage,
    saveUserData,
    getUserInfo,
    getAnswerQueue,
    enqueueAnswer
  } = deps;

  async function sendToEncounterAPI(user, answer) {
    try {
      const api = new EncounterAPI(user.domain);

      if (!user.authCookies || Object.keys(user.authCookies).length === 0) {
        console.log(`üîê –ù–µ—Ç cookies, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è ${user.login}...`);
        console.log(`üéÆ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: –¥–æ–º–µ–Ω=${user.domain}, ID=${user.gameId}`);

        const authResult = await api.authenticate(user.login, user.password);
        if (authResult.success) {
          user.authCookies = authResult.cookies;
          await saveUserData();
          console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${user.login}`);
        } else {
          throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authResult.message}`);
        }
      } else {
        console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ cookies –¥–ª—è ${user.login}`);
      }

      const result = await api.sendAnswer(user.gameId, answer, user.authCookies, user.login, user.password);

      if (result.newCookies) {
        console.log('üîÑ Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        user.authCookies = result.newCookies;
        await saveUserData();
      }

      if (result.success) {
        console.log(`‚úÖ –û—Ç–≤–µ—Ç "${answer}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É ${user.gameId}. ${result.message}`);
        return result;
      }

      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ API Encounter:', error.message);
      throw error;
    }
  }

  async function sendAnswerToEncounter(platform, userId, answer, progressMessageId = null, retryCount = 0) {
    const user = getUserInfo(platform, userId);
    const MAX_RETRIES = 2;

    try {
      const response = await sendToEncounterAPI(user, answer);

      if (response.success) {
        let message = `üì§ –û—Ç–≤–µ—Ç "${answer}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ‚Ññ${response.levelNumber}\n${response.message}`;

        if (response.level && response.level.Name) {
          message += `\nüìù –£—Ä–æ–≤–µ–Ω—å: ${response.level.Name}`;
          if (response.level.PassedSectorsCount !== undefined && response.level.RequiredSectorsCount !== undefined) {
            message += `\nüìä –°–µ–∫—Ç–æ—Ä–∞: ${response.level.PassedSectorsCount}/${response.level.RequiredSectorsCount}`;
          }
        }

        await sendOrUpdateMessage(platform, userId, message, progressMessageId);
        return response;
      }

      throw new Error(response.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);

      const networkErrors = ['ECONNREFUSED', 'ENOTFOUND', 'ETIMEDOUT', 'network', 'timeout'];
      const isNetworkError = networkErrors.some(errType =>
        error.code === errType || error.message.toLowerCase().includes(errType.toLowerCase())
      );

      const authErrors = ['–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'];
      const isAuthError = authErrors.some(errType =>
        error.message.toLowerCase().includes(errType.toLowerCase())
      );

      const criticalErrors = ['IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', '—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤'];
      const isCriticalError = criticalErrors.some(errType =>
        error.message.toLowerCase().includes(errType.toLowerCase())
      );

      if (isCriticalError) {
        console.error(`üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${error.message}`);
        await sendOrUpdateMessage(platform, userId,
          `üö´ ${error.message}\n\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.`,
          progressMessageId
        );
        return null;
      }

      if (isNetworkError) {
        enqueueAnswer(platform, userId, {
          answer,
          timestamp: Date.now()
        });
        user.isOnline = false;
        await saveUserData();

        await sendMessage(platform, userId, `üîÑ –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –û—Ç–≤–µ—Ç "${answer}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.`);
        return null;
      }

      if (isAuthError) {
        if (retryCount >= MAX_RETRIES) {
          console.error(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ (${MAX_RETRIES}) –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}"`);
          await sendOrUpdateMessage(platform, userId,
            `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç "${answer}" –ø–æ—Å–ª–µ ${MAX_RETRIES + 1} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
            progressMessageId
          );
          return null;
        }

        console.log(`üîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${MAX_RETRIES + 1})`);

        if (progressMessageId) {
          await sendOrUpdateMessage(platform, userId,
            `üîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1})...`,
            progressMessageId
          );
        }

        try {
          user.authCookies = null;
          await saveUserData();

          const backoffDelay = Math.pow(2, retryCount) * 1000;
          console.log(`‚è±Ô∏è Exponential backoff: –∂–¥—ë–º ${backoffDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${retryCount + 2}`);
          await new Promise(resolve => setTimeout(resolve, backoffDelay));

          console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 2} –æ—Ç–ø—Ä–∞–≤–∫–∏ "${answer}" –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);

          if (progressMessageId) {
            await sendOrUpdateMessage(platform, userId,
              `üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –æ—Ç–ø—Ä–∞–≤–∫—É "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 2})...`,
              progressMessageId
            );
          }

          return await sendAnswerToEncounter(platform, userId, answer, progressMessageId, retryCount + 1);
        } catch (retryError) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏:', retryError);

          const isMessageNotModifiedError = retryError.code === 'ETELEGRAM' &&
            retryError.response?.body?.description?.includes('message is not modified');

          if (!isMessageNotModifiedError) {
            await sendOrUpdateMessage(platform, userId,
              `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: ${retryError.message}`,
              progressMessageId
            );
          }
          return null;
        }
      }

      await sendOrUpdateMessage(platform, userId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, progressMessageId);
      return null;
    }
  }

  async function processAnswerQueue(platform, userId) {
    const user = getUserInfo(platform, userId);
    const queue = getAnswerQueue(platform, userId);

    if (queue.length === 0) {
      return;
    }

    const totalAnswers = queue.length;
    let processed = 0;
    let successful = 0;
    let skipped = 0;

    const queueMessage = await sendMessage(platform, 
      userId,
      `üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ ${totalAnswers} –æ—Ç–≤–µ—Ç–æ–≤...`
    );

    console.log('‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏...');
    await new Promise(resolve => setTimeout(resolve, 3000));

    await sendOrUpdateMessage(platform, userId,
      `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å –∏–∑ ${totalAnswers} –æ—Ç–≤–µ—Ç–æ–≤...`,
      queueMessage.message_id
    );

    for (let i = 0; i < queue.length; i++) {
      const queueItem = queue[i];
      processed++;

      await sendOrUpdateMessage(platform, userId,
        `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é "${queueItem.answer}"...`,
        queueMessage.message_id
      );

      try {
        const response = await sendToEncounterAPI(user, queueItem.answer);

        if (response.success) {
          successful++;
          queue.splice(i, 1);
          i--;

          await sendOrUpdateMessage(platform, userId,
            `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`,
            queueMessage.message_id
          );
        } else {
          throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);

        const ignorableErrors = [
          'Event –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–≥—Ä—ã',
          '–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è',
          '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        ];

        const authErrors = [
          '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
          '—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'
        ];

        const errorMessage = error.message?.toLowerCase?.() || '';
        const isIgnorableError = ignorableErrors.some(errType => errorMessage.includes(errType.toLowerCase()));
        const isAuthError = authErrors.some(errType => errorMessage.includes(errType.toLowerCase()));

        if (isIgnorableError) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç "${queueItem.answer}" –∏–∑-–∑–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö`);
          skipped++;

          await sendOrUpdateMessage(platform, userId,
            `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ—Ç–≤–µ—Ç`,
            queueMessage.message_id
          );

          queue.splice(i, 1);
          i--;
        } else if (isAuthError) {
          console.log(`üîí –ü—Ä–æ–±–ª–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: ${error.message}`);

          await sendOrUpdateMessage(platform, userId,
            `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\nüîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è "${queueItem.answer}"...`,
            queueMessage.message_id
          );

          try {
            user.authCookies = null;
            await saveUserData();

            await new Promise(resolve => setTimeout(resolve, 2000));

            await sendOrUpdateMessage(platform, userId,
              `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\nüîÑ –ü–æ–≤—Ç–æ—Ä—è—é "${queueItem.answer}"...`,
              queueMessage.message_id
            );

            i--;
            processed--;

            console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ "${queueItem.answer}" –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
          } catch (authError) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏:', authError);

            const isMessageNotModifiedError = authError.code === 'ETELEGRAM' &&
              authError.response?.body?.description?.includes('message is not modified');

            if (!isMessageNotModifiedError) {
              console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç "${queueItem.answer}" –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
            }

            skipped++;
            queue.splice(i, 1);
            i--;
          }
        } else {
          await sendOrUpdateMessage(platform, userId,
            `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: ${error.message}\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successful}/${totalAnswers}`,
            queueMessage.message_id
          );
          break;
        }
      }

      if (i < queue.length - 1 || processed < totalAnswers) {
        console.log('‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ 1.2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–≤–µ—Ç–æ–º...');
        await new Promise(resolve => setTimeout(resolve, 1200));
      }
    }

    if (queue.length === 0) {
      user.isOnline = true;

      let finalMessage = `‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successful} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`;
      if (skipped > 0) {
        finalMessage += `, ${skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ`;
      }
      finalMessage += ` –∏–∑ ${totalAnswers}`;

      await sendOrUpdateMessage(platform, userId, finalMessage, queueMessage.message_id);
    }

    await saveUserData();
  }

  return {
    sendToEncounterAPI,
    sendAnswerToEncounter,
    processAnswerQueue
  };
}

module.exports = {
  createAnswerService
};




