const {
  ensureAuthenticated,
  createAuthCallback: createAuthCallbackHelper
} = require('./auth-manager');
const { logger } = require('../infra/logger');

function createAnswerService(deps) {
  const {
    EncounterAPI,
    sendMessage,
    sendOrUpdateMessage,
    saveUserData,
    getUserInfo,
    getAnswerQueue,
    enqueueAnswer
  } = deps;

  /**
   * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è createAuthCallback —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  async function createAuthCallback(user) {
    return createAuthCallbackHelper(user, EncounterAPI, saveUserData);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ lastKnownLevel –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
   */
  function updateLastKnownLevel(user, levelData) {
    if (levelData && levelData.levelId && levelData.levelNumber !== undefined) {
      user.lastKnownLevel = {
        levelId: levelData.levelId,
        levelNumber: levelData.levelNumber,
        timestamp: Date.now()
      };
      logger.info(`üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${levelData.levelNumber} (ID: ${levelData.levelId})`);
    }
  }

  async function sendToEncounterAPI(user, answer) {
    try {
      // –°–æ–∑–¥–∞–µ–º API —Å callback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const authCallback = await createAuthCallback(user);
      const api = new EncounterAPI(user.domain, authCallback);

      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ—Ç cookies
      await ensureAuthenticated(user, EncounterAPI, saveUserData);

      // –ü–µ—Ä–µ–¥–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π levelId –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è
      const expectedLevelId = user.lastKnownLevel?.levelId || null;
      logger.info(
        `üìå –û–∂–∏–¥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}": ${expectedLevelId ? `ID=${expectedLevelId}` : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`
      );

      const result = await api.sendAnswer(
        user.gameId,
        answer,
        user.authCookies,
        user.login,
        user.password,
        false,
        expectedLevelId
      );

      if (result.newCookies) {
        logger.info('üîÑ Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        user.authCookies = {
          ...(user.authCookies || {}),
          ...(result.newCookies || {})
        };
        await saveUserData();
      }

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º lastKnownLevel –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (result.level) {
          updateLastKnownLevel(user, {
            levelId: result.level.LevelId,
            levelNumber: result.level.Number
          });
        }
        logger.info(`‚úÖ –û—Ç–≤–µ—Ç "${answer}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É ${user.gameId}. ${result.message}`);
        return result;
      }

      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ API Encounter:', error.message);
      throw error;
    }
  }

  async function sendAnswerToEncounter(
    platform,
    userId,
    answer,
    progressMessageId = null,
    retryCount = 0
  ) {
    const user = getUserInfo(platform, userId);
    const MAX_RETRIES = 2;

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏
    if (user.pendingQueueDecision) {
      const decision = user.pendingQueueDecision;
      await sendMessage(
        platform,
        userId,
        `‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏—Ç–µ —Å—É–¥—å–±—É —Å—Ç–∞—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏!\n\n` +
          `–£ –≤–∞—Å –µ—Å—Ç—å ${decision.queueSize} ${decision.queueSize === 1 ? '–æ—Ç–≤–µ—Ç' : decision.queueSize < 5 ? '–æ—Ç–≤–µ—Ç–∞' : '–æ—Ç–≤–µ—Ç–æ–≤'} ` +
          `–¥–ª—è —É—Ä–æ–≤–Ω—è ${decision.oldLevelNumber}, –∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî ${decision.newLevelNumber}.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≤—ã–±–æ—Ä–æ–º.`
      );
      return null;
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –æ—Ç–≤–µ—Ç—É
    if (user.pendingAnswerDecision) {
      const decision = user.pendingAnswerDecision;
      await sendMessage(
        platform,
        userId,
        `‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏—Ç–µ —Å—É–¥—å–±—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!\n\n` +
          `–û—Ç–≤–µ—Ç "${decision.answer}" –≥–æ—Ç–æ–≤–∏–ª—Å—è –¥–ª—è —É—Ä–æ–≤–Ω—è ${decision.oldLevel}, ` +
          `–Ω–æ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî ${decision.newLevel}.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≤—ã–±–æ—Ä–æ–º.`
      );
      return null;
    }

    // –†–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ (–¥–µ—Ç–µ–∫—Ç –æ—Ñ—Ñ–ª–∞–π–Ω-–ø–∞—á–∫–∏)
    if (user.isAccumulatingAnswers) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –±—É—Ñ–µ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
      user.accumulatedAnswers = user.accumulatedAnswers || [];
      user.accumulatedAnswers.push({
        answer,
        timestamp: Date.now(),
        levelId: user.lastKnownLevel?.levelId || null,
        levelNumber: user.lastKnownLevel?.levelNumber || null
      });

      logger.info(
        `üì¶ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ "${answer}" (–≤—Å–µ–≥–æ: ${user.accumulatedAnswers.length})`
      );

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
      if (user.accumulationTimer) {
        clearTimeout(user.accumulationTimer);
        logger.info(`‚è±Ô∏è –¢–∞–π–º–µ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω`);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã
      user.accumulationTimer = setTimeout(async () => {
        logger.info(`‚è±Ô∏è –¢–∞–π–º–µ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏—Å—Ç—ë–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏`);
        await handleAccumulationComplete(platform, userId);
      }, 5000);

      await saveUserData();

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const accumulationNotice = `üì¶ –ö–æ–¥ "${answer}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä (${user.accumulatedAnswers.length})`;
      if (progressMessageId) {
        await sendOrUpdateMessage(platform, userId, accumulationNotice, progressMessageId);
      } else {
        await sendMessage(platform, userId, accumulationNotice);
      }

      return null;
    }

    try {
      const response = await sendToEncounterAPI(user, answer);

      if (response.success) {
        let message = `üì§ –û—Ç–≤–µ—Ç "${answer}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ‚Ññ${response.levelNumber}\n${response.message}`;

        if (response.level && response.level.Name) {
          message += `\nüìù –£—Ä–æ–≤–µ–Ω—å: ${response.level.Name}`;
          if (
            response.level.PassedSectorsCount !== undefined &&
            response.level.RequiredSectorsCount !== undefined
          ) {
            message += `\nüìä –°–µ–∫—Ç–æ—Ä–∞: ${response.level.PassedSectorsCount}/${response.level.RequiredSectorsCount}`;
          }
        }

        await sendOrUpdateMessage(platform, userId, message, progressMessageId);
        return response;
      }

      throw new Error(response.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —É—Ä–æ–≤–µ–Ω—å
      if (error.isLevelChanged) {
        logger.info(
          `‚ö†Ô∏è –ó–ê–©–ò–¢–ê –°–†–ê–ë–û–¢–ê–õ–ê: –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è (${error.oldLevel} ‚Üí ${error.newLevel}) –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}"`
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.pendingAnswerDecision = {
          answer: answer,
          oldLevel: error.oldLevel,
          newLevel: error.newLevel
        };
        await saveUserData();

        const messageText =
          `‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è (${error.oldLevel} ‚Üí ${error.newLevel})\n\n` +
          `–û—Ç–≤–µ—Ç "${answer}" –≥–æ—Ç–æ–≤–∏–ª—Å—è –¥–ª—è —É—Ä–æ–≤–Ω—è ${error.oldLevel}, ` +
          `–Ω–æ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî ${error.newLevel}.\n\n` +
          `–ß—Ç–æ –¥–µ–ª–∞—Ç—å?`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram –∏ VK)
        let options = {};

        if (platform === 'telegram') {
          options = {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${error.newLevel}`, callback_data: 'answer_send' },
                  { text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'answer_cancel' }
                ]
              ]
            }
          };
        } else if (platform === 'vk') {
          options = {
            keyboard: {
              type: 'inline',
              buttons: [
                [
                  {
                    label: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${error.newLevel}`,
                    payload: { action: 'answer_send' }
                  },
                  { label: '–û—Ç–º–µ–Ω–∏—Ç—å', payload: { action: 'answer_cancel' } }
                ]
              ]
            }
          };
        }

        await sendOrUpdateMessage(platform, userId, messageText, progressMessageId, options);
        return null;
      }

      const networkErrors = ['ECONNREFUSED', 'ENOTFOUND', 'ETIMEDOUT', 'network', 'timeout'];
      const isNetworkError = networkErrors.some(
        errType =>
          error.code === errType || error.message.toLowerCase().includes(errType.toLowerCase())
      );

      const authErrors = ['–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'];
      const isAuthError = authErrors.some(errType =>
        error.message.toLowerCase().includes(errType.toLowerCase())
      );

      const criticalErrors = ['IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', '—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤'];
      const isCriticalError = criticalErrors.some(errType =>
        error.message.toLowerCase().includes(errType.toLowerCase())
      );

      if (isCriticalError) {
        logger.error(`üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${error.message}`);
        await sendOrUpdateMessage(
          platform,
          userId,
          `üö´ ${error.message}\n\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.`,
          progressMessageId
        );
        return null;
      }

      if (isNetworkError) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ä–µ—à—ë–Ω–Ω–∞—è —Å—É–¥—å–±–∞ —Å—Ç–∞—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏ - –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
        if (user.pendingQueueDecision) {
          const oldQueueSize = user.answerQueue.length;
          const decision = user.pendingQueueDecision;

          logger.info(
            `üóëÔ∏è –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏ (${oldQueueSize} –æ—Ç–≤–µ—Ç–æ–≤) –∏–∑-–∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏`
          );

          user.answerQueue.length = 0; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –æ—á–µ—Ä–µ–¥—å
          user.pendingQueueDecision = null;

          await sendMessage(
            platform,
            userId,
            `üóëÔ∏è –°—Ç–∞—Ä–∞—è –æ—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–∞ (–ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏)\n\n` +
              `–ë—ã–ª–æ ${oldQueueSize} ${oldQueueSize === 1 ? '–æ—Ç–≤–µ—Ç' : oldQueueSize < 5 ? '–æ—Ç–≤–µ—Ç–∞' : '–æ—Ç–≤–µ—Ç–æ–≤'} ` +
              `–¥–ª—è —É—Ä–æ–≤–Ω—è ${decision.oldLevelNumber}.`
          );
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–º–µ—Å—Ç–æ –∫–µ—à–∞
        const lastLevel = user.lastKnownLevel;

        enqueueAnswer(platform, userId, {
          answer,
          timestamp: Date.now(),
          levelId: lastLevel?.levelId || null,
          levelNumber: lastLevel?.levelNumber || null
        });
        user.isOnline = false;
        await saveUserData();

        let message = `üîÑ –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –û—Ç–≤–µ—Ç "${answer}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å`;
        if (lastLevel?.levelNumber) {
          message += ` (–£—Ä–æ–≤–µ–Ω—å ${lastLevel.levelNumber})`;
        }
        message +=
          '.\n‚ö†Ô∏è –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–º–µ–Ω–∏—Ç—Å—è, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ—à–∏—Ç—å: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å.';

        await sendMessage(platform, userId, message);
        return null;
      }

      if (isAuthError) {
        if (retryCount >= MAX_RETRIES) {
          logger.error(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ (${MAX_RETRIES}) –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}"`);
          await sendOrUpdateMessage(
            platform,
            userId,
            `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç "${answer}" –ø–æ—Å–ª–µ ${MAX_RETRIES + 1} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
            progressMessageId
          );
          return null;
        }

        logger.info(
          `üîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${MAX_RETRIES + 1})`
        );

        if (progressMessageId) {
          await sendOrUpdateMessage(
            platform,
            userId,
            `üîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1})...`,
            progressMessageId
          );
        }

        try {
          user.authCookies = null;
          await saveUserData();

          const backoffDelay = Math.pow(2, retryCount) * 1000;
          logger.info(
            `‚è±Ô∏è Exponential backoff: –∂–¥—ë–º ${backoffDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${retryCount + 2}`
          );
          await new Promise(resolve => setTimeout(resolve, backoffDelay));

          logger.info(
            `üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 2} –æ—Ç–ø—Ä–∞–≤–∫–∏ "${answer}" –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`
          );

          if (progressMessageId) {
            await sendOrUpdateMessage(
              platform,
              userId,
              `üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –æ—Ç–ø—Ä–∞–≤–∫—É "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 2})...`,
              progressMessageId
            );
          }

          return await sendAnswerToEncounter(
            platform,
            userId,
            answer,
            progressMessageId,
            retryCount + 1
          );
        } catch (retryError) {
          logger.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏:', retryError);

          const isMessageNotModifiedError =
            retryError.code === 'ETELEGRAM' &&
            retryError.response?.body?.description?.includes('message is not modified');

          if (!isMessageNotModifiedError) {
            await sendOrUpdateMessage(
              platform,
              userId,
              `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: ${retryError.message}`,
              progressMessageId
            );
          }
          return null;
        }
      }

      await sendOrUpdateMessage(platform, userId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, progressMessageId);
      return null;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
   */
  async function handleAccumulationComplete(platform, userId) {
    const user = getUserInfo(platform, userId);

    if (!user.accumulatedAnswers || user.accumulatedAnswers.length === 0) {
      logger.info(`‚ö†Ô∏è –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è ${platform}:${userId}`);
      user.isAccumulatingAnswers = false;
      user.accumulationTimer = null;
      await saveUserData();
      return;
    }

    const totalCodes = user.accumulatedAnswers.length;
    const startLevel = user.accumulationStartLevel;

    logger.info(
      `üìã –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${totalCodes} –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (—É—Ä–æ–≤–µ–Ω—å: ${startLevel?.levelNumber || '?'})`
    );

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 —à—Ç—É–∫)
    const codesList = user.accumulatedAnswers
      .slice(0, 10)
      .map((item, index) => `${index + 1}. "${item.answer}"`)
      .join('\n');
    const moreCodesText = totalCodes > 10 ? `\n... –∏ –µ—â—ë ${totalCodes - 10}` : '';

    const messageText =
      `üì¶ –ù–∞–∫–æ–ø–ª–µ–Ω–æ ${totalCodes} ${totalCodes === 1 ? '–∫–æ–¥' : totalCodes < 5 ? '–∫–æ–¥–∞' : '–∫–æ–¥–æ–≤'}\n\n` +
      `${codesList}${moreCodesText}\n\n` +
      `–£—Ä–æ–≤–µ–Ω—å –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: ${startLevel?.levelNumber || '?'}\n\n` +
      `–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏?`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram –∏ VK)
    let options = {};

    if (platform === 'telegram') {
      options = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ', callback_data: 'batch_send_all' },
              { text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ', callback_data: 'batch_cancel_all' }
            ],
            [{ text: 'üìã –°–ø–∏—Å–æ–∫', callback_data: 'batch_list' }]
          ]
        }
      };
    } else if (platform === 'vk') {
      options = {
        keyboard: {
          type: 'inline',
          buttons: [
            [
              { label: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ', payload: { action: 'batch_send_all' } },
              { label: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ', payload: { action: 'batch_cancel_all' } }
            ],
            [{ label: 'üìã –°–ø–∏—Å–æ–∫', payload: { action: 'batch_list' } }]
          ]
        }
      };
    }

    await sendMessage(platform, userId, messageText, options);
  }

  async function processAnswerQueue(platform, userId) {
    const user = getUserInfo(platform, userId);
    const queue = getAnswerQueue(platform, userId);
    const MAX_UNKNOWN_ERROR_ATTEMPTS = 3;

    if (!queue || queue.length === 0) {
      return;
    }

    if (user.isProcessingQueue) {
      logger.info(`‚è≠Ô∏è –û—á–µ—Ä–µ–¥—å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥–ª—è ${platform}:${userId}`);
      return;
    }

    user.isProcessingQueue = true;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—á–µ—Ä–µ–¥–∏
      if (queue.length > 0 && queue[0].levelId !== undefined) {
        logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥–∏ (—Å–æ—Ö—Ä–∞–Ω—ë–Ω levelId: ${queue[0].levelId})`);

        try {
          // –°–æ–∑–¥–∞–µ–º API —Å callback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è
          const authCallback = await createAuthCallback(user);
          const api = new EncounterAPI(user.domain, authCallback);
          const gameState = await api.getGameState(
            user.gameId,
            user.authCookies,
            user.login,
            user.password
          );

          if (gameState.success && gameState.data && gameState.data.Level) {
            const currentLevelId = gameState.data.Level.LevelId;
            const currentLevelNumber = gameState.data.Level.Number;
            const queuedLevelId = queue[0].levelId;
            const queuedLevelNumber = queue[0].levelNumber;

            // –û–±–Ω–æ–≤–ª—è–µ–º lastKnownLevel –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
            updateLastKnownLevel(user, {
              levelId: currentLevelId,
              levelNumber: currentLevelNumber
            });

            logger.info(`üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${currentLevelNumber} (ID: ${currentLevelId})`);
            logger.info(
              `üì¶ –£—Ä–æ–≤–µ–Ω—å –≤ –æ—á–µ—Ä–µ–¥–∏: ${queuedLevelNumber || '?'} (ID: ${queuedLevelId || 'null'})`
            );

            // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–º–µ–Ω–∏–ª—Å—è –ò–õ–ò –≤ –æ—á–µ—Ä–µ–¥–∏ –±—ã–ª null
            if (queuedLevelId === null || currentLevelId !== queuedLevelId) {
              logger.info(`‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è! –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
              user.pendingQueueDecision = {
                oldLevelNumber: queuedLevelNumber || '?',
                newLevelNumber: currentLevelNumber,
                queueSize: queue.length
              };
              user.isProcessingQueue = false;
              await saveUserData();

              // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
              const answersList = queue
                .slice(0, 5)
                .map(item => `‚Ä¢ "${item.answer}"`)
                .join('\n');
              const moreAnswers = queue.length > 5 ? `\n... –∏ –µ—â—ë ${queue.length - 5}` : '';

              const messageText =
                `‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è${queuedLevelNumber ? ` (${queuedLevelNumber} ‚Üí ${currentLevelNumber})` : ''}\n\n` +
                `–í –æ—á–µ—Ä–µ–¥–∏ ${queue.length} ${queue.length === 1 ? '–æ—Ç–≤–µ—Ç' : queue.length < 5 ? '–æ—Ç–≤–µ—Ç–∞' : '–æ—Ç–≤–µ—Ç–æ–≤'}:\n${answersList}${moreAnswers}\n\n` +
                `–ß—Ç–æ –¥–µ–ª–∞—Ç—å?`;

              // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram –∏ VK)
              let options = {};

              if (platform === 'telegram') {
                options = {
                  reply_markup: {
                    inline_keyboard: [
                      [
                        {
                          text: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${currentLevelNumber}`,
                          callback_data: 'queue_send'
                        },
                        { text: '–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å', callback_data: 'queue_clear' }
                      ]
                    ]
                  }
                };
              } else if (platform === 'vk') {
                options = {
                  keyboard: {
                    type: 'inline',
                    buttons: [
                      [
                        {
                          label: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${currentLevelNumber}`,
                          payload: { action: 'queue_send' }
                        },
                        { label: '–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å', payload: { action: 'queue_clear' } }
                      ]
                    ]
                  }
                };
              }

              await sendMessage(platform, userId, messageText, options);

              return;
            }

            logger.info(`‚úÖ –£—Ä–æ–≤–µ–Ω—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É`);
          }
        } catch (error) {
          logger.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è:', error.message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        }
      }
    } catch (error) {
      user.isProcessingQueue = false;
      throw error;
    }

    try {
      const totalAnswers = queue.length;
      let processed = 0;
      let successful = 0;
      let skipped = 0;

      const queueMessage = await sendMessage(
        platform,
        userId,
        `üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ ${totalAnswers} –æ—Ç–≤–µ—Ç–æ–≤...`
      );

      logger.info('‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏...');
      await new Promise(resolve => setTimeout(resolve, 3000));

      await sendOrUpdateMessage(
        platform,
        userId,
        `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å –∏–∑ ${totalAnswers} –æ—Ç–≤–µ—Ç–æ–≤...`,
        queueMessage.message_id
      );

      const PROGRESS_UPDATE_EVERY = 4;
      const PROGRESS_UPDATE_MIN_INTERVAL = 5000;
      let progressUpdatesSinceLastSend = 0;
      let lastProgressUpdateAt = Date.now();
      let pendingProgressText = null;

      async function pushProgress(text, { force = false } = {}) {
        pendingProgressText = text;
        progressUpdatesSinceLastSend += 1;

        const now = Date.now();
        const shouldSend =
          force ||
          now - lastProgressUpdateAt >= PROGRESS_UPDATE_MIN_INTERVAL ||
          progressUpdatesSinceLastSend >= PROGRESS_UPDATE_EVERY;

        if (!shouldSend) {
          return;
        }

        await sendOrUpdateMessage(platform, userId, pendingProgressText, queueMessage.message_id);
        lastProgressUpdateAt = Date.now();
        progressUpdatesSinceLastSend = 0;
        pendingProgressText = null;
      }

      for (let i = 0; i < queue.length; i++) {
        const queueItem = queue[i];
        processed++;

        await pushProgress(
          `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é "${queueItem.answer}"...`,
          { force: processed === 1 }
        );

        try {
          const response = await sendToEncounterAPI(user, queueItem.answer);

          if (response.success) {
            successful++;
            queue.splice(i, 1);
            i--;

            await pushProgress(
              `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`
            );
          } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
          }
        } catch (error) {
          logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);

          const ignorableErrors = [
            'Event –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–≥—Ä—ã',
            '–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è',
            '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
          ];

          const authErrors = ['–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'];

          const errorMessage = error.message?.toLowerCase?.() || '';
          const isIgnorableError = ignorableErrors.some(errType =>
            errorMessage.includes(errType.toLowerCase())
          );
          const isAuthError = authErrors.some(errType =>
            errorMessage.includes(errType.toLowerCase())
          );

          if (isIgnorableError) {
            logger.info(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç "${queueItem.answer}" –∏–∑-–∑–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö`);
            skipped++;

            await pushProgress(
              `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ—Ç–≤–µ—Ç`,
              { force: true }
            );

            queue.splice(i, 1);
            i--;
          } else if (isAuthError) {
            logger.info(`üîí –ü—Ä–æ–±–ª–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: ${error.message}`);

            await pushProgress(
              `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\nüîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è "${queueItem.answer}"...`,
              { force: true }
            );

            try {
              user.authCookies = null;
              await saveUserData();

              await new Promise(resolve => setTimeout(resolve, 2000));

              await pushProgress(
                `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\nüîÑ –ü–æ–≤—Ç–æ—Ä—è—é "${queueItem.answer}"...`,
                { force: true }
              );

              i--;
              processed--;

              logger.info(
                `üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ "${queueItem.answer}" –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`
              );
            } catch (authError) {
              logger.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏:', authError);

              const isMessageNotModifiedError =
                authError.code === 'ETELEGRAM' &&
                authError.response?.body?.description?.includes('message is not modified');

              if (!isMessageNotModifiedError) {
                logger.info(
                  `‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç "${queueItem.answer}" –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`
                );
              }

              skipped++;
              queue.splice(i, 1);
              i--;
            }
          } else {
            const errorDetails = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            queueItem.failedAttempts = (queueItem.failedAttempts || 0) + 1;
            queueItem.lastError = errorDetails;

            if (queueItem.failedAttempts >= MAX_UNKNOWN_ERROR_ATTEMPTS) {
              logger.info(
                `üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç "${queueItem.answer}" –ø–æ—Å–ª–µ ${MAX_UNKNOWN_ERROR_ATTEMPTS} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫`
              );
              skipped++;

              await pushProgress(
                `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è "${queueItem.answer}": ${errorDetails}\nüóëÔ∏è –û—Ç–≤–µ—Ç —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ ${MAX_UNKNOWN_ERROR_ATTEMPTS} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫`,
                { force: true }
              );

              queue.splice(i, 1);
              i--;
            } else {
              await pushProgress(
                `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è "${queueItem.answer}": ${errorDetails}\nüîÅ –ü–æ–ø—ã—Ç–∫–∞ ${queueItem.failedAttempts}/${MAX_UNKNOWN_ERROR_ATTEMPTS} ‚Äî –æ—Å—Ç–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥–∏`,
                { force: true }
              );
            }
          }
        }

        if (i < queue.length - 1 || processed < totalAnswers) {
          logger.info('‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ 1.2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–≤–µ—Ç–æ–º...');
          await new Promise(resolve => setTimeout(resolve, 1200));

          if (pendingProgressText) {
            await pushProgress(pendingProgressText);
          }
        }
      }

      if (pendingProgressText) {
        await pushProgress(pendingProgressText, { force: true });
      }

      if (queue.length === 0) {
        user.isOnline = true;

        let finalMessage = `‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successful} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`;
        if (skipped > 0) {
          finalMessage += `, ${skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ`;
        }
        finalMessage += ` –∏–∑ ${totalAnswers}`;

        await sendOrUpdateMessage(platform, userId, finalMessage, queueMessage.message_id);
      } else {
        const remainingWithErrors = queue.filter(item => item.failedAttempts);
        let finalMessage = `‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏.\nüìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successful}/${totalAnswers}`;
        if (skipped > 0) {
          finalMessage += `, —É–¥–∞–ª–µ–Ω–æ: ${skipped}`;
        }
        finalMessage += `\n‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å: ${queue.length}`;
        if (remainingWithErrors.length > 0) {
          const failedList = remainingWithErrors
            .map(item => `"${item.answer}" (${item.failedAttempts} –ø–æ–ø—ã—Ç–æ–∫)`)
            .join(', ');
          finalMessage += `\n‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: ${failedList}`;
        }

        await sendOrUpdateMessage(platform, userId, finalMessage, queueMessage.message_id);
      }
    } finally {
      user.isProcessingQueue = false;
      await saveUserData();
    }
  }

  return {
    sendToEncounterAPI,
    sendAnswerToEncounter,
    processAnswerQueue,
    handleAccumulationComplete
  };
}

module.exports = {
  createAnswerService
};
