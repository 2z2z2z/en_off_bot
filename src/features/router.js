const EncounterAPI = require('../../encounter-api');
const { logger } = require('../infra/logger');
const { parseGameUrl } = require('../utils/parse-game-url');
const { BURST_WINDOW } = require('./answer/burst-detector');
const { createBatchBuffer } = require('./answer/batch-buffer');
const {
  userData,
  saveUserData,
  getUserInfo,
  isUserReady,
  updateUserActivity,
  getAnswerQueue,
  deleteUser,
  makeStorageKey
} = require('../core/user-store');
const {
  sendMessage: sendPlatformMessage,
  editMessage: editPlatformMessage,
  deleteMessage: deletePlatformMessage,
  answerCallback: answerPlatformCallback
} = require('../core/messenger');
const { LevelChangedError } = require('../core/encounter-errors');
const { ensureAuthenticated, createAuthCallback } = require('../core/auth-manager');
const { getAdminConfig, getWhitelistCache, saveAdminConfig } = require('../services/admin-config');

let TELEGRAM_PLATFORM = 'telegram';
let VK_PLATFORM = 'vk';
let ROOT_USER_ID = 197924096;
let sendAnswerToEncounter = async () => {
  throw new Error('Answer service API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
};
let processAnswerQueue = async () => {
  throw new Error('Answer service API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
};

const setPlatformConfig = ({ telegram, vk, rootUserId } = {}) => {
  if (telegram) {
    TELEGRAM_PLATFORM = telegram;
  }
  if (vk) {
    VK_PLATFORM = vk;
  }
  if (rootUserId) {
    ROOT_USER_ID = rootUserId;
  }
};

const setAnswerServiceApi = api => {
  if (api?.sendAnswerToEncounter) {
    sendAnswerToEncounter = api.sendAnswerToEncounter;
  }
  if (api?.processAnswerQueue) {
    processAnswerQueue = api.processAnswerQueue;
  }
};

const userStates = new Map();

const getStateKey = (platform, userId) => makeStorageKey(platform, userId);
const getUserState = (platform, userId) => userStates.get(getStateKey(platform, userId));
const setUserState = (platform, userId, state) =>
  userStates.set(getStateKey(platform, userId), state);
const clearUserState = (platform, userId) => userStates.delete(getStateKey(platform, userId));

const getPlatformUser = (platform, userId) => getUserInfo(platform, userId);
const isPlatformUserReady = (platform, userId) => isUserReady(platform, userId);
const updatePlatformActivity = (platform, userId, username, firstName) =>
  updateUserActivity(platform, userId, username, firstName);

const sendMessage = (platform, userId, text, options = {}) =>
  sendPlatformMessage(platform, userId, text, options);

const editMessage = (platform, userId, messageId, text, options = {}) =>
  editPlatformMessage(platform, userId, messageId, text, options);

const deleteMessage = (platform, userId, messageId) =>
  deletePlatformMessage(platform, userId, messageId);

const answerCallback = (platform, data = {}) => answerPlatformCallback(platform, data);
const adminConfig = getAdminConfig();
const whitelistCache = getWhitelistCache();

const batchBuffer = createBatchBuffer({
  getPlatformUser,
  getSendAnswerToEncounter: () => sendAnswerToEncounter,
  logger
});

const { queueAnswerForProcessing, resetBurstState } = batchBuffer;

const editTelegramMessage = (arg1, arg2, arg3, arg4) => {
  if (typeof arg3 === 'undefined' && typeof arg2 === 'object') {
    const options = arg2 || {};
    return editMessage(TELEGRAM_PLATFORM, options.chat_id, options.message_id, arg1, options);
  }
  const options = arg4 || {};
  return editMessage(TELEGRAM_PLATFORM, arg1, arg2, arg3, options);
};

const answerTelegramCallback = (queryId, options = {}) =>
  answerCallback(TELEGRAM_PLATFORM, { queryId, ...options });

function createTelegramContext(msg, overrides = {}) {
  const chatId = String(msg.chat?.id ?? '');
  return {
    platform: TELEGRAM_PLATFORM,
    userId: chatId,
    text: msg.text ?? '',
    from: msg.from
      ? {
          id: msg.from.id,
          username: msg.from.username,
          firstName: msg.from.first_name,
          lastName: msg.from.last_name
        }
      : null,
    meta: {
      chatId: msg.chat?.id,
      messageId: msg.message_id,
      chatType: msg.chat?.type,
      chat: msg.chat,
      raw: msg
    },
    ...overrides
  };
}

function createTelegramCallbackContext(query, overrides = {}) {
  const chatId = query.message?.chat?.id ?? query.from?.id;
  const messageId = query.message?.message_id;
  return {
    platform: TELEGRAM_PLATFORM,
    userId: String(chatId ?? ''),
    text: query.data ?? '',
    payload: query.data,
    meta: {
      chatId,
      messageId,
      queryId: query.id,
      raw: query,
      from: query.from,
      message: query.message
    },
    ...overrides
  };
}

async function handleResetCommand(context) {
  const { platform, userId } = context;
  deleteUser(platform, userId);
  clearUserState(platform, userId);
  await saveUserData();

  await sendMessage(
    platform,
    userId,
    'üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!\n\n' + '–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
  );
}

async function handleTestCommand(context) {
  const { platform, userId } = context;
  const user = getPlatformUser(platform, userId);

  if (!isPlatformUserReady(platform, userId)) {
    await sendMessage(platform, userId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
    return;
  }

  await sendMessage(platform, userId, 'üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –º—å—é—Ç–µ–∫—Å–æ–º
    const authCallback = await createAuthCallback(user, EncounterAPI, saveUserData);
    const api = new EncounterAPI(user.domain, authCallback);
    const isConnected = await api.checkConnection();

    if (!isConnected) {
      await sendMessage(platform, userId, `‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–æ–º–µ–Ω—É ${user.domain}`);
      return;
    }

    let authResult = { success: false };

    if (user.authCookies && Object.keys(user.authCookies).length > 0) {
      logger.info('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è /test');
      authResult = { success: true, cookies: user.authCookies };
    } else {
      logger.info('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è /test');
      authResult = await api.authenticate(user.login, user.password);
      if (authResult.success) {
        user.authCookies = authResult.cookies;
        await saveUserData();
      }
    }

    if (!authResult.success) {
      await sendMessage(
        platform,
        userId,
        `‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authResult.message}`
      );
      return;
    }

    const gameInfo = await api.getGameInfo(
      user.gameId,
      user.authCookies,
      user.login,
      user.password
    );

    if (!gameInfo.success) {
      await sendMessage(
        platform,
        userId,
        `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω—ã!\n` +
          `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ: ${gameInfo.error}\n\n` +
          `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.`
      );
      return;
    }

    const data = gameInfo.data;
    await sendMessage(
      platform,
      userId,
      `‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!\n\n` +
        `üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –û–ö\n` +
        `üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –û–ö\n` +
        `üéÆ –ò–≥—Ä–∞: ${data.name} (‚Ññ${data.number})\n` +
        `üë§ –ò–≥—Ä–æ–∫: ${data.login}\n` +
        `üë• –ö–æ–º–∞–Ω–¥–∞: ${data.team || '–õ–∏—á–Ω–∞—è –∏–≥—Ä–∞'}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${data.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n` +
        (data.level
          ? `üèÜ –£—Ä–æ–≤–µ–Ω—å: ${data.level.name} (‚Ññ${data.level.number})\n` +
            `üìà –°–µ–∫—Ç–æ—Ä–∞: ${data.level.sectorsPassed}/${data.level.sectorsTotal}\n`
          : '') +
        `\n–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–æ–≤!`
    );
  } catch (error) {
    await sendMessage(platform, userId, `‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
  }
}

async function handleAdminCommand(context) {
  const { platform, userId } = context;

  if (platform !== TELEGRAM_PLATFORM) {
    await sendMessage(platform, userId, '‚ùå –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram');
    return;
  }

  const numericId = Number(userId);
  if (numericId !== ROOT_USER_ID) {
    await sendMessage(platform, userId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    return;
  }

  await showAdminMainMenu(userId);
}

async function handleListCommand(context) {
  const { platform, userId } = context;
  const user = getPlatformUser(platform, userId);

  if (!user.accumulatedAnswers || user.accumulatedAnswers.length === 0) {
    await sendMessage(platform, userId, 'üìã –ë—É—Ñ–µ—Ä –ø—É—Å—Ç\n\n–ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤.');
    return;
  }

  const totalCodes = user.accumulatedAnswers.length;
  const startLevel = user.accumulationStartLevel;

  const allCodes = user.accumulatedAnswers
    .map((item, index) => `${index + 1}. "${item.answer}" (—É—Ä–æ–≤–µ–Ω—å ${item.levelNumber || '?'})`)
    .join('\n');

  await sendMessage(
    platform,
    userId,
    `üìã –°–ø–∏—Å–æ–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (${totalCodes}):\n\n` +
      `${allCodes}\n\n` +
      `–£—Ä–æ–≤–µ–Ω—å –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: ${startLevel?.levelNumber || '?'}`
  );
}

async function handleClearCommand(context) {
  const { platform, userId } = context;
  const user = getPlatformUser(platform, userId);

  if (!user.accumulatedAnswers || user.accumulatedAnswers.length === 0) {
    await sendMessage(platform, userId, 'üßπ –ë—É—Ñ–µ—Ä —É–∂–µ –ø—É—Å—Ç\n\n–ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤.');
    return;
  }

  const count = user.accumulatedAnswers.length;

  // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
  user.accumulatedAnswers = [];
  user.isAccumulatingAnswers = false;
  user.accumulationStartLevel = null;
  if (user.accumulationTimer) {
    clearTimeout(user.accumulationTimer);
    user.accumulationTimer = null;
  }
  await saveUserData();

  await sendMessage(
    platform,
    userId,
    `üßπ –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω\n\n` +
      `–£–¥–∞–ª–µ–Ω–æ ${count} ${count === 1 ? '–∫–æ–¥' : count < 5 ? '–∫–æ–¥–∞' : '–∫–æ–¥–æ–≤'}.`
  );
}

async function handleCancelCommand(context) {
  const { platform, userId } = context;
  const currentState = getUserState(platform, userId);

  if (currentState) {
    clearUserState(platform, userId);
    await sendMessage(platform, userId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  } else {
    await sendMessage(platform, userId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã');
  }
}

function resetUserRuntimeState(user) {
  if (!user) {
    return;
  }

  if (Array.isArray(user.answerQueue)) {
    user.answerQueue.length = 0;
  } else {
    user.answerQueue = [];
  }

  user.pendingQueueDecision = null;
  user.pendingAnswerDecision = null;
  user.isProcessingQueue = false;

  if (Array.isArray(user.accumulatedAnswers)) {
    user.accumulatedAnswers.length = 0;
  } else {
    user.accumulatedAnswers = [];
  }

  user.isAccumulatingAnswers = false;
  user.accumulationStartLevel = null;
  if (user.accumulationTimer) {
    clearTimeout(user.accumulationTimer);
    user.accumulationTimer = null;
  }

  resetBurstState(user);

  user.recentMessageTimestamps = [];
  user.isOnline = true;
}

async function handleStartCommand(context) {
  const { platform, userId } = context;
  const user = getPlatformUser(platform, userId);

  resetUserRuntimeState(user);
  await saveUserData();

  if (isPlatformUserReady(platform, userId)) {
    setUserState(platform, userId, STATES.READY);
    const message =
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ en_off_bot! üéÆ\n\n' +
      '–í—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –±–æ—Ç–∞:\n' +
      `üë§ –õ–æ–≥–∏–Ω: ${user.login}\n` +
      `üåê –î–æ–º–µ–Ω: ${user.domain}\n` +
      `üéØ ID –∏–≥—Ä—ã: ${user.gameId}\n\n` +
      '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã!';
    const keyboardOptions = createMainKeyboard(platform);
    await sendMessage(platform, userId, message, keyboardOptions);
  } else {
    setUserState(platform, userId, STATES.WAITING_FOR_LOGIN);
    const message =
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ en_off_bot! üéÆ\n\n' +
      '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –∏–≥—Ä—É Encounter, –¥–∞–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n\n' +
      '–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n' +
      '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:';
    await sendMessage(platform, userId, message);
  }
}

async function handleCommand(context) {
  const command = (context.commandName || '').toLowerCase();

  switch (command) {
    case 'reset':
      await handleResetCommand(context);
      break;
    case 'test':
      await handleTestCommand(context);
      break;
    case 'admin':
      await handleAdminCommand(context);
      break;
    case 'list':
      await handleListCommand(context);
      break;
    case 'clear':
      await handleClearCommand(context);
      break;
    case 'cancel':
      await handleCancelCommand(context);
      break;
    case 'start':
      await handleStartCommand(context);
      break;
    default:
      break;
  }
}

async function handleCallback(context) {
  const { platform, userId, payload = '', meta = {} } = context;

  const chatId = meta.chatId ?? userId;
  const messageId = meta.messageId;
  // –î–ª—è Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º queryId, –¥–ª—è VK - eventId
  const queryId = meta.queryId || meta.eventId;

  // Helper –¥–ª—è answerCallback (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è Telegram –∏ VK)
  const answerCb = async (options = {}) => {
    if (!queryId) return;
    await answerCallback(platform, {
      queryId,
      eventId: meta.eventId,
      peerId: meta.peerId || chatId,
      userId,
      ...options
    });
  };

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ payload –¥–ª—è Telegram (—Å—Ç—Ä–æ–∫–∞) –∏ VK (–æ–±—ä–µ–∫—Ç)
  let data = '';
  if (typeof payload === 'string') {
    data = payload;
  } else if (payload && typeof payload === 'object' && payload.action) {
    data = payload.action;
  }

  if (!data) {
    await answerCb();
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
  if (data === 'queue_send' || data === 'queue_clear') {
    try {
      const user = getPlatformUser(platform, userId);
      const queue = getAnswerQueue(platform, userId);

      if (!user.pendingQueueDecision) {
        if (queryId) {
          await answerCb({
            queryId,
            text: '‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞',
            show_alert: true
          });
        }
        return;
      }

      const decision = user.pendingQueueDecision;

      if (data === 'queue_send') {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –≤ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        logger.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${queue.length} –æ—Ç–≤–µ—Ç–æ–≤ –≤ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å`);

        user.pendingQueueDecision = null;
        await saveUserData();

        if (queryId) {
          await answerCb({
            queryId,
            text: `–û—Ç–ø—Ä–∞–≤–∫–∞ ${queue.length} ${queue.length === 1 ? '–æ—Ç–≤–µ—Ç–∞' : '–æ—Ç–≤–µ—Ç–æ–≤'} –≤ —É—Ä–æ–≤–µ–Ω—å ${decision.newLevelNumber}...`
          });
        }

        await sendMessage(
          platform,
          userId,
          `–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ ${queue.length} ${queue.length === 1 ? '–æ—Ç–≤–µ—Ç–∞' : '–æ—Ç–≤–µ—Ç–æ–≤'}...`
        );

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
        await processAnswerQueue(platform, userId);
      } else if (data === 'queue_clear') {
        // –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
        const clearedAnswers = queue
          .slice(0, 5)
          .map(item => `"${item.answer}"`)
          .join(', ');
        const moreAnswers = queue.length > 5 ? ` –∏ –µ—â—ë ${queue.length - 5}` : '';

        logger.info(`üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –æ—á–∏—Å—Ç–∏—Ç—å ${queue.length} –æ—Ç–≤–µ—Ç–æ–≤`);

        queue.length = 0;
        user.pendingQueueDecision = null;
        await saveUserData();

        if (queryId) {
          await answerCb({
            queryId,
            text: 'üóëÔ∏è –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞'
          });
        }

        await sendMessage(
          platform,
          userId,
          `üóëÔ∏è –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ (—É—Ä–æ–≤–µ–Ω—å ${decision.oldLevelNumber} ‚Üí ${decision.newLevelNumber})\n\n` +
            `–ü—Ä–æ–ø—É—â–µ–Ω–æ ${decision.queueSize} ${decision.queueSize === 1 ? '–æ—Ç–≤–µ—Ç' : decision.queueSize < 5 ? '–æ—Ç–≤–µ—Ç–∞' : '–æ—Ç–≤–µ—Ç–æ–≤'}: ${clearedAnswers}${moreAnswers}`
        );
      }

      return;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏:', error);
      if (queryId) {
        await answerCb({
          queryId,
          text: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
          show_alert: true
        });
      }
      return;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
  if (data === 'answer_send' || data === 'answer_cancel') {
    try {
      const user = getPlatformUser(platform, userId);

      if (!user.pendingAnswerDecision) {
        if (queryId) {
          await answerCb({
            queryId,
            text: '‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞',
            show_alert: true
          });
        }
        return;
      }

      const decision = user.pendingAnswerDecision;

      if (data === 'answer_send') {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        logger.info(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "${decision.answer}" –≤ —É—Ä–æ–≤–µ–Ω—å ${decision.newLevel}`
        );

        user.pendingAnswerDecision = null;
        await saveUserData();

        if (queryId) {
          await answerCb({
            queryId,
            text: `–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —É—Ä–æ–≤–µ–Ω—å ${decision.newLevel}...`
          });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        const authCallback = await createAuthCallback(user, EncounterAPI, saveUserData);
        const api = new EncounterAPI(user.domain, authCallback);

        try {
          const result = await api.sendAnswer(
            user.gameId,
            decision.answer,
            user.authCookies,
            user.login,
            user.password
          );

          if (result.success) {
            let levelInfo = null;
            if (result.level && result.level.LevelId) {
              levelInfo = result.level;
            } else if (result.data?.Level && result.data.Level.LevelId) {
              levelInfo = result.data.Level;
            }

            if (!levelInfo) {
              try {
                const state = await api.getGameState(
                  user.gameId,
                  user.authCookies,
                  user.login,
                  user.password
                );
                if (state.success && state.data?.Level && state.data.Level.LevelId) {
                  levelInfo = state.data.Level;
                }
              } catch (stateError) {
                logger.error(
                  '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å lastKnownLevel –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:',
                  stateError.message
                );
              }
            }

            if (levelInfo && levelInfo.LevelId) {
              user.lastKnownLevel = {
                levelId: levelInfo.LevelId,
                levelNumber: levelInfo.Number,
                timestamp: Date.now()
              };
              logger.info(
                `üìå –û–±–Ω–æ–≤–ª–µ–Ω lastKnownLevel –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: —É—Ä–æ–≤–µ–Ω—å ${levelInfo.Number} (ID: ${levelInfo.LevelId})`
              );
            }

            await saveUserData();

            await sendMessage(
              platform,
              userId,
              `–û—Ç–≤–µ—Ç "${decision.answer}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —É—Ä–æ–≤–µ–Ω—å ${decision.newLevel}\n${result.message}`
            );
          } else {
            await sendMessage(
              platform,
              userId,
              `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
            );
          }

          if (result.newCookies) {
            user.authCookies = { ...(user.authCookies || {}), ...(result.newCookies || {}) };
            await saveUserData();
          }
        } catch (error) {
          logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error);
          await sendMessage(platform, userId, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
        }
      } else if (data === 'answer_cancel') {
        // –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
        logger.info(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É "${decision.answer}"`);

        user.pendingAnswerDecision = null;

        // –û–±–Ω–æ–≤–ª—è–µ–º lastKnownLevel –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        try {
          const authCallback = await createAuthCallback(user, EncounterAPI, saveUserData);
          const api = new EncounterAPI(user.domain, authCallback);
          const gameState = await api.getGameState(
            user.gameId,
            user.authCookies,
            user.login,
            user.password
          );

          if (gameState.success && gameState.data?.Level) {
            user.lastKnownLevel = {
              levelId: gameState.data.Level.LevelId,
              levelNumber: gameState.data.Level.Number,
              timestamp: Date.now()
            };
            logger.info(
              `üìå –û–±–Ω–æ–≤–ª–µ–Ω lastKnownLevel –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞: —É—Ä–æ–≤–µ–Ω—å ${gameState.data.Level.Number} (ID: ${gameState.data.Level.LevelId})`
            );
          }
        } catch (error) {
          logger.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lastKnownLevel –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ:', error.message);
        }

        await saveUserData();

        if (queryId) {
          await answerCb({
            queryId,
            text: 'üö´ –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω'
          });
        }

        await sendMessage(
          platform,
          userId,
          `üö´ –û—Ç–≤–µ—Ç "${decision.answer}" –æ—Ç–º–µ–Ω—ë–Ω\n\n` +
            `(–ë—ã–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è —É—Ä–æ–≤–Ω—è ${decision.oldLevel}, —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî ${decision.newLevel})`
        );
      }

      return;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', error);
      if (queryId) {
        await answerCb({
          queryId,
          text: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
          show_alert: true
        });
      }
      return;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
  if (
    data === 'batch_send_all' ||
    data === 'batch_send_force' ||
    data === 'batch_cancel_all' ||
    data === 'batch_list'
  ) {
    try {
      const user = getPlatformUser(platform, userId);

      if (data === 'batch_send_all') {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–¥—ã
        logger.info(
          `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${user.accumulatedAnswers?.length || 0} –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤`
        );

        if (!user.accumulatedAnswers || user.accumulatedAnswers.length === 0) {
          if (queryId) {
            await answerCb({
              queryId,
              text: '‚ö†Ô∏è –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤',
              show_alert: true
            });
          }
          return;
        }

        if (queryId) {
          await answerCb({
            queryId,
            text: `–û—Ç–ø—Ä–∞–≤–∫–∞ ${user.accumulatedAnswers.length} ${user.accumulatedAnswers.length === 1 ? '–∫–æ–¥–∞' : '–∫–æ–¥–æ–≤'}...`
          });
        }

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—á–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π
        await processBatchSend(platform, userId);
      } else if (data === 'batch_send_force') {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–∫–æ–≥–¥–∞ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π)
        logger.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å`);

        if (!user.accumulatedAnswers || user.accumulatedAnswers.length === 0) {
          if (queryId) {
            await answerCb({
              queryId,
              text: '‚ö†Ô∏è –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤',
              show_alert: true
            });
          }
          return;
        }

        if (queryId) {
          await answerCb({
            queryId,
            text: `–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞...`
          });
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º accumulationStartLevel —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        user.accumulationStartLevel = null;
        await saveUserData();

        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∞—á–∫–∏
        await processBatchSend(platform, userId);
      } else if (data === 'batch_cancel_all') {
        // –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–¥—ã
        const count = user.accumulatedAnswers?.length || 0;
        logger.info(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –æ—Ç–º–µ–Ω–∏—Ç—å ${count} –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤`);

        if (count === 0) {
          if (queryId) {
            await answerCb({
              queryId,
              text: '‚ö†Ô∏è –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤',
              show_alert: true
            });
          }
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º lastKnownLevel –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        try {
          const authCallback = await createAuthCallback(user, EncounterAPI, saveUserData);
          const api = new EncounterAPI(user.domain, authCallback);
          const gameState = await api.getGameState(
            user.gameId,
            user.authCookies,
            user.login,
            user.password
          );

          if (gameState.success && gameState.data?.Level) {
            user.lastKnownLevel = {
              levelId: gameState.data.Level.LevelId,
              levelNumber: gameState.data.Level.Number,
              timestamp: Date.now()
            };
            logger.info(
              `üìå –û–±–Ω–æ–≤–ª–µ–Ω lastKnownLevel –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–∞—á–∫–∏: —É—Ä–æ–≤–µ–Ω—å ${gameState.data.Level.Number} (ID: ${gameState.data.Level.LevelId})`
            );
          }
        } catch (error) {
          logger.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lastKnownLevel –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ:', error.message);
        }

        // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        user.accumulatedAnswers = [];
        user.isAccumulatingAnswers = false;
        user.accumulationStartLevel = null;
        if (user.accumulationTimer) {
          clearTimeout(user.accumulationTimer);
          user.accumulationTimer = null;
        }
        resetBurstState(user);
        await saveUserData();

        if (queryId) {
          await answerCb({
            queryId,
            text: 'üö´ –í—Å–µ –∫–æ–¥—ã –æ—Ç–º–µ–Ω–µ–Ω—ã'
          });
        }

        await sendMessage(
          platform,
          userId,
          `üö´ –û—Ç–º–µ–Ω–µ–Ω–æ ${count} ${count === 1 ? '–∫–æ–¥' : count < 5 ? '–∫–æ–¥–∞' : '–∫–æ–¥–æ–≤'}`
        );
      } else if (data === 'batch_list') {
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
        logger.info(`üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤`);

        if (!user.accumulatedAnswers || user.accumulatedAnswers.length === 0) {
          if (queryId) {
            await answerCb({
              queryId,
              text: '‚ö†Ô∏è –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤',
              show_alert: true
            });
          }
          return;
        }

        const allCodes = user.accumulatedAnswers
          .map(
            (item, index) => `${index + 1}. "${item.answer}" (—É—Ä–æ–≤–µ–Ω—å ${item.levelNumber || '?'})`
          )
          .join('\n');

        if (queryId) {
          await answerCb({ queryId });
        }

        await sendMessage(
          platform,
          userId,
          `üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (${user.accumulatedAnswers.length}):\n\n${allCodes}`
        );
      }

      return;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤:', error);
      if (queryId) {
        await answerCb({
          queryId,
          text: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
          show_alert: true
        });
      }
      return;
    }
  }

  // Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ callback'–∏ (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
  if (platform !== TELEGRAM_PLATFORM) {
    return;
  }

  if (data.startsWith('admin_') && Number(chatId) !== ROOT_USER_ID) {
    if (queryId) {
      await answerCb({
        queryId,
        text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞',
        show_alert: true
      });
    }
    return;
  }

  try {
    if (data.startsWith('admin_users_')) {
      const page = parseInt(data.split('_')[2], 10) || 0;
      await showUsersList(chatId, messageId, page);
      if (queryId) await answerCb({ queryId });
    } else if (data === 'admin_moderation') {
      await showModerationMenu(chatId, messageId);
      if (queryId) await answerCb({ queryId });
    } else if (data.startsWith('admin_whitelist_')) {
      const page = parseInt(data.split('_')[2], 10) || 0;
      clearUserState(platform, userId);
      await showWhitelistMenu(chatId, messageId, page);
      if (queryId) await answerCb({ queryId });
    } else if (data === 'admin_back') {
      clearUserState(platform, userId);
      if (messageId) {
        await deleteMessage(platform, chatId, messageId);
      }
      await showAdminMainMenu(chatId);
      if (queryId) await answerCb({ queryId });
    } else if (data === 'moderation_toggle') {
      adminConfig.moderationEnabled = !adminConfig.moderationEnabled;
      await saveAdminConfig();
      await showModerationMenu(chatId, messageId);
      if (queryId) {
        await answerCb({
          queryId,
          text: adminConfig.moderationEnabled ? '‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞' : '‚ùå –ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞'
        });
      }
    } else if (data === 'whitelist_add') {
      await handleWhitelistAdd(chatId, messageId);
      if (queryId) await answerCb({ queryId });
    } else if (data.startsWith('whitelist_remove_')) {
      const index = parseInt(data.split('_')[2], 10);
      await handleWhitelistRemove(chatId, messageId, index, queryId);
      if (queryId) {
        await answerCb({
          queryId,
          text: 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞'
        });
      }
    } else if (queryId) {
      await answerCb({ queryId });
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query:', error);
    if (queryId) {
      await answerCb({
        queryId,
        text: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã',
        show_alert: true
      });
    }
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—á–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ —Å –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π –∑–∞—â–∏—Ç–æ–π
 * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ü–ï–†–ï–î –Ω–∞—á–∞–ª–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
 * 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ü–û–°–õ–ï –∫–∞–∂–¥–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
 */
async function processBatchSend(platform, userId) {
  const user = getPlatformUser(platform, userId);

  if (!user.accumulatedAnswers || user.accumulatedAnswers.length === 0) {
    logger.info(`‚ö†Ô∏è –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`);
    await sendMessage(platform, userId, '‚ö†Ô∏è –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤');
    return;
  }

  const totalCodes = user.accumulatedAnswers.length;
  const startLevel = user.accumulationStartLevel;

  logger.info(
    `üì§ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—á–∫–∏: ${totalCodes} –∫–æ–¥–æ–≤ (—É—Ä–æ–≤–µ–Ω—å –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: ${startLevel?.levelNumber || '?'})`
  );

  try {
    // üõ°Ô∏è –ó–ê–©–ò–¢–ê –£–†–û–í–ï–ù–¨ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–ï–†–ï–î –Ω–∞—á–∞–ª–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
    logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–∞—á–∫–∏...`);

    const authCallback = await createAuthCallback(user, EncounterAPI, saveUserData);
    const api = new EncounterAPI(user.domain, authCallback);

    const gameState = await api.getGameState(
      user.gameId,
      user.authCookies,
      user.login,
      user.password
    );

    if (!gameState.success || !gameState.data || !gameState.data.Level) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã');
    }

    const currentLevelId = gameState.data.Level.LevelId;
    const currentLevelNumber = gameState.data.Level.Number;

    logger.info(
      `üìã –£—Ä–æ–≤–µ–Ω—å –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: ${startLevel?.levelNumber} (ID: ${startLevel?.levelId})`
    );
    logger.info(`üìã –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${currentLevelNumber} (ID: ${currentLevelId})`);

    // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    if (startLevel?.levelId && currentLevelId !== startLevel.levelId) {
      logger.info(
        `‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è (${startLevel.levelNumber} ‚Üí ${currentLevelNumber}), —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
      );

      const codesList = user.accumulatedAnswers
        .slice(0, 5)
        .map((item, index) => `${index + 1}. "${item.answer}"`)
        .join('\n');
      const moreCodesText = totalCodes > 5 ? `\n... –∏ –µ—â—ë ${totalCodes - 5}` : '';

      const messageText =
        `‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è (${startLevel.levelNumber} ‚Üí ${currentLevelNumber})\n\n` +
        `–ù–∞–∫–æ–ø–ª–µ–Ω–æ ${totalCodes} ${totalCodes === 1 ? '–∫–æ–¥' : totalCodes < 5 ? '–∫–æ–¥–∞' : '–∫–æ–¥–æ–≤'}:\n${codesList}${moreCodesText}\n\n` +
        `–ß—Ç–æ –¥–µ–ª–∞—Ç—å?`;

      let options = {};
      if (platform === 'telegram') {
        options = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${currentLevelNumber}`,
                  callback_data: 'batch_send_force'
                },
                { text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'batch_cancel_all' }
              ]
            ]
          }
        };
      } else if (platform === 'vk') {
        options = {
          keyboard: {
            type: 'inline',
            buttons: [
              [
                {
                  label: `‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${currentLevelNumber}`,
                  payload: { action: 'batch_send_force' }
                },
                { label: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', payload: { action: 'batch_cancel_all' } }
              ]
            ]
          }
        };
      }

      await sendMessage(platform, userId, messageText, options);
      return;
    }

    logger.info(`‚úÖ –£—Ä–æ–≤–µ–Ω—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É`);

    const normalizeCount = value => {
      if (value === undefined || value === null) {
        return null;
      }
      const numeric = Number(value);
      return Number.isFinite(numeric) ? numeric : null;
    };

    const formatSectors = (passed, required) => {
      if (passed === null || required === null) {
        return '‚Äî';
      }
      return `${passed}/${required}`;
    };

    const buildBatchProgressMessage = ({
      progress,
      total,
      answer,
      statusText,
      levelNumber,
      sectorsText
    }) => {
      const levelDisplay = levelNumber ?? '‚Äî';
      const safeAnswer = answer ?? '‚Äî';
      const lines = [
        `üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—á–∫–∏: ${progress}/${total}`,
        `üí¨ "${safeAnswer}": ${statusText}`,
        `üéØ –£—Ä–æ–≤–µ–Ω—å: ${levelDisplay}`
      ];
      if (sectorsText && sectorsText !== '‚Äî') {
        lines.push(`üìä –°–µ–∫—Ç–æ—Ä–∞: ${sectorsText}`);
      }
      return lines.join('\n');
    };

    const buildStatusText = rawMessage => {
      const message = rawMessage || '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      const lower = message.toLowerCase();
      const isNegative = lower.includes('–Ω–µ–≤–µ—Ä') || lower.includes('–æ—à–∏–±');
      const emoji = isNegative ? 'üëé' : 'üëç';
      return `${emoji} ${message}`;
    };

    let latestLevelNumber = currentLevelNumber ?? null;
    let latestPassed = normalizeCount(gameState.data.Level?.PassedSectorsCount);
    let latestRequired = normalizeCount(gameState.data.Level?.RequiredSectorsCount);

    // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    let sent = 0;
    let stopped = false;
    const batchCopy = [...user.accumulatedAnswers];
    const sentCodes = []; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤

    const initialMessage = buildBatchProgressMessage({
      progress: 0,
      total: totalCodes,
      answer: batchCopy[0]?.answer ?? '‚Äî',
      statusText: '‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...',
      levelNumber: latestLevelNumber,
      sectorsText: formatSectors(latestPassed, latestRequired)
    });

    const progressMsg = await sendMessage(platform, userId, initialMessage);

    for (let i = 0; i < batchCopy.length; i++) {
      const item = batchCopy[i];
      const processed = i + 1;

      logger.info(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ ${i + 1}/${totalCodes}: "${item.answer}"`);

      const sendingMessage = buildBatchProgressMessage({
        progress: processed,
        total: totalCodes,
        answer: item.answer,
        statusText: '‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é...',
        levelNumber: latestLevelNumber,
        sectorsText: formatSectors(latestPassed, latestRequired)
      });

      await sendOrUpdateMessage(platform, userId, sendingMessage, progressMsg.message_id);

      try {
        const result = await api.sendAnswer(
          user.gameId,
          item.answer,
          user.authCookies,
          user.login,
          user.password,
          false,
          currentLevelId
        );

        if (result.success) {
          sent++;
          logger.info(`‚úÖ –ö–æ–¥ "${item.answer}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (${sent}/${totalCodes})`);

          if (result.level) {
            latestLevelNumber = result.level.Number ?? latestLevelNumber;
            latestPassed = normalizeCount(result.level.PassedSectorsCount);
            latestRequired = normalizeCount(result.level.RequiredSectorsCount);
          }

          const statusText = buildStatusText(result.message);
          const statusMessage = buildBatchProgressMessage({
            progress: processed,
            total: totalCodes,
            answer: item.answer,
            statusText,
            levelNumber: latestLevelNumber,
            sectorsText: formatSectors(latestPassed, latestRequired)
          });

          await sendOrUpdateMessage(platform, userId, statusMessage, progressMsg.message_id);

          // –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const codeStats = {
            answer: item.answer,
            statusText,
            levelNumber: latestLevelNumber ?? currentLevelNumber,
            levelName: result.level?.Name || 'N/A',
            sectors: formatSectors(latestPassed, latestRequired)
          };
          sentCodes.push(codeStats);

          // üõ°Ô∏è –ó–ê–©–ò–¢–ê –£–†–û–í–ï–ù–¨ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
          if (result.level && result.level.LevelId !== currentLevelId) {
            logger.info(
              `‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (${currentLevelNumber} ‚Üí ${result.level.Number})`
            );
            stopped = true;

            // –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –∏–∑ –±—É—Ñ–µ—Ä–∞
            user.accumulatedAnswers.splice(0, sent);
            await saveUserData();

            const remaining = totalCodes - sent;
            const remainingList = user.accumulatedAnswers
              .slice(0, 5)
              .map(code => `"${code.answer}"`)
              .join(', ');
            const moreText = remaining > 5 ? ` –∏ –µ—â—ë ${remaining - 5}` : '';

            const messageText =
              `‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏!\n\n` +
              `üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}/${totalCodes}\n` +
              `üì¶ –û—Å—Ç–∞–ª–æ—Å—å: ${remaining}\n\n` +
              `–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–¥—ã: ${remainingList}${moreText}\n\n` +
              `–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∫–æ–¥–∞–º–∏?`;

            let options = {};
            if (platform === 'telegram') {
              options = {
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: `‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${result.level.Number}`,
                        callback_data: 'batch_send_force'
                      },
                      { text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'batch_cancel_all' }
                    ]
                  ]
                }
              };
            } else if (platform === 'vk') {
              options = {
                keyboard: {
                  type: 'inline',
                  buttons: [
                    [
                      {
                        label: `‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${result.level.Number}`,
                        payload: { action: 'batch_send_force' }
                      },
                      { label: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', payload: { action: 'batch_cancel_all' } }
                    ]
                  ]
                }
              };
            }

            await sendMessage(platform, userId, messageText, options);
            break;
          }

          if (result.newCookies) {
            user.authCookies = { ...(user.authCookies || {}), ...(result.newCookies || {}) };
            await saveUserData();
          }
        } else {
          const statusText = `‚ùå ${result.message || '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'}`;
          const statusMessage = buildBatchProgressMessage({
            progress: processed,
            total: totalCodes,
            answer: item.answer,
            statusText,
            levelNumber: latestLevelNumber,
            sectorsText: formatSectors(latestPassed, latestRequired)
          });

          await sendOrUpdateMessage(platform, userId, statusMessage, progressMsg.message_id);

          sentCodes.push({
            answer: item.answer,
            statusText,
            levelNumber: latestLevelNumber ?? currentLevelNumber,
            levelName: result.level?.Name || 'N/A',
            sectors: formatSectors(latestPassed, latestRequired)
          });
        }
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ "${item.answer}":`, error.message);

        // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è - –ø—Ä–µ—Ä—ã–≤–∞–µ–º
        if (error instanceof LevelChangedError || error.isLevelChanged) {
          stopped = true;

          user.accumulatedAnswers.splice(0, sent);
          await saveUserData();

          await sendMessage(
            platform,
            userId,
            `‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏!\n\n` +
              `üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}/${totalCodes}\n` +
              `üì¶ –û—Å—Ç–∞–ª–æ—Å—å: ${totalCodes - sent}\n\n` +
              `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞.`
          );
          break;
        }

        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        const statusText = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
        const statusMessage = buildBatchProgressMessage({
          progress: processed,
          total: totalCodes,
          answer: item.answer,
          statusText,
          levelNumber: latestLevelNumber,
          sectorsText: formatSectors(latestPassed, latestRequired)
        });

        await sendOrUpdateMessage(platform, userId, statusMessage, progressMsg.message_id);

        sentCodes.push({
          answer: item.answer,
          statusText,
          levelNumber: latestLevelNumber ?? currentLevelNumber,
          levelName: 'N/A',
          sectors: formatSectors(latestPassed, latestRequired)
        });
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
      if (i < batchCopy.length - 1) {
        logger.info('‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ 1.2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–¥–æ–º...');
        await new Promise(resolve => setTimeout(resolve, 1200));
      }
    }

    if (!stopped) {
      // –í—Å–µ –∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
      user.accumulatedAnswers = [];
      user.isAccumulatingAnswers = false;
      user.accumulationStartLevel = null;
      if (user.accumulationTimer) {
        clearTimeout(user.accumulationTimer);
        user.accumulationTimer = null;
      }
      await saveUserData();

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
      let finalReport = `‚úÖ –ü–∞—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\nüìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}/${totalCodes}`;

      if (sentCodes.length > 0) {
        finalReport += `\n\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:\n\n`;
        sentCodes.forEach((code, index) => {
          const num = index + 1;
          finalReport += `${num}. "${code.answer}"\n`;
          const levelDisplay = code.levelNumber ?? '‚Äî';
          finalReport += `   ${code.statusText} | –£—Ä–æ–≤–µ–Ω—å: ${levelDisplay}\n`;
          if (index < sentCodes.length - 1) {
            finalReport += `\n`;
          }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        const lastCode = sentCodes[sentCodes.length - 1];
        const levelSummary = lastCode.levelNumber ?? '‚Äî';
        finalReport += `\nüìç –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${levelSummary}`;
        if (lastCode.sectors && lastCode.sectors !== '‚Äî') {
          finalReport += `\nüìä –¢–µ–∫—É—â–∏–µ —Å–µ–∫—Ç–æ—Ä–∞: ${lastCode.sectors}`;
        }
      }

      await sendOrUpdateMessage(platform, userId, finalReport, progressMsg.message_id);
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—á–∫–∏:', error);
    await sendMessage(platform, userId, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—á–∫–∏: ${error.message}`);
  }
}

async function handleTextMessage(context) {
  const { platform, userId, text = '', from } = context;
  const messageText = text != null ? String(text) : '';

  updatePlatformActivity(platform, userId, from?.username, from?.firstName);

  if (messageText.startsWith('/')) {
    return;
  }

  const user = getPlatformUser(platform, userId);

  // –î–µ—Ç–µ–∫—Ç –≤—Å–ø–ª–µ—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ñ—Ñ–ª–∞–π–Ω-–ø–∞—á–∫–∞)
  const now = Date.now();

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –º–µ—Ç–∫—É
  user.recentMessageTimestamps = user.recentMessageTimestamps || [];
  user.recentMessageTimestamps.push(now);

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ (> 10 —Å–µ–∫—É–Ω–¥)
  user.recentMessageTimestamps = user.recentMessageTimestamps.filter(
    timestamp => now - timestamp < BURST_WINDOW
  );

  let currentState = getUserState(platform, userId);

  if (!currentState) {
    if (isPlatformUserReady(platform, userId)) {
      currentState = STATES.READY;
      setUserState(platform, userId, STATES.READY);
    } else {
      currentState = STATES.WAITING_FOR_LOGIN;
    }
  }

  if (
    currentState === 'WAITING_FOR_WHITELIST_ENTRY' &&
    platform === TELEGRAM_PLATFORM &&
    Number(userId) === ROOT_USER_ID
  ) {
    await handleWhitelistManualEntry(platform, userId, messageText.trim());
    return;
  }

  await processStateInput(platform, userId, user, currentState, messageText, context);
}

async function handleWhitelistManualEntry(platform, userId, loginInput) {
  if (platform !== TELEGRAM_PLATFORM) {
    return;
  }

  const login = loginInput.trim();

  if (login.length < 2) {
    await sendMessage(platform, userId, '‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
    return;
  }

  const exists = adminConfig.whitelist.some(item => {
    const itemLogin = item.login || (item.type === 'encounter' ? item.value : null);
    return itemLogin && itemLogin.toLowerCase() === login.toLowerCase();
  });

  if (exists) {
    await sendMessage(platform, userId, '‚ö†Ô∏è –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –µ—Å—Ç—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ');
    clearUserState(platform, userId);
    return;
  }

  adminConfig.whitelist.push({
    login,
    addedBy: userId,
    addedAt: Date.now()
  });

  await saveAdminConfig();
  await sendMessage(platform, userId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:\nüéÆ <code>${login}</code>`, {
    parse_mode: 'HTML'
  });

  clearUserState(platform, userId);
}

async function processStateInput(platform, userId, user, currentState, text, context) {
  switch (currentState) {
    case STATES.WAITING_FOR_LOGIN:
      await handleLoginInput(platform, userId, user, text);
      break;
    case STATES.WAITING_FOR_PASSWORD:
      await handlePasswordInput(platform, userId, user, text);
      break;
    case STATES.WAITING_FOR_GAME_URL:
      await handleGameUrlInput(platform, userId, user, text);
      break;
    case STATES.READY:
      await handleReadyStateInput(platform, userId, user, text, context);
      break;
    default:
      await sendMessage(
        platform,
        userId,
        '‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
      );
      setUserState(platform, userId, STATES.WAITING_FOR_LOGIN);
      break;
  }
}

async function handleLoginInput(platform, userId, user, text) {
  user.login = text;
  setUserState(platform, userId, STATES.WAITING_FOR_PASSWORD);
  await sendMessage(platform, userId, `–õ–æ–≥–∏–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${text}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:`);
}

async function handlePasswordInput(platform, userId, user, text) {
  user.password = text;

  if (!user.login || !user.password || user.login.length < 2 || user.password.length < 2) {
    setUserState(platform, userId, STATES.WAITING_FOR_LOGIN);
    await sendMessage(
      platform,
      userId,
      '‚ùå –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –µ—â–µ —Ä–∞–∑:'
    );
    return;
  }

  await sendMessage(platform, userId, 'üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');

  try {
    const authResult = await checkAuthentication(user.login, user.password);

    if (authResult.success) {
      user.authCookies = authResult.cookies;
      await saveUserData();
      setUserState(platform, userId, STATES.WAITING_FOR_GAME_URL);
      await sendMessage(
        platform,
        userId,
        '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É Encounter.\n\n' +
          '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n' +
          '‚Ä¢ https://domain.en.cx/GameDetails.aspx?gid=XXXXX\n' +
          '‚Ä¢ https://domain.en.cx/gameengines/encounter/play/XXXXX/'
      );
    } else {
      setUserState(platform, userId, STATES.WAITING_FOR_LOGIN);
      await sendMessage(platform, userId, `‚ùå ${authResult.message}\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –µ—â–µ —Ä–∞–∑:`);
    }
  } catch (error) {
    setUserState(platform, userId, STATES.WAITING_FOR_LOGIN);
    await sendMessage(
      platform,
      userId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –µ—â–µ —Ä–∞–∑:`
    );
  }
}

async function handleGameUrlInput(platform, userId, user, text) {
  if (!(await checkGameAccess(platform, userId))) {
    return;
  }

  const gameUrlResult = parseGameUrl(text);

  if (!gameUrlResult.success) {
    await sendMessage(platform, userId, `‚ùå ${gameUrlResult.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
    return;
  }

  if (user.domain && user.domain !== gameUrlResult.domain) {
    logger.info(
      `üîÑ –î–æ–º–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${user.domain} –Ω–∞ ${gameUrlResult.domain}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º cookies`
    );
    user.authCookies = null;
  }

  user.domain = gameUrlResult.domain;
  user.gameId = gameUrlResult.gameId;
  setUserState(platform, userId, STATES.READY);
  await saveUserData();

  const message =
    'üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n' +
    `üë§ –õ–æ–≥–∏–Ω: ${user.login}\n` +
    `üåê –î–æ–º–µ–Ω: ${user.domain}\n` +
    `üéÆ ID –∏–≥—Ä—ã: ${user.gameId}\n` +
    `üîó –¢–∏–ø —Å—Å—ã–ª–∫–∏: ${gameUrlResult.type}\n\n` +
    '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç.';

  const keyboardOptions = createMainKeyboard(platform);
  await sendMessage(platform, userId, message, keyboardOptions);
}

module.exports = {
  setPlatformConfig,
  setAnswerServiceApi,
  registerTelegramHandlers,
  handleCommand,
  handleCallback,
  handleTextMessage,
  sendOrUpdateMessage
};

async function handleReadyStateInput(platform, userId, user, text, context) {
  if (text === 'üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞') {
    await handleStartCommand(context);
    return;
  }

  if (text === '–ó–∞–¥–∞–Ω–∏–µ' || text === '–ó–∞–¥–∞–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç)') {
    const formatted = text === '–ó–∞–¥–∞–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç)';
    await sendLevelTask(platform, userId, user, formatted);
    return;
  }

  if (text === '–°–µ–∫—Ç–æ—Ä–∞') {
    if (!(await checkGameAccess(platform, userId))) {
      return;
    }

    const waitMsg = await sendMessage(platform, userId, 'üîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ç–æ—Ä–æ–≤...');
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –º—å—é—Ç–µ–∫—Å–æ–º
      const authCallback = await createAuthCallback(user, EncounterAPI, saveUserData);
      const api = new EncounterAPI(user.domain, authCallback);

      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ—Ç cookies
      await ensureAuthenticated(user, EncounterAPI, saveUserData);

      let gameState;
      try {
        gameState = await api.getGameState(
          user.gameId,
          user.authCookies,
          user.login,
          user.password
        );
      } catch (e) {
        const msg = String(e.message || '').toLowerCase();
        if (msg.includes('—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') || msg.includes('—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')) {
          const reauth = await api.authenticate(user.login, user.password);
          if (!reauth.success) {
            throw new Error(reauth.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
          }
          user.authCookies = reauth.cookies;
          await saveUserData();
          gameState = await api.getGameState(user.gameId, user.authCookies);
        } else {
          throw e;
        }
      }

      if (!gameState || !gameState.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã');
      }

      let model = gameState.data;
      if (model.Event !== 0) {
        if (model.Event === 16) {
          gameState = await api.getGameState(user.gameId, user.authCookies);
          if (!gameState.success || gameState.data.Event !== 0) {
            await sendOrUpdateMessage(
              platform,
              userId,
              '‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å.',
              waitMsg?.message_id
            );
            return;
          }
          model = gameState.data;
        } else {
          await sendOrUpdateMessage(
            platform,
            userId,
            '‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å.',
            waitMsg?.message_id
          );
          return;
        }
      }

      const level = model.Level;
      if (!level) {
        await sendOrUpdateMessage(
          platform,
          userId,
          '‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
          waitMsg?.message_id
        );
        return;
      }

      const sectors = Array.isArray(level.Sectors) ? level.Sectors : [];
      const totalRequired = Number(level.RequiredSectorsCount) || 0;
      const passedCount = Number(level.PassedSectorsCount) || 0;
      const leftToClose = Math.max(totalRequired - passedCount, 0);

      const sectorsMessage = buildSectorsMessage(platform, {
        sectors,
        totalRequired,
        totalCount: sectors.length,
        passedCount,
        leftToClose
      });

      if (waitMsg?.message_id) {
        if (sectorsMessage.text.length <= 4000) {
          await editMessage(
            platform,
            userId,
            waitMsg.message_id,
            sectorsMessage.text,
            sectorsMessage.options
          );
        } else {
          await editMessage(
            platform,
            userId,
            waitMsg.message_id,
            sectorsMessage.header,
            sectorsMessage.options
          );
          for (const chunk of splitMessageBody(sectorsMessage.body, 4000)) {
            await sendMessage(platform, userId, chunk, sectorsMessage.options);
          }
        }
      } else {
        await sendMessage(platform, userId, sectorsMessage.text, sectorsMessage.options);
      }
    } catch (error) {
      await sendOrUpdateMessage(
        platform,
        userId,
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ç–æ—Ä–∞: ${error.message}`,
        waitMsg?.message_id
      );
    }
    return;
  }

  if (text === 'üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏') {
    const queueLength = user.answerQueue.length;
    const status = user.isOnline ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω';
    const queueText =
      queueLength > 0
        ? '–û—á–µ—Ä–µ–¥—å:\n' +
          user.answerQueue
            .map(
              (item, index) =>
                `${index + 1}. "${item.answer}" (${new Date(item.timestamp).toLocaleTimeString()})`
            )
            .join('\n')
        : '–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞';

    await sendMessage(
      platform,
      userId,
      `–°—Ç–∞—Ç—É—Å: ${status}\n` + `–û—Ç–≤–µ—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${queueLength}\n\n` + queueText
    );
    return;
  }

  if (text === 'üîó –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É') {
    if (!(await checkGameAccess(platform, userId))) {
      return;
    }

    resetUserRuntimeState(user);
    user.authCookies = null;
    await saveUserData();
    setUserState(platform, userId, STATES.WAITING_FOR_GAME_URL);
    await sendMessage(
      platform,
      userId,
      '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É:\n\n' +
        '‚Ä¢ https://domain.en.cx/GameDetails.aspx?gid=XXXXX\n' +
        '‚Ä¢ https://domain.en.cx/gameengines/encounter/play/XXXXX/'
    );
    return;
  }

  if (text === 'üë§ –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é') {
    resetUserRuntimeState(user);
    user.authCookies = null;
    await saveUserData();
    setUserState(platform, userId, STATES.WAITING_FOR_LOGIN);
    await sendMessage(platform, userId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:');
    return;
  }

  if (!(await checkGameAccess(platform, userId))) {
    return;
  }

  const progressMessage = await sendMessage(platform, userId, `‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç "${text}"...`);
  const progressMessageId =
    progressMessage?.message_id ?? progressMessage?.conversation_message_id ?? null;
  const result = await queueAnswerForProcessing(platform, userId, user, text, progressMessageId);

  if (result && user.answerQueue.length > 0) {
    setTimeout(() => processAnswerQueue(platform, userId), 1200);
  }
}

async function sendLevelTask(platform, userId, user, formatted) {
  if (!(await checkGameAccess(platform, userId))) {
    return;
  }

  const waitText = formatted
    ? 'üîÑ –ü–æ–ª—É—á–∞—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è...'
    : 'üîÑ –ü–æ–ª—É—á–∞—é –∑–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è...';

  const waitMsg = await sendMessage(platform, userId, waitText);

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –º—å—é—Ç–µ–∫—Å–æ–º
    const authCallback = await createAuthCallback(user, EncounterAPI, saveUserData);
    const api = new EncounterAPI(user.domain, authCallback);

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ—Ç cookies
    await ensureAuthenticated(user, EncounterAPI, saveUserData);

    let gameState;
    try {
      gameState = await api.getGameState(user.gameId, user.authCookies, user.login, user.password);
    } catch (error) {
      const msg = String(error.message || '').toLowerCase();
      if (msg.includes('—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') || msg.includes('—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')) {
        const reauth = await api.authenticate(user.login, user.password);
        if (!reauth.success) {
          throw new Error(reauth.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
        }
        user.authCookies = reauth.cookies;
        await saveUserData();
        gameState = await api.getGameState(user.gameId, user.authCookies);
      } else {
        throw error;
      }
    }

    if (!gameState || !gameState.success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã');
    }

    let model = gameState.data;
    if (model.Event !== 0) {
      if (model.Event === 16) {
        gameState = await api.getGameState(user.gameId, user.authCookies);
        if (!gameState.success || gameState.data.Event !== 0) {
          await sendOrUpdateMessage(
            platform,
            userId,
            '‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å.',
            waitMsg?.message_id
          );
          return;
        }
        model = gameState.data;
      } else {
        await sendOrUpdateMessage(
          platform,
          userId,
          '‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å.',
          waitMsg?.message_id
        );
        return;
      }
    }

    const level = model.Level;
    if (!level) {
      await sendOrUpdateMessage(
        platform,
        userId,
        '‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        waitMsg?.message_id
      );
      return;
    }

    const taskFragments = collectTaskFragments(level.Tasks, { formatted });
    const helps = collectHelps(level.Helps, { formatted });
    const timeoutRemain = formatRemain(level.TimeoutSecondsRemain);

    const taskMessage = buildTaskMessage(platform, {
      level,
      taskFragments,
      helps,
      timeoutRemain,
      formatted
    });

    if (waitMsg?.message_id) {
      const editOptions = { ...taskMessage.options };
      if (waitMsg?.conversation_message_id != null) {
        editOptions.conversationMessageId = waitMsg.conversation_message_id;
      }

      if (taskMessage.text.length <= 4000) {
        await editMessage(platform, userId, waitMsg.message_id, taskMessage.text, editOptions);
      } else {
        await editMessage(platform, userId, waitMsg.message_id, taskMessage.header, editOptions);
        for (const chunk of splitMessageBody(taskMessage.body, 4000)) {
          await sendMessage(platform, userId, chunk, taskMessage.options);
        }
      }
    } else {
      await sendMessage(platform, userId, taskMessage.text, taskMessage.options);
    }
  } catch (error) {
    const errorPrefix = formatted
      ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
      : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ';
    await sendOrUpdateMessage(
      platform,
      userId,
      `${errorPrefix}: ${error.message}`,
      waitMsg?.message_id
    );
  }
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
const STATES = {
  WAITING_FOR_LOGIN: 'waiting_for_login',
  WAITING_FOR_PASSWORD: 'waiting_for_password',
  WAITING_FOR_GAME_URL: 'waiting_for_game_url',
  READY: 'ready',
  WAITING_FOR_ANSWER: 'waiting_for_answer'
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const MAIN_MENU_LAYOUT = [
  ['–ó–∞–¥–∞–Ω–∏–µ', '–ó–∞–¥–∞–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç)'],
  ['–°–µ–∫—Ç–æ—Ä–∞'],
  ['üîó –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É', 'üë§ –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'],
  ['üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞']
];

function createMainKeyboard(platform) {
  if (platform === TELEGRAM_PLATFORM) {
    return {
      reply_markup: {
        keyboard: MAIN_MENU_LAYOUT.map(row => [...row]),
        resize_keyboard: true,
        one_time_keyboard: false
      }
    };
  }

  if (platform === VK_PLATFORM) {
    const buttons = MAIN_MENU_LAYOUT.map(row =>
      row.map(label => ({
        action: {
          type: 'text',
          label,
          payload: JSON.stringify({ type: 'main_menu', value: label })
        },
        color: 'secondary'
      }))
    );

    return {
      keyboard: {
        type: 'reply',
        buttons,
        oneTime: false
      }
    };
  }

  return {};
}

function buildSectorsMessage(
  platform,
  { sectors, totalRequired, totalCount, passedCount, leftToClose }
) {
  const isTelegram = platform === TELEGRAM_PLATFORM;
  const options = isTelegram ? { parse_mode: 'HTML', disable_web_page_preview: true } : {};

  if (!Array.isArray(sectors) || sectors.length === 0) {
    const header = isTelegram ? '<b>üóÑ –°–µ–∫—Ç–æ—Ä—ã</b>' : 'üóÑ –°–µ–∫—Ç–æ—Ä—ã';
    const text = `${header}\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–∫—Ç–æ—Ä–∞—Ö.`;
    return {
      text,
      header,
      body: '',
      options
    };
  }

  const lines = sectors.map(s => {
    const order = s?.Order ?? '';
    const nameRaw = s?.Name ?? '';
    const name = isTelegram ? escapeHtml(nameRaw) : nameRaw;
    const isAnswered = s?.IsAnswered === true;
    const answerTextRaw = s?.Answer;
    const answerText = extractSectorAnswerText(answerTextRaw);

    if (isTelegram) {
      const safeAnswer = answerText ? `<code>${escapeHtml(answerText)}</code>` : '<code>‚Äî</code>';
      const condition = isAnswered ? `${safeAnswer} ‚úÖ` : '<i>...</i>';
      return `#${order} (${name}) ‚Äî ${condition}`;
    }

    const safeAnswer = answerText ? `¬´${answerText}¬ª` : '‚Äî';
    const condition = isAnswered ? `${safeAnswer} ‚úÖ` : '‚Ä¶';
    return `#${order} (${name}) ‚Äî ${condition}`;
  });

  const header = isTelegram
    ? `<b>üóÑ –°–µ–∫—Ç–æ—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö ${totalRequired} –∏–∑ ${totalCount})</b>`
    : `üóÑ –°–µ–∫—Ç–æ—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö ${totalRequired} –∏–∑ ${totalCount})`;

  const summary = isTelegram
    ? `–ó–∞–∫—Ä—ã—Ç–æ ‚Äî <b>${passedCount}</b>, –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî <b>${leftToClose}</b>`
    : `–ó–∞–∫—Ä—ã—Ç–æ ‚Äî ${passedCount}, –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî ${leftToClose}`;

  const body = lines.join('\n');
  const text = `${header}\n\n${summary}\n\n${body}`;

  return {
    text,
    header,
    body,
    options
  };
}

function collectTaskFragments(tasks, { formatted = false } = {}) {
  const fragments = [];
  const field = formatted ? 'TaskTextFormatted' : 'TaskText';

  const addFragment = rawValue => {
    if (rawValue == null) {
      return;
    }
    const raw = String(rawValue);
    const presenceCheck = stripHtml(raw).trim();
    if (presenceCheck.length === 0) {
      return;
    }
    fragments.push(formatted ? raw : raw.trim());
  };

  if (Array.isArray(tasks)) {
    for (const task of tasks) {
      const rawValue = task?.[field] ?? task?.TaskText;
      addFragment(rawValue);
    }
  } else if (tasks && typeof tasks === 'object') {
    const rawValue = tasks[field] ?? tasks.TaskText;
    addFragment(rawValue);
  }

  return fragments;
}

function collectHelps(helps, { formatted = false } = {}) {
  const result = [];
  if (!Array.isArray(helps)) {
    return result;
  }

  const field = formatted ? 'HelpTextFormatted' : 'HelpText';

  for (const help of helps) {
    const rawValue = help?.[field] ?? help?.HelpText ?? '';
    const raw = String(rawValue);
    const trimmed = stripHtml(raw).trim();
    const remainSeconds = help?.RemainSeconds ?? null;

    if (trimmed.length === 0 && (remainSeconds == null || remainSeconds <= 0)) {
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      continue;
    }

    result.push({
      number: help?.Number ?? '',
      text: formatted ? raw : raw.trim(),
      remainSeconds
    });
  }

  return result;
}

function buildTaskMessage(
  platform,
  { level, taskFragments, helps, timeoutRemain, formatted = false }
) {
  const isTelegram = platform === TELEGRAM_PLATFORM;
  const normalizedHelps = Array.isArray(helps) ? helps : [];
  const options = isTelegram ? { parse_mode: 'HTML', disable_web_page_preview: true } : {};

  const levelNumber = level?.Number ?? '';
  const levelNameRaw = String(level?.Name || '').trim();
  const levelName = isTelegram ? escapeHtml(levelNameRaw) : levelNameRaw;
  const header = isTelegram
    ? `<b>üìú –ó–∞–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è ‚Ññ${levelNumber}${levelName ? ` ‚Äî ${levelName}` : ''}</b>`
    : `üìú –ó–∞–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è ‚Ññ${levelNumber}${levelName ? ` ‚Äî ${levelName}` : ''}`;

  const timeoutLine = timeoutRemain
    ? isTelegram
      ? `<i>–î–æ –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: ${escapeHtml(timeoutRemain)}</i>`
      : `–î–æ –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: ${timeoutRemain}`
    : '';

  const renderTaskFragment = text => {
    if (formatted) {
      if (isTelegram) {
        return sanitizeHtmlForTelegram(text);
      }
      return stripHtml(text);
    }
    return isTelegram ? escapeHtml(text) : text;
  };

  let bodyMain;
  if (taskFragments.length > 0) {
    if (!formatted && isTelegram) {
      bodyMain = taskFragments
        .map(fragment => `<blockquote>${renderTaskFragment(fragment)}</blockquote>`)
        .join('\n\n');
    } else {
      const rendered = taskFragments.map(fragment => renderTaskFragment(fragment));
      bodyMain = rendered.join('\n\n');
    }
  } else {
    bodyMain = formatted
      ? isTelegram
        ? '<i>–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</i>'
        : '–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'
      : isTelegram
        ? '<blockquote>–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</blockquote>'
        : '–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
  }

  const helpsSections = [];
  for (const help of normalizedHelps) {
    const number = help.number;
    const label = number ? `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ ${number}` : 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞';
    const remainStr = formatRemain(help.remainSeconds);
    const helpContent = formatted
      ? isTelegram
        ? sanitizeHtmlForTelegram(help.text)
        : stripHtml(help.text)
      : isTelegram
        ? escapeHtml(help.text)
        : help.text;

    if (isTelegram) {
      if (formatted) {
        const remainLine = remainStr
          ? `\n<i>–î–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: ${escapeHtml(remainStr)}</i>`
          : '';
        helpsSections.push(`<b>${label}</b>\n${helpContent}${remainLine}`);
      } else {
        const remainLine = remainStr
          ? `\n<i>–î–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: ${escapeHtml(remainStr)}</i>`
          : '';
        helpsSections.push(`<b>${label}</b>\n<blockquote>${helpContent}</blockquote>${remainLine}`);
      }
    } else {
      let section = `${label}\n${helpContent}`;
      if (remainStr) {
        section += `\n–î–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: ${remainStr}`;
      }
      helpsSections.push(section);
    }
  }

  const helpsBlock = helpsSections.length > 0 ? helpsSections.join('\n\n') : '';

  const sections = [header];
  if (timeoutLine) {
    sections.push(timeoutLine);
  }
  if (bodyMain) {
    sections.push(bodyMain);
  }
  if (helpsBlock) {
    sections.push(helpsBlock);
  }

  const text = sections.join('\n\n');
  const body = sections.slice(1).join('\n\n');

  return {
    text,
    header,
    body,
    options
  };
}

function splitMessageBody(text, maxLength) {
  if (!text) {
    return [];
  }

  const chunks = [];
  for (let i = 0; i < text.length; i += maxLength) {
    chunks.push(text.slice(i, i + maxLength));
  }
  return chunks;
}

function sanitizeHtmlForTelegram(html) {
  if (!html) {
    return '';
  }

  let text = String(html);

  text = text.replace(/\r\n?/g, '\n');
  text = text.replace(/<br\s*\/?>/gi, '\n');
  text = text.replace(/<\/p>/gi, '\n\n');
  text = text.replace(/<p[^>]*>/gi, '');
  text = text.replace(/<\/?div[^>]*>/gi, '\n');
  text = text.replace(/<li[^>]*>/gi, '\n‚Ä¢ ');
  text = text.replace(/<\/li>/gi, '');
  text = text.replace(/<\/?(ul|ol)[^>]*>/gi, '\n');
  text = text.replace(/<blockquote[^>]*>/gi, '\n');
  text = text.replace(/<\/blockquote>/gi, '\n');
  text = text.replace(/<h([1-6])[^>]*>/gi, '\n<b>');
  text = text.replace(/<\/h[1-6]>/gi, '</b>\n');

  const replacements = [
    { from: /<strong[^>]*>/gi, to: '<b>' },
    { from: /<\/strong>/gi, to: '</b>' },
    { from: /<em[^>]*>/gi, to: '<i>' },
    { from: /<\/em>/gi, to: '</i>' },
    { from: /<ins[^>]*>/gi, to: '<u>' },
    { from: /<\/ins>/gi, to: '</u>' },
    { from: /<u[^>]*>/gi, to: '<u>' },
    { from: /<\/u>/gi, to: '</u>' },
    { from: /<(?:strike|del)[^>]*>/gi, to: '<s>' },
    { from: /<\/(?:strike|del)>/gi, to: '</s>' },
    { from: /<span[^>]*>/gi, to: '' },
    { from: /<\/span>/gi, to: '' },
    { from: /<font[^>]*>/gi, to: '' },
    { from: /<\/font>/gi, to: '' },
    { from: /<pre[^>]*>/gi, to: '\n<pre>' },
    { from: /<\/pre>/gi, to: '</pre>\n' },
    { from: /<code[^>]*>/gi, to: '<code>' },
    { from: /<\/code>/gi, to: '</code>' }
  ];
  for (const { from, to } of replacements) {
    text = text.replace(from, to);
  }

  text = text.replace(/<a\s+[^>]*href=["']([^"']+)["'][^>]*>/gi, '<a href="$1">');
  text = text.replace(/<\/a>/gi, '</a>');

  const allowedTags = new Set(['b', 'i', 'u', 's', 'code', 'pre', 'a']);
  text = text.replace(/<([^>]+)>/gi, (match, inner) => {
    const content = inner.trim();
    if (!content) {
      return '';
    }

    const isClosing = content.startsWith('/');
    let tagBody = isClosing ? content.slice(1).trim() : content;
    const isSelfClosing = tagBody.endsWith('/');
    if (isSelfClosing) {
      tagBody = tagBody.slice(0, -1).trim();
    }
    const tagNameMatch = tagBody.match(/^([a-z0-9]+)/i);
    if (!tagNameMatch) {
      return '';
    }
    const tagName = tagNameMatch[1].toLowerCase();

    if (tagName === 'br') {
      return '\n';
    }

    if (!allowedTags.has(tagName)) {
      return '';
    }

    if (isClosing) {
      return `</${tagName}>`;
    }

    if (tagName === 'a') {
      const hrefMatch = tagBody.match(/href\s*=\s*['"]([^'"]+)['"]/i);
      const href = hrefMatch ? hrefMatch[1] : null;
      if (!href) {
        return '';
      }
      return `<a href="${href}">`;
    }

    return `<${tagName}>`;
  });

  text = text
    .replace(/&nbsp;/gi, ' ')
    .replace(/&quot;/gi, '"')
    .replace(/&#39;/gi, "'")
    .replace(/&apos;/gi, "'")
    .replace(/&ndash;/gi, '-')
    .replace(/&mdash;/gi, '-')
    .replace(/&hellip;/gi, '...')
    .replace(/&lt;/gi, '<')
    .replace(/&gt;/gi, '>')
    .replace(/&amp;/gi, '&');

  text = text.replace(/\t+/g, ' ');
  text = text.replace(/\n{3,}/g, '\n\n');

  return text.trim();
}

function stripHtml(input) {
  if (!input) {
    return '';
  }

  let text = String(input);

  text = text.replace(/<br\s*\/?>/gi, '\n');
  text = text.replace(/<\/p>/gi, '\n\n');
  text = text.replace(/<p[^>]*>/gi, '');
  text = text.replace(/<li[^>]*>/gi, '\n‚Ä¢ ');
  text = text.replace(/<\/li>/gi, '');
  text = text.replace(/<\/?ul[^>]*>/gi, '\n');
  text = text.replace(/<\/?ol[^>]*>/gi, '\n');
  text = text.replace(/<\/?blockquote[^>]*>/gi, '\n');
  text = text.replace(/<\/?strong[^>]*>/gi, '');
  text = text.replace(/<\/?em[^>]*>/gi, '');
  text = text.replace(/<\/?span[^>]*>/gi, '');
  text = text.replace(/<\/?div[^>]*>/gi, '\n');
  text = text.replace(/<\/?h\d[^>]*>/gi, '\n');
  text = text.replace(/<\/?table[^>]*>/gi, '\n');
  text = text.replace(/<\/?tr[^>]*>/gi, '\n');
  text = text.replace(/<\/?td[^>]*>/gi, '\t');
  text = text.replace(/<\/?th[^>]*>/gi, '\t');
  text = text.replace(/<[^>]+>/g, '');

  text = text
    .replace(/&nbsp;/gi, ' ')
    .replace(/&quot;/gi, '"')
    .replace(/&#39;/gi, "'")
    .replace(/&apos;/gi, "'")
    .replace(/&ndash;/gi, '-')
    .replace(/&mdash;/gi, '-')
    .replace(/&hellip;/gi, '...')
    .replace(/&lt;/gi, '<')
    .replace(/&gt;/gi, '>')
    .replace(/&amp;/gi, '&');

  text = text.replace(/\t+/g, ' ');
  text = text.replace(/\r/g, '');
  text = text.replace(/\n{3,}/g, '\n\n');

  return text.trim();
}

// –£–¥–∞–ª—ë–Ω —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä HTML, –ø–æ–∫–∞–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è TaskText
function escapeHtml(text) {
  return String(text || '')
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—É–Ω–¥ –≤ –¥/—á/–º/—Å –±–µ–∑ –Ω—É–ª–µ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
function formatRemain(seconds) {
  const total = Number(seconds) || 0;
  if (total <= 0) return '';
  let s = Math.floor(total);
  const days = Math.floor(s / 86400);
  s %= 86400;
  const hours = Math.floor(s / 3600);
  s %= 3600;
  const minutes = Math.floor(s / 60);
  s %= 60;
  const parts = [];
  if (days > 0) parts.push(`${days}–¥`);
  if (hours > 0) parts.push(`${hours}—á`);
  if (minutes > 0) parts.push(`${minutes}–º`);
  if (s > 0) parts.push(`${s}—Å`);
  return parts.join(' ');
}

// –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ–∫—Ç–æ—Ä–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
function extractSectorAnswerText(rawAnswer) {
  if (rawAnswer == null) return '';
  if (typeof rawAnswer === 'string') return rawAnswer.trim();
  if (typeof rawAnswer === 'number' || typeof rawAnswer === 'boolean') return String(rawAnswer);
  if (Array.isArray(rawAnswer)) {
    const parts = rawAnswer
      .map(item => extractSectorAnswerText(item))
      .filter(v => v && v.trim().length > 0);
    return parts.join(', ');
  }
  // –û–±—ä–µ–∫—Ç: –ø—Ä–æ–±—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø–æ–ª—è
  const candidates = [
    rawAnswer.Value,
    rawAnswer.Text,
    rawAnswer.Answer,
    rawAnswer.Display,
    rawAnswer.StringValue,
    rawAnswer.Name,
    rawAnswer.Title,
    rawAnswer.Content
  ].filter(v => v != null);
  if (candidates.length > 0) {
    const first = candidates.find(v => typeof v === 'string') ?? candidates[0];
    return extractSectorAnswerText(first);
  }
  // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–ª–æ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  try {
    const flat = Object.values(rawAnswer)
      .map(v => (typeof v === 'string' || typeof v === 'number' ? String(v) : ''))
      .filter(Boolean)
      .join(' ')
      .trim();
    return flat;
  } catch (_) {
    return '';
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist
 * @param {string} platform - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * @returns {boolean} - true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞
 */
function isUserAllowed(platform, userId) {
  // –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
  if (!adminConfig.moderationEnabled) {
    return true;
  }

  const user = getPlatformUser(platform, userId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ Encounter login
  if (user.login) {
    if (whitelistCache.has(user.login.toLowerCase())) {
      return true;
    }
  }

  return false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
 * @param {string} platform - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} - true –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
 */
async function checkGameAccess(platform, userId) {
  if (isUserAllowed(platform, userId)) {
    return true;
  }

  // –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await sendMessage(platform, userId, 'üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @seo2z');
  return false;
}

// Throttling –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—â–∏—Ç–∞ –æ—Ç rate limiting)
const MESSAGE_THROTTLE_TTL = 60_000;
const messageUpdateThrottle = new Map(); // `${platform}_${userId}_${messageId}` -> { lastUpdate, pendingText, pendingOptions, timeout, cleanupTimeout }

function scheduleThrottleCleanup(throttleKey, entry) {
  if (!entry) {
    return;
  }

  if (entry.cleanupTimeout) {
    clearTimeout(entry.cleanupTimeout);
    entry.cleanupTimeout = null;
  }

  entry.cleanupTimeout = setTimeout(() => {
    const current = messageUpdateThrottle.get(throttleKey);
    if (!current) {
      return;
    }

    if (!current.timeout && (current.pendingText === null || current.pendingText === undefined)) {
      messageUpdateThrottle.delete(throttleKey);
    } else {
      // –ë—ã–ª–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ
      scheduleThrottleCleanup(throttleKey, current);
    }
  }, MESSAGE_THROTTLE_TTL);
}

async function sendOrUpdateMessage(platform, userId, text, messageId = null, options = {}) {
  try {
    if (messageId) {
      const throttleKey = `${platform}_${userId}_${messageId}`;
      const now = Date.now();
      const throttle = messageUpdateThrottle.get(throttleKey);

      if (throttle) {
        const elapsed = now - throttle.lastUpdate;

        if (elapsed < 2000) {
          logger.info(
            `‚è≥ Throttle: –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ—à–ª–æ ${elapsed}ms < 2000ms)`
          );

          if (throttle.timeout) {
            clearTimeout(throttle.timeout);
          }

          throttle.pendingText = text;
          throttle.pendingOptions = options;

          const waitTime = 2000 - elapsed;
          if (throttle.cleanupTimeout) {
            clearTimeout(throttle.cleanupTimeout);
            throttle.cleanupTimeout = null;
          }

          throttle.timeout = setTimeout(async () => {
            try {
              await editPlatformMessage(
                platform,
                userId,
                messageId,
                throttle.pendingText,
                throttle.pendingOptions || {}
              );
              throttle.lastUpdate = Date.now();
              throttle.pendingText = null;
              throttle.pendingOptions = null;
              throttle.timeout = null;
              logger.info('‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
              scheduleThrottleCleanup(throttleKey, throttle);
            } catch (err) {
              if (
                err.code === 'ETELEGRAM' &&
                err.response?.body?.description?.includes('message is not modified')
              ) {
                logger.info('‚è≠Ô∏è –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å');
              } else if (err.response?.statusCode === 429) {
                logger.info('‚ö†Ô∏è Rate limit –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
              } else {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err.message);
              }
              throttle.pendingText = null;
              throttle.pendingOptions = null;
              throttle.timeout = null;
              scheduleThrottleCleanup(throttleKey, throttle);
            }
          }, waitTime);

          return messageId;
        }
      }

      await editPlatformMessage(platform, userId, messageId, text, options);

      messageUpdateThrottle.set(throttleKey, {
        lastUpdate: Date.now(),
        pendingText: null,
        pendingOptions: null,
        timeout: null,
        cleanupTimeout: null
      });
      scheduleThrottleCleanup(throttleKey, messageUpdateThrottle.get(throttleKey));

      return messageId;
    }

    return await sendPlatformMessage(platform, userId, text, options);
  } catch (error) {
    if (
      error.code === 'ETELEGRAM' &&
      error.response?.body?.description?.includes('message is not modified')
    ) {
      logger.info('‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      return messageId;
    }

    if (error.response?.statusCode === 429) {
      logger.info('‚ö†Ô∏è Rate limit (429), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      return messageId;
    }

    if (messageId && /–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç editMessage/i.test(error.message || '')) {
      logger.info(`[${platform}] –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ`);
      return await sendPlatformMessage(platform, userId, text, options);
    }

    if (messageId && error.response?.status === 400) {
      logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return await sendPlatformMessage(platform, userId, text, options);
    }

    throw error;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∏–≥—Ä—É Encounter
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuthentication(login, password, domain = 'https://world.en.cx') {
  try {
    const api = new EncounterAPI(domain);
    const result = await api.authenticate(login, password);
    return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ success
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–º–µ–Ω–∞, –ø—Ä–∏–Ω–∏–º–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    return {
      success: login.length > 0 && password.length > 0,
      message:
        login.length > 0 && password.length > 0
          ? '–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞'
          : '–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏'
    };
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
async function showUsersList(chatId, messageId, page = 0) {
  const USERS_PER_PAGE = 10;
  const users = Array.from(userData.entries());
  const totalPages = Math.ceil(users.length / USERS_PER_PAGE);
  const start = page * USERS_PER_PAGE;
  const end = start + USERS_PER_PAGE;
  const pageUsers = users.slice(start, end);

  if (users.length === 0) {
    const message = 'üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç';
    const keyboard = {
      inline_keyboard: [[{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]]
    };

    await editTelegramMessage(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
    return;
  }

  let message = `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}/${totalPages})\n\n`;

  for (const [storageKey, user] of pageUsers) {
    const [keyPlatform, ...restKey] = storageKey.split('::');
    const platform = user.platform || keyPlatform || TELEGRAM_PLATFORM;
    const plainUserId = user.userId || (restKey.length > 0 ? restKey.join('::') : storageKey);
    const username = user.telegramUsername
      ? `@${user.telegramUsername}`
      : user.telegramFirstName || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const login = user.login || '‚Äî';
    const firstActivity = user.firstActivity
      ? new Date(user.firstActivity).toLocaleDateString('ru-RU')
      : '‚Äî';
    const lastActivity = user.lastActivity
      ? new Date(user.lastActivity).toLocaleString('ru-RU')
      : '‚Äî';

    message += `<b>${username}</b>\n`;
    message += `ID: <code>${plainUserId}</code>\n`;
    message += `–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}\n`;
    message += `–õ–æ–≥–∏–Ω EN: <code>${login}</code>\n`;
    message += `–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: ${firstActivity}\n`;
    message += `–ü–æ—Å–ª–µ–¥–Ω–∏–π: ${lastActivity}\n\n`;
  }

  // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const keyboard = { inline_keyboard: [] };
  const navButtons = [];

  if (page > 0) {
    navButtons.push({ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `admin_users_${page - 1}` });
  }
  if (page < totalPages - 1) {
    navButtons.push({ text: '–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data: `admin_users_${page + 1}` });
  }

  if (navButtons.length > 0) {
    keyboard.inline_keyboard.push(navButtons);
  }

  keyboard.inline_keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'admin_back' }]);

  await editTelegramMessage(message, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'HTML',
    reply_markup: keyboard
  });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
 */
async function showModerationMenu(chatId, messageId) {
  const status = adminConfig.moderationEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ' : '–≤—ã–∫–ª—é—á–µ–Ω–∞ ‚ùå';
  const buttonText = adminConfig.moderationEnabled ? '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å' : '‚úÖ –í–∫–ª—é—á–∏—Ç—å';

  const message =
    `üîê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π</b>\n\n` +
    `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${status}\n\n` +
    `–ö–æ–≥–¥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.`;

  const keyboard = {
    inline_keyboard: [
      [{ text: buttonText, callback_data: 'moderation_toggle' }],
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]
    ]
  };

  await editTelegramMessage(message, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'HTML',
    reply_markup: keyboard
  });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º
 */
async function showWhitelistMenu(chatId, messageId, page = 0) {
  const ITEMS_PER_PAGE = 10;
  const whitelist = adminConfig.whitelist || [];
  const totalPages = Math.ceil(whitelist.length / ITEMS_PER_PAGE);
  const start = page * ITEMS_PER_PAGE;
  const end = start + ITEMS_PER_PAGE;
  const pageItems = whitelist.slice(start, end);

  let message = `üìã <b>–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</b>\n\n`;

  if (whitelist.length === 0) {
    message += '–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n\n';
    message += '–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
  } else {
    message += `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}/${totalPages}\n\n`;

    for (let i = 0; i < pageItems.length; i++) {
      const item = pageItems[i];
      const globalIndex = start + i;
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏–∑ –Ω–æ–≤–æ–≥–æ –∏–ª–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
      const login = item.login || (item.type === 'encounter' ? item.value : item.value);
      message += `${globalIndex + 1}. üéÆ <code>${login}</code>\n`;
    }
  }

  // –ö–Ω–æ–ø–∫–∏
  const keyboard = { inline_keyboard: [] };

  // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
  const removeButtons = [];
  for (let i = 0; i < Math.min(pageItems.length, 5); i++) {
    const globalIndex = start + i;
    removeButtons.push({
      text: `üóëÔ∏è ${globalIndex + 1}`,
      callback_data: `whitelist_remove_${globalIndex}`
    });
  }

  if (removeButtons.length > 0) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for (let i = 0; i < removeButtons.length; i += 3) {
      keyboard.inline_keyboard.push(removeButtons.slice(i, i + 3));
    }
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  const navButtons = [];
  if (page > 0) {
    navButtons.push({ text: '‚óÄÔ∏è', callback_data: `admin_whitelist_${page - 1}` });
  }
  navButtons.push({ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data: 'whitelist_add' });
  if (page < totalPages - 1) {
    navButtons.push({ text: '‚ñ∂Ô∏è', callback_data: `admin_whitelist_${page + 1}` });
  }

  keyboard.inline_keyboard.push(navButtons);
  keyboard.inline_keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]);

  await editTelegramMessage(message, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'HTML',
    reply_markup: keyboard
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist
 */
async function handleWhitelistAdd(chatId, messageId) {
  const message =
    `‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</b>\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ Encounter –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n` +
    `–ü—Ä–∏–º–µ—Ä: <code>player123</code>`;

  const keyboard = {
    inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_whitelist_0' }]]
  };

  await editTelegramMessage(message, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'HTML',
    reply_markup: keyboard
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
  setUserState(TELEGRAM_PLATFORM, String(chatId), 'WAITING_FOR_WHITELIST_ENTRY');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ whitelist
 */
async function showAdminMainMenu(chatId) {
  const usersCount = userData.size;
  const moderationStatus = adminConfig.moderationEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ' : '–≤—ã–∫–ª—é—á–µ–Ω–∞ ‚ùå';
  const whitelistCount = adminConfig.whitelist ? adminConfig.whitelist.length : 0;

  const message =
    `üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n` +
    `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}\n` +
    `üîê –ú–æ–¥–µ—Ä–∞—Ü–∏—è: ${moderationStatus}\n` +
    `üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: ${whitelistCount} –∑–∞–ø–∏—Å–µ–π`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users_0' }],
      [{ text: 'üîê –ú–æ–¥–µ—Ä–∞—Ü–∏—è', callback_data: 'admin_moderation' }],
      [{ text: 'üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫', callback_data: 'admin_whitelist_0' }]
    ]
  };

  try {
    await sendMessage(TELEGRAM_PLATFORM, chatId, message, {
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω-–º–µ–Ω—é:', error);
    await sendMessage(TELEGRAM_PLATFORM, chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
  }
}

async function handleWhitelistRemove(chatId, messageId, index, queryId = null) {
  if (!adminConfig.whitelist || index < 0 || index >= adminConfig.whitelist.length) {
    if (queryId) {
      await answerTelegramCallback(queryId, {
        text: '‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        show_alert: true
      });
    }
    return;
  }

  // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
  adminConfig.whitelist.splice(index, 1);
  await saveAdminConfig();

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
  await showWhitelistMenu(chatId, messageId, 0);
}

let handlersRegistered = false;
function registerTelegramHandlers(botInstance) {
  if (handlersRegistered) {
    return;
  }
  if (!botInstance) {
    throw new Error('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');
  }
  handlersRegistered = true;

  const commandList = ['reset', 'test', 'admin', 'cancel', 'start'];

  commandList.forEach(command => {
    const regex = new RegExp(`\\/${command}(?:\\s+(.*))?$`, 'i');
    botInstance.onText(regex, async (msg, match) => {
      const args = match && match[1] ? match[1].trim() : '';
      const context = createTelegramContext(msg, {
        commandName: command,
        args
      });

      try {
        await handleCommand(context);
      } catch (error) {
        logger.error(`[telegram] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /${command}:`, error);
      }
    });
  });

  botInstance.on('callback_query', async query => {
    const context = createTelegramCallbackContext(query);
    try {
      await handleCallback(context);
    } catch (error) {
      logger.error('[telegram] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback_query:', error);
    }
  });
  botInstance.on('message', async msg => {
    const context = createTelegramContext(msg);
    try {
      await handleTextMessage(context);
    } catch (error) {
      logger.error('[telegram] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });
}

module.exports = {
  setPlatformConfig,
  setAnswerServiceApi,
  registerTelegramHandlers,
  handleCommand,
  handleCallback,
  handleTextMessage,
  sendOrUpdateMessage
};
