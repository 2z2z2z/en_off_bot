const PLURAL_FORMS = ['–æ—Ç–≤–µ—Ç', '–æ—Ç–≤–µ—Ç–∞', '–æ—Ç–≤–µ—Ç–æ–≤'];

function formatAnswersCount(count) {
  if (count === 1) {
    return PLURAL_FORMS[0];
  }
  if (count >= 2 && count <= 4) {
    return PLURAL_FORMS[1];
  }
  return PLURAL_FORMS[2];
}

function updateLastKnownLevel(user, levelData, logger) {
  if (levelData && levelData.levelId && levelData.levelNumber !== undefined) {
    user.lastKnownLevel = {
      levelId: levelData.levelId,
      levelNumber: levelData.levelNumber,
      timestamp: Date.now()
    };
    logger?.info?.(
      `üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${levelData.levelNumber} (ID: ${levelData.levelId})`
    );
  }
}

async function checkPendingDecisions({ user, platform, userId, sendMessage }) {
  if (!user) {
    throw new Error('user is required for pending decision check');
  }

  if (user.pendingQueueDecision) {
    const decision = user.pendingQueueDecision;
    await sendMessage(
      platform,
      userId,
      `‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏—Ç–µ —Å—É–¥—å–±—É —Å—Ç–∞—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏!\n\n` +
        `–£ –≤–∞—Å –µ—Å—Ç—å ${decision.queueSize} ${formatAnswersCount(decision.queueSize)} ` +
        `–¥–ª—è —É—Ä–æ–≤–Ω—è ${decision.oldLevelNumber}, –∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî ${decision.newLevelNumber}.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≤—ã–±–æ—Ä–æ–º.`
    );
    return { blocked: true, reason: 'queue' };
  }

  if (user.pendingAnswerDecision) {
    const decision = user.pendingAnswerDecision;
    await sendMessage(
      platform,
      userId,
      `‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏—Ç–µ —Å—É–¥—å–±—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!\n\n` +
        `–û—Ç–≤–µ—Ç "${decision.answer}" –≥–æ—Ç–æ–≤–∏–ª—Å—è –¥–ª—è —É—Ä–æ–≤–Ω—è ${decision.oldLevel}, ` +
        `–Ω–æ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî ${decision.newLevel}.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≤—ã–±–æ—Ä–æ–º.`
    );
    return { blocked: true, reason: 'answer' };
  }

  return { blocked: false };
}

async function detectLevelChange({
  error,
  user,
  answer,
  platform,
  userId,
  progressMessageId,
  saveUserData,
  sendMessage,
  sendOrUpdateMessage,
  logger
}) {
  if (!error?.isLevelChanged) {
    return false;
  }

  logger?.info(
    `‚ö†Ô∏è –ó–ê–©–ò–¢–ê –°–†–ê–ë–û–¢–ê–õ–ê: –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è (${error.oldLevel} ‚Üí ${error.newLevel}) –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}"`
  );

  user.pendingAnswerDecision = {
    answer,
    oldLevel: error.oldLevel,
    newLevel: error.newLevel
  };
  await saveUserData();

  let options = {};

  if (platform === 'telegram') {
    options = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${error.newLevel}`, callback_data: 'answer_send' },
            { text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'answer_cancel' }
          ]
        ]
      }
    };
  } else if (platform === 'vk') {
    options = {
      keyboard: {
        type: 'inline',
        buttons: [
          [
            { label: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${error.newLevel}`, payload: { action: 'answer_send' } },
            { label: '–û—Ç–º–µ–Ω–∏—Ç—å', payload: { action: 'answer_cancel' } }
          ]
        ]
      }
    };
  }

  const messageText =
    `‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è (${error.oldLevel} ‚Üí ${error.newLevel})\n\n` +
    `–û—Ç–≤–µ—Ç "${answer}" –≥–æ—Ç–æ–≤–∏–ª—Å—è –¥–ª—è —É—Ä–æ–≤–Ω—è ${error.oldLevel}, ` +
    `–Ω–æ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî ${error.newLevel}.\n\n` +
    `–ß—Ç–æ –¥–µ–ª–∞—Ç—å?`;

  await updateProgressMessage({
    platform,
    userId,
    text: messageText,
    progressMessageId,
    options,
    sendMessage,
    sendOrUpdateMessage
  });

  return true;
}

async function retryWithBackoff({
  answer,
  retryCount,
  maxRetries,
  user,
  platform,
  userId,
  progressMessageId,
  saveUserData,
  sendMessage,
  sendOrUpdateMessage,
  logger,
  retryFn
}) {
  if (retryCount >= maxRetries) {
    logger?.error(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ (${maxRetries}) –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}"`);
    await updateProgressMessage({
      platform,
      userId,
      text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç "${answer}" –ø–æ—Å–ª–µ ${maxRetries + 1} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
      progressMessageId,
      sendMessage,
      sendOrUpdateMessage
    });
    return null;
  }

  const attemptNumber = retryCount + 1;
  logger?.info(
    `üîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${attemptNumber}/${maxRetries + 1})`
  );

  if (progressMessageId) {
    await updateProgressMessage({
      platform,
      userId,
      text: `üîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${attemptNumber})...`,
      progressMessageId,
      sendMessage,
      sendOrUpdateMessage
    });
  }

  try {
    user.authCookies = null;
    await saveUserData();

    const backoffDelay = Math.pow(2, retryCount) * 1000;
    logger?.info(
      `‚è±Ô∏è Exponential backoff: –∂–¥—ë–º ${backoffDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attemptNumber + 1}`
    );
    await new Promise(resolve => setTimeout(resolve, backoffDelay));

    logger?.info(
      `üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attemptNumber + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ "${answer}" –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`
    );

    if (progressMessageId) {
      await updateProgressMessage({
        platform,
        userId,
        text: `üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –æ—Ç–ø—Ä–∞–≤–∫—É "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${attemptNumber + 1})...`,
        progressMessageId,
        sendMessage,
        sendOrUpdateMessage
      });
    }

    return await retryFn(retryCount + 1);
  } catch (retryError) {
    logger?.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏:', retryError);

    const isMessageNotModifiedError =
      retryError.code === 'ETELEGRAM' &&
      retryError.response?.body?.description?.includes('message is not modified');

    if (!isMessageNotModifiedError) {
      await updateProgressMessage({
        platform,
        userId,
        text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: ${retryError.message}`,
        progressMessageId,
        sendMessage,
        sendOrUpdateMessage
      });
    }

    return null;
  }
}

async function updateProgressMessage({
  platform,
  userId,
  text,
  progressMessageId,
  options,
  sendMessage,
  sendOrUpdateMessage
}) {
  if (progressMessageId) {
    return sendOrUpdateMessage(platform, userId, text, progressMessageId, options);
  }
  return sendMessage(platform, userId, text, options);
}

async function handleCookieUpdate({ result, user, saveUserData, logger }) {
  if (!result?.newCookies) {
    return false;
  }

  logger?.info('üîÑ Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  user.authCookies = {
    ...(user.authCookies || {}),
    ...(result.newCookies || {})
  };
  await saveUserData();
  return true;
}

module.exports = {
  checkPendingDecisions,
  detectLevelChange,
  retryWithBackoff,
  updateProgressMessage,
  handleCookieUpdate,
  updateLastKnownLevel
};
