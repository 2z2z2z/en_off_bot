/** @typedef {import('./contracts').AnswerDeliveryDeps} AnswerDeliveryDeps */
/** @typedef {import('./contracts').AnswerDeliveryAPI} AnswerDeliveryAPI */

const {
  detectLevelChange,
  retryWithBackoff,
  updateProgressMessage,
  handleCookieUpdate,
  updateLastKnownLevel
} = require('./answer-helpers');

const ACCUMULATION_TIMEOUT_MS = 5000;
const MAX_RETRIES = 2;

function formatQueueDecisionText(decision) {
  const { queueSize, oldLevelNumber, newLevelNumber } = decision;
  return (
    `‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏—Ç–µ —Å—É–¥—å–±—É —Å—Ç–∞—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏!\n\n` +
    `–£ –≤–∞—Å –µ—Å—Ç—å ${queueSize} ${
      queueSize === 1 ? '–æ—Ç–≤–µ—Ç' : queueSize < 5 ? '–æ—Ç–≤–µ—Ç–∞' : '–æ—Ç–≤–µ—Ç–æ–≤'
    } ` +
    `–¥–ª—è —É—Ä–æ–≤–Ω—è ${oldLevelNumber}, –∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî ${newLevelNumber}.\n\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≤—ã–±–æ—Ä–æ–º.`
  );
}

function formatAnswerDecisionText(decision) {
  return (
    `‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏—Ç–µ —Å—É–¥—å–±—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!\n\n` +
    `–û—Ç–≤–µ—Ç "${decision.answer}" –≥–æ—Ç–æ–≤–∏–ª—Å—è –¥–ª—è —É—Ä–æ–≤–Ω—è ${decision.oldLevel}, ` +
    `–Ω–æ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî ${decision.newLevel}.\n\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≤—ã–±–æ—Ä–æ–º.`
  );
}

function buildSuccessMessage(answer, response) {
  let message = `üì§ –û—Ç–≤–µ—Ç "${answer}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ‚Ññ${response.levelNumber}\n${response.message}`;

  if (response.level?.Name) {
    message += `\nüìù –£—Ä–æ–≤–µ–Ω—å: ${response.level.Name}`;
    if (
      response.level.PassedSectorsCount !== undefined &&
      response.level.RequiredSectorsCount !== undefined
    ) {
      message += `\nüìä –°–µ–∫—Ç–æ—Ä–∞: ${response.level.PassedSectorsCount}/${response.level.RequiredSectorsCount}`;
    }
  }

  return message;
}

function createAccumulationNotice(answer, count) {
  return `üì¶ –ö–æ–¥ "${answer}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä (${count})`;
}

function classifyError(error) {
  const normalizedMessage = error.message?.toLowerCase?.() || '';

  const networkErrors = ['econnrefused', 'enotfound', 'etimedout', 'network', 'timeout'];
  const authErrors = ['—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'];
  const criticalErrors = ['ip –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', '—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤'];

  if (criticalErrors.some(pattern => normalizedMessage.includes(pattern))) {
    return 'critical';
  }

  if (networkErrors.some(pattern => normalizedMessage.includes(pattern))) {
    return 'network';
  }

  if (authErrors.some(pattern => normalizedMessage.includes(pattern))) {
    return 'auth';
  }

  return 'generic';
}

function createDecisionButtons(platform, levelNumber) {
  if (platform === 'telegram') {
    return {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${levelNumber}`,
              callback_data: 'queue_send'
            },
            { text: '–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å', callback_data: 'queue_clear' }
          ]
        ]
      }
    };
  }

  if (platform === 'vk') {
    return {
      keyboard: {
        type: 'inline',
        buttons: [
          [
            {
              label: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —É—Ä–æ–≤–µ–Ω—å ${levelNumber}`,
              payload: { action: 'queue_send' }
            },
            { label: '–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å', payload: { action: 'queue_clear' } }
          ]
        ]
      }
    };
  }

  return {};
}

function createAccumulationButtons(platform) {
  if (platform === 'telegram') {
    return {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ', callback_data: 'batch_send_all' },
            { text: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ', callback_data: 'batch_cancel_all' }
          ],
          [{ text: 'üìã –°–ø–∏—Å–æ–∫', callback_data: 'batch_list' }]
        ]
      }
    };
  }

  if (platform === 'vk') {
    return {
      keyboard: {
        type: 'inline',
        buttons: [
          [
            { label: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ', payload: { action: 'batch_send_all' } },
            { label: 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ', payload: { action: 'batch_cancel_all' } }
          ],
          [{ label: 'üìã –°–ø–∏—Å–æ–∫', payload: { action: 'batch_list' } }]
        ]
      }
    };
  }

  return {};
}

/**
 * @param {AnswerDeliveryDeps} deps
 * @returns {AnswerDeliveryAPI}
 */
function createAnswerDelivery(deps) {
  const {
    ensureAuthenticated,
    createAuthCallback,
    getUserInfo,
    sendMessage,
    sendOrUpdateMessage,
    saveUserData,
    enqueueAnswer,
    logger,
    EncounterAPI
  } = deps;

  async function sendToEncounterAPI(user, answer) {
    const authCallback = await createAuthCallback(user);
    const api = new EncounterAPI(user.domain, authCallback);

    await ensureAuthenticated(user, EncounterAPI, saveUserData);

    const expectedLevelId = user.lastKnownLevel?.levelId || null;
    logger.info(
      `üìå –û–∂–∏–¥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}": ${
        expectedLevelId ? `ID=${expectedLevelId}` : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      }`
    );

    const result = await api.sendAnswer(
      user.gameId,
      answer,
      user.authCookies,
      user.login,
      user.password,
      false,
      expectedLevelId
    );

    await handleCookieUpdate({
      result,
      user,
      saveUserData,
      logger
    });

    if (result.success) {
      if (result.level) {
        updateLastKnownLevel(
          user,
          {
            levelId: result.level.LevelId,
            levelNumber: result.level.Number
          },
          logger
        );
      }
      logger.info(`‚úÖ –û—Ç–≤–µ—Ç "${answer}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É ${user.gameId}. ${result.message}`);
      return result;
    }

    throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç');
  }

  async function handlePendingDecisions(platform, userId, user) {
    if (user.pendingQueueDecision) {
      await sendMessage(
        platform,
        userId,
        formatQueueDecisionText(user.pendingQueueDecision),
        createDecisionButtons(platform, user.pendingQueueDecision.newLevelNumber)
      );
      return true;
    }

    if (user.pendingAnswerDecision) {
      await sendMessage(
        platform,
        userId,
        formatAnswerDecisionText(user.pendingAnswerDecision)
      );
      return true;
    }

    return false;
  }

  function scheduleAccumulationCompletion(platform, userId, user) {
    if (user.accumulationTimer) {
      clearTimeout(user.accumulationTimer);
      logger.info(`‚è±Ô∏è –¢–∞–π–º–µ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω`);
    }

    user.accumulationTimer = setTimeout(async () => {
      logger.info(`‚è±Ô∏è –¢–∞–π–º–µ—Ä –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏—Å—Ç—ë–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏`);
      await handleAccumulationComplete(platform, userId);
    }, ACCUMULATION_TIMEOUT_MS);
  }

  async function appendToAccumulation(platform, userId, user, answer, progressMessageId) {
    user.accumulatedAnswers = user.accumulatedAnswers || [];
    user.accumulatedAnswers.push({
      answer,
      timestamp: Date.now(),
      levelId: user.lastKnownLevel?.levelId || null,
      levelNumber: user.lastKnownLevel?.levelNumber || null
    });

    logger.info(`üì¶ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ "${answer}" (–≤—Å–µ–≥–æ: ${user.accumulatedAnswers.length})`);

    scheduleAccumulationCompletion(platform, userId, user);

    await saveUserData();

    await updateProgressMessage({
      platform,
      userId,
      text: createAccumulationNotice(answer, user.accumulatedAnswers.length),
      progressMessageId,
      sendMessage,
      sendOrUpdateMessage
    });
  }

  async function handleSuccess(platform, userId, answer, response, progressMessageId) {
    await updateProgressMessage({
      platform,
      userId,
      text: buildSuccessMessage(answer, response),
      progressMessageId,
      sendMessage,
      sendOrUpdateMessage
    });
    return response;
  }

  async function handleCriticalError(platform, userId, error, progressMessageId) {
    logger.error(`üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${error.message}`);
    await updateProgressMessage({
      platform,
      userId,
      text: `üö´ ${error.message}\n\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.`,
      progressMessageId,
      sendMessage,
      sendOrUpdateMessage
    });
    return null;
  }

  async function handleNetworkError(platform, userId, user, answer, error) {
    logger.warn(`üåê –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);

    if (user.pendingQueueDecision) {
      const oldQueueSize = user.answerQueue.length;
      const decision = user.pendingQueueDecision;

      logger.info(
        `üóëÔ∏è –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏ (${oldQueueSize} –æ—Ç–≤–µ—Ç–æ–≤) –∏–∑-–∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ—Ç–µ—Ä–∏ —Å–≤—è–∑–∏`
      );

      user.answerQueue.length = 0;
      user.pendingQueueDecision = null;

      await sendMessage(
        platform,
        userId,
        `üóëÔ∏è –°—Ç–∞—Ä–∞—è –æ—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–∞ (–ø–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏)\n\n` +
          `–ë—ã–ª–æ ${oldQueueSize} ${
            oldQueueSize === 1 ? '–æ—Ç–≤–µ—Ç' : oldQueueSize < 5 ? '–æ—Ç–≤–µ—Ç–∞' : '–æ—Ç–≤–µ—Ç–æ–≤'
          } ` +
          `–¥–ª—è —É—Ä–æ–≤–Ω—è ${decision.oldLevelNumber}.`
      );
    }

    const lastLevel = user.lastKnownLevel;

    enqueueAnswer(platform, userId, {
      answer,
      timestamp: Date.now(),
      levelId: lastLevel?.levelId || null,
      levelNumber: lastLevel?.levelNumber || null
    });
    user.isOnline = false;
    await saveUserData();

    let message = `üîÑ –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –û—Ç–≤–µ—Ç "${answer}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å`;
    if (lastLevel?.levelNumber) {
      message += ` (–£—Ä–æ–≤–µ–Ω—å ${lastLevel.levelNumber})`;
    }
    message +=
      '.\n‚ö†Ô∏è –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–º–µ–Ω–∏—Ç—Å—è, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ—à–∏—Ç—å: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å.';

    await sendMessage(platform, userId, message);
    return null;
  }

  async function handleAuthError(options) {
    const { retryFn, ...rest } = options;
    return retryWithBackoff({
      ...rest,
      maxRetries: MAX_RETRIES,
      retryFn: nextRetryCount => retryFn(nextRetryCount)
    });
  }

  async function handleGenericError(platform, userId, error, progressMessageId) {
    await updateProgressMessage({
      platform,
      userId,
      text: `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
      progressMessageId,
      sendMessage,
      sendOrUpdateMessage
    });
    return null;
  }

  async function handleErrorScenario({
    platform,
    userId,
    answer,
    progressMessageId,
    retryCount,
    user,
    error
  }) {
    const levelChangeHandled = await detectLevelChange({
      error,
      user,
      answer,
      platform,
      userId,
      progressMessageId,
      saveUserData,
      sendMessage,
      sendOrUpdateMessage,
      logger
    });

    if (levelChangeHandled) {
      return null;
    }

    const type = classifyError(error);

    if (type === 'critical') {
      return handleCriticalError(platform, userId, error, progressMessageId);
    }

    if (type === 'network') {
      return handleNetworkError(platform, userId, user, answer, error);
    }

    if (type === 'auth') {
      return handleAuthError({
        answer,
        retryCount,
        user,
        platform,
        userId,
        progressMessageId,
        saveUserData,
        sendMessage,
        sendOrUpdateMessage,
        logger,
        retryFn: nextRetryCount =>
          sendAnswerToEncounter(platform, userId, answer, progressMessageId, nextRetryCount)
      });
    }

    return handleGenericError(platform, userId, error, progressMessageId);
  }

  async function handleAccumulationComplete(platform, userId) {
    const user = getUserInfo(platform, userId);

    if (!user.accumulatedAnswers || user.accumulatedAnswers.length === 0) {
      logger.info(`‚ö†Ô∏è –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è ${platform}:${userId}`);
      user.isAccumulatingAnswers = false;
      user.accumulationTimer = null;
      await saveUserData();
      return;
    }

    const totalCodes = user.accumulatedAnswers.length;
    const startLevel = user.accumulationStartLevel;

    logger.info(
      `üìã –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${totalCodes} –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (—É—Ä–æ–≤–µ–Ω—å: ${
        startLevel?.levelNumber || '?'
      })`
    );

    const codesList = user.accumulatedAnswers
      .slice(0, 10)
      .map((item, index) => `${index + 1}. "${item.answer}"`)
      .join('\n');
    const moreCodesText = totalCodes > 10 ? `\n... –∏ –µ—â—ë ${totalCodes - 10}` : '';

    const messageText =
      `üì¶ –ù–∞–∫–æ–ø–ª–µ–Ω–æ ${totalCodes} ${
        totalCodes === 1 ? '–∫–æ–¥' : totalCodes < 5 ? '–∫–æ–¥–∞' : '–∫–æ–¥–æ–≤'
      }\n\n` +
      `${codesList}${moreCodesText}\n\n` +
      `–£—Ä–æ–≤–µ–Ω—å –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: ${startLevel?.levelNumber || '?'}\n\n` +
      `–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏?`;

    await sendMessage(platform, userId, messageText, createAccumulationButtons(platform));
  }

  async function sendAnswerToEncounter(
    platform,
    userId,
    answer,
    progressMessageId = null,
    retryCount = 0
  ) {
    const user = getUserInfo(platform, userId);

    const hasBlockingDecisions = await handlePendingDecisions(platform, userId, user);
    if (hasBlockingDecisions) {
      return null;
    }

    if (user.isAccumulatingAnswers) {
      await appendToAccumulation(platform, userId, user, answer, progressMessageId);
      return null;
    }

    try {
      const response = await sendToEncounterAPI(user, answer);
      return handleSuccess(platform, userId, answer, response, progressMessageId);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
      return handleErrorScenario({
        platform,
        userId,
        answer,
        progressMessageId,
        retryCount,
        user,
        error
      });
    }
  }

  return {
    sendAnswerToEncounter,
    handleAccumulationComplete,
    sendToEncounterAPI
  };
}

module.exports = {
  createAnswerDelivery
};
