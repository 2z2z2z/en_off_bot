const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const EncounterAPI = require('./encounter-api');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || '8239956764:AAH78W5Vvc47a_EhnL7XcLtRwVhmj8s5Q4Y';

// –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
// const BOT_TOKEN = process.env.BOT_TOKEN || '7729425234:AAFp-r5wN8fOANx5DVU1xJ94L5sW0rAjxeU';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();
const userData = new Map();

// –ê–¥–º–∏–Ω-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
let adminConfig = {
  moderationEnabled: false,
  whitelist: []
};

// –ö–µ—à whitelist –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
let whitelistCache = new Set();

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const DATA_FILE = process.env.DATA_FILE || 'user_data.json';

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∞
const ADMIN_CONFIG_FILE = 'admin_config.json';

// ID root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞)
const ROOT_USER_ID = 197924096;

// –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
const STATES = {
  WAITING_FOR_LOGIN: 'waiting_for_login',
  WAITING_FOR_PASSWORD: 'waiting_for_password',
  WAITING_FOR_GAME_URL: 'waiting_for_game_url',
  READY: 'ready',
  WAITING_FOR_ANSWER: 'waiting_for_answer'
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function loadUserData() {
  try {
    if (await fs.pathExists(DATA_FILE)) {
      const data = await fs.readJson(DATA_FILE);
      const now = Date.now();
      let migrationCount = 0;

      for (const [userId, userInfo] of Object.entries(data)) {
        // –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!userInfo.telegramUsername) {
          userInfo.telegramUsername = null;
          migrationCount++;
        }
        if (!userInfo.telegramFirstName) {
          userInfo.telegramFirstName = null;
        }
        if (!userInfo.firstActivity) {
          userInfo.firstActivity = now;
          migrationCount++;
        }
        if (!userInfo.lastActivity) {
          userInfo.lastActivity = now;
          migrationCount++;
        }

        userData.set(userId, userInfo);
      }

      console.log(`–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${userData.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
      if (migrationCount > 0) {
        console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${migrationCount} –ø–æ–ª–µ–π`);
        await saveUserData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function saveUserData() {
  try {
    const data = Object.fromEntries(userData);
    await fs.writeJson(DATA_FILE, data, { spaces: 2 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function loadAdminConfig() {
  try {
    if (await fs.pathExists(ADMIN_CONFIG_FILE)) {
      adminConfig = await fs.readJson(ADMIN_CONFIG_FILE);
      rebuildWhitelistCache();
      console.log('–ê–¥–º–∏–Ω-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    } else {
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      await saveAdminConfig();
      console.log('–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∞–¥–º–∏–Ω-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function saveAdminConfig() {
  try {
    await fs.writeJson(ADMIN_CONFIG_FILE, adminConfig, { spaces: 2 });
    rebuildWhitelistCache();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  }
}

// –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–µ—à–∞ whitelist
function rebuildWhitelistCache() {
  whitelistCache.clear();
  if (adminConfig.whitelist && Array.isArray(adminConfig.whitelist)) {
    adminConfig.whitelist.forEach(entry => {
      const key = `${entry.type}:${entry.value.toLowerCase()}`;
      whitelistCache.add(key);
    });
  }
  console.log(`Whitelist cache –æ–±–Ω–æ–≤–ª–µ–Ω: ${whitelistCache.size} –∑–∞–ø–∏—Å–µ–π`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function createMainKeyboard() {
  return {
    reply_markup: {
      keyboard: [
        ['–ó–∞–¥–∞–Ω–∏–µ'],
        ['–°–µ–∫—Ç–æ—Ä–∞'],
        ['üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏', 'üîó –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É'],
        ['üë§ –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
}

// –£–¥–∞–ª—ë–Ω —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä HTML, –ø–æ–∫–∞–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è TaskText
function escapeHtml(text) {
  return String(text || '')
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—É–Ω–¥ –≤ –¥/—á/–º/—Å –±–µ–∑ –Ω—É–ª–µ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
function formatRemain(seconds) {
  const total = Number(seconds) || 0;
  if (total <= 0) return '';
  let s = Math.floor(total);
  const days = Math.floor(s / 86400); s %= 86400;
  const hours = Math.floor(s / 3600); s %= 3600;
  const minutes = Math.floor(s / 60); s %= 60;
  const parts = [];
  if (days > 0) parts.push(`${days}–¥`);
  if (hours > 0) parts.push(`${hours}—á`);
  if (minutes > 0) parts.push(`${minutes}–º`);
  if (s > 0) parts.push(`${s}—Å`);
  return parts.join(' ');
}

// –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ–∫—Ç–æ—Ä–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
function extractSectorAnswerText(rawAnswer) {
  if (rawAnswer == null) return '';
  if (typeof rawAnswer === 'string') return rawAnswer.trim();
  if (typeof rawAnswer === 'number' || typeof rawAnswer === 'boolean') return String(rawAnswer);
  if (Array.isArray(rawAnswer)) {
    const parts = rawAnswer
      .map(item => extractSectorAnswerText(item))
      .filter(v => v && v.trim().length > 0);
    return parts.join(', ');
  }
  // –û–±—ä–µ–∫—Ç: –ø—Ä–æ–±—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø–æ–ª—è
  const candidates = [
    rawAnswer.Value,
    rawAnswer.Text,
    rawAnswer.Answer,
    rawAnswer.Display,
    rawAnswer.StringValue,
    rawAnswer.Name,
    rawAnswer.Title,
    rawAnswer.Content
  ].filter(v => v != null);
  if (candidates.length > 0) {
    const first = candidates.find(v => typeof v === 'string') ?? candidates[0];
    return extractSectorAnswerText(first);
  }
  // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–ª–æ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  try {
    const flat = Object.values(rawAnswer)
      .map(v => (typeof v === 'string' || typeof v === 'number' ? String(v) : ''))
      .filter(Boolean)
      .join(' ')
      .trim();
    return flat;
  } catch (_) {
    return '';
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function getUserInfo(userId) {
  if (!userData.has(userId)) {
    const now = Date.now();
    userData.set(userId, {
      login: null,
      password: null,
      domain: null,
      gameId: null,
      authCookies: null,
      answerQueue: [],
      isOnline: true,
      telegramUsername: null,
      telegramFirstName: null,
      firstActivity: now,
      lastActivity: now
    });
  }
  return userData.get(userId);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function isUserReady(userId) {
  const user = getUserInfo(userId);
  return user.login && user.password && user.domain && user.gameId;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} username - Telegram username (@username)
 * @param {string} firstName - Telegram –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function updateUserActivity(userId, username, firstName) {
  const user = getUserInfo(userId);
  const now = Date.now();

  // –û–±–Ω–æ–≤–ª—è–µ–º username –∏ firstName –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (username && user.telegramUsername !== username) {
    user.telegramUsername = username;
  }
  if (firstName && user.telegramFirstName !== firstName) {
    user.telegramFirstName = firstName;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º lastActivity
  user.lastActivity = now;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist
 * @param {string} userId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} - true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞
 */
function isUserAllowed(userId) {
  // –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
  if (!adminConfig.moderationEnabled) {
    return true;
  }

  const user = getUserInfo(userId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ Telegram username
  if (user.telegramUsername) {
    const telegramKey = `telegram:${user.telegramUsername.toLowerCase().replace('@', '')}`;
    if (whitelistCache.has(telegramKey)) {
      return true;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ Encounter login
  if (user.login) {
    const encounterKey = `encounter:${user.login.toLowerCase()}`;
    if (whitelistCache.has(encounterKey)) {
      return true;
    }
  }

  return false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
 * @param {string} userId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} - true –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
 */
async function checkGameAccess(userId) {
  if (isUserAllowed(userId)) {
    return true;
  }

  // –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await bot.sendMessage(userId, 'üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @seo2z');
  return false;
}

// Throttling –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—â–∏—Ç–∞ –æ—Ç rate limiting)
const telegramUpdateThrottle = new Map(); // userId -> { lastUpdate: timestamp, pendingText: string, timeout: NodeJS.Timeout }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendOrUpdateMessage(userId, text, messageId = null) {
  try {
    if (messageId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º throttle: –º–∞–∫—Å–∏–º—É–º 1 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const throttleKey = `${userId}_${messageId}`;
      const now = Date.now();
      const throttle = telegramUpdateThrottle.get(throttleKey);

      if (throttle) {
        const elapsed = now - throttle.lastUpdate;

        if (elapsed < 2000) {
          // –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º
          console.log(`‚è≥ Throttle: –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ—à–ª–æ ${elapsed}ms < 2000ms)`);

          // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∞–ø–¥–µ–π—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
          if (throttle.timeout) {
            clearTimeout(throttle.timeout);
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          throttle.pendingText = text;

          // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
          const waitTime = 2000 - elapsed;
          throttle.timeout = setTimeout(async () => {
            try {
              await bot.editMessageText(throttle.pendingText, {
                chat_id: userId,
                message_id: messageId
              });
              throttle.lastUpdate = Date.now();
              throttle.pendingText = null;
              throttle.timeout = null;
              console.log(`‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
            } catch (err) {
              if (err.code === 'ETELEGRAM' && err.response?.body?.description?.includes('message is not modified')) {
                console.log(`‚è≠Ô∏è –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å`);
              } else if (err.response?.statusCode === 429) {
                console.log(`‚ö†Ô∏è Telegram rate limit –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
              } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, err.message);
              }
            }
          }, waitTime);

          return messageId;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.editMessageText(text, {
        chat_id: userId,
        message_id: messageId
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º throttle
      telegramUpdateThrottle.set(throttleKey, {
        lastUpdate: Date.now(),
        pendingText: null,
        timeout: null
      });

      return messageId;
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sentMessage = await bot.sendMessage(userId, text);
      return sentMessage.message_id;
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "message is not modified" - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    if (error.code === 'ETELEGRAM' && error.response?.body?.description?.includes('message is not modified')) {
      console.log(`‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
      return messageId; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ messageId
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º Telegram rate limit (429) - —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ throttle
    if (error.response?.statusCode === 429) {
      console.log(`‚ö†Ô∏è Telegram rate limit (429), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è`);
      return messageId;
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö 400 –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (messageId && error.response?.status === 400) {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
      const sentMessage = await bot.sendMessage(userId, text);
      return sentMessage.message_id;
    }

    throw error;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∏–≥—Ä—É Encounter
async function sendAnswerToEncounter(userId, answer, progressMessageId = null, retryCount = 0) {
  const user = getUserInfo(userId);
  const MAX_RETRIES = 2; // –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (–≤—Å–µ–≥–æ 3 –ø–æ–ø—ã—Ç–∫–∏)

  try {
    const response = await sendToEncounterAPI(user, answer);
    
    if (response.success) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      let message = `üì§ –û—Ç–≤–µ—Ç "${answer}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ‚Ññ${response.levelNumber}\n${response.message}`;
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (response.level && response.level.Name) {
        message += `\nüìù –£—Ä–æ–≤–µ–Ω—å: ${response.level.Name}`;
        if (response.level.PassedSectorsCount !== undefined && response.level.RequiredSectorsCount !== undefined) {
          message += `\nüìä –°–µ–∫—Ç–æ—Ä–∞: ${response.level.PassedSectorsCount}/${response.level.RequiredSectorsCount}`;
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      await sendOrUpdateMessage(userId, message, progressMessageId);
      return response;
    } else {
      throw new Error(response.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    const networkErrors = ['ECONNREFUSED', 'ENOTFOUND', 'ETIMEDOUT', 'network', 'timeout'];
    const isNetworkError = networkErrors.some(errType => 
      error.code === errType || error.message.toLowerCase().includes(errType.toLowerCase())
    );
    
    const authErrors = ['–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'];
    const isAuthError = authErrors.some(errType =>
      error.message.toLowerCase().includes(errType.toLowerCase())
    );

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - IP –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–Ω–µ retry!)
    const criticalErrors = ['IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', '—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤'];
    const isCriticalError = criticalErrors.some(errType =>
      error.message.toLowerCase().includes(errType.toLowerCase())
    );

    if (isCriticalError) {
      console.error(`üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${error.message}`);
      await sendOrUpdateMessage(userId, `üö´ ${error.message}\n\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.`, progressMessageId);
      return null;
    }

    if (isNetworkError) {
      user.answerQueue.push({
        answer: answer,
        timestamp: Date.now()
      });
      user.isOnline = false;
      await saveUserData();

      bot.sendMessage(userId, `üîÑ –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –û—Ç–≤–µ—Ç "${answer}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.`);
      return null;
    } else if (isAuthError) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏ –ª–∏–º–∏—Ç retry
      if (retryCount >= MAX_RETRIES) {
        console.error(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ (${MAX_RETRIES}) –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}"`);
        await sendOrUpdateMessage(userId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç "${answer}" –ø–æ—Å–ª–µ ${MAX_RETRIES + 1} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`, progressMessageId);
        return null;
      }

      console.log(`üîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${MAX_RETRIES + 1})`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
      if (progressMessageId) {
        await sendOrUpdateMessage(userId, `üîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1})...`, progressMessageId);
      }

      try {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        user.authCookies = null;
        await saveUserData();

        // Exponential backoff: 1s, 2s, 4s
        const backoffDelay = Math.pow(2, retryCount) * 1000;
        console.log(`‚è±Ô∏è Exponential backoff: –∂–¥—ë–º ${backoffDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${retryCount + 2}`);
        await new Promise(resolve => setTimeout(resolve, backoffDelay));

        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 2} –æ—Ç–ø—Ä–∞–≤–∫–∏ "${answer}" –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        if (progressMessageId) {
          await sendOrUpdateMessage(userId, `üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –æ—Ç–ø—Ä–∞–≤–∫—É "${answer}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 2})...`, progressMessageId);
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Å—á—ë—Ç—á–∏–∫–æ–º retry
        return await sendAnswerToEncounter(userId, answer, progressMessageId, retryCount + 1);
      } catch (retryError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏:', retryError);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–Ω–æ–≤–∞ –æ—à–∏–±–∫–æ–π "message is not modified"
        const isMessageNotModifiedError = retryError.code === 'ETELEGRAM' &&
          retryError.response?.body?.description?.includes('message is not modified');

        if (!isMessageNotModifiedError) {
          await sendOrUpdateMessage(userId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: ${retryError.message}`, progressMessageId);
        }
        return null;
      }
    } else {
      await sendOrUpdateMessage(userId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, progressMessageId);
      return null;
    }
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
async function processAnswerQueue(userId) {
  const user = getUserInfo(userId);
  
  if (user.answerQueue.length === 0) {
    return;
  }
  
  const totalAnswers = user.answerQueue.length;
  let processed = 0;
  let successful = 0;
  let skipped = 0;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const queueMessage = await bot.sendMessage(userId, `üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ ${totalAnswers} –æ—Ç–≤–µ—Ç–æ–≤...`);
  
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  console.log('‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏...');
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await sendOrUpdateMessage(userId, `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å –∏–∑ ${totalAnswers} –æ—Ç–≤–µ—Ç–æ–≤...`, queueMessage.message_id);
  
  for (let i = 0; i < user.answerQueue.length; i++) {
    const queueItem = user.answerQueue[i];
    processed++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await sendOrUpdateMessage(userId, 
      `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é "${queueItem.answer}"...`, 
      queueMessage.message_id
    );
    
    try {
      const response = await sendToEncounterAPI(user, queueItem.answer);
      
      if (response.success) {
        successful++;
        user.answerQueue.splice(i, 1);
        i--; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫—Ä–∞—Ç–∫–æ
        await sendOrUpdateMessage(userId, 
          `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`, 
          queueMessage.message_id
        );
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      const ignorableErrors = [
        'Event –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–≥—Ä—ã',
        '–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è',
        '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
      ];
      
      const authErrors = [
        '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        '—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'
      ];
      
      const isIgnorableError = ignorableErrors.some(errType => 
        error.message.toLowerCase().includes(errType.toLowerCase())
      );
      
      const isAuthError = authErrors.some(errType => 
        error.message.toLowerCase().includes(errType.toLowerCase())
      );
      
      if (isIgnorableError) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç "${queueItem.answer}" –∏–∑-–∑–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö`);
        skipped++;
        
        // –ö—Ä–∞—Ç–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await sendOrUpdateMessage(userId, 
          `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ—Ç–≤–µ—Ç`, 
          queueMessage.message_id
        );
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        user.answerQueue.splice(i, 1);
        i--; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        
      } else if (isAuthError) {
        console.log(`üîí –ü—Ä–æ–±–ª–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: ${error.message}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        await sendOrUpdateMessage(userId, 
          `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\nüîí –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è "${queueItem.answer}"...`, 
          queueMessage.message_id
        );
        
        try {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
          user.authCookies = null;
          await saveUserData();
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
          await sendOrUpdateMessage(userId, 
            `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å: ${processed}/${totalAnswers}\nüîÑ –ü–æ–≤—Ç–æ—Ä—è—é "${queueItem.answer}"...`, 
            queueMessage.message_id
          );
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–æ–º—É –∂–µ –æ—Ç–≤–µ—Ç—É (–Ω–µ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏)
          i--; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–æ–º—É –∂–µ —ç–ª–µ–º–µ–Ω—Ç—É
          processed--; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
          
          console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ "${queueItem.answer}" –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
        } catch (authError) {
          console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏:', authError);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "message is not modified"
          const isMessageNotModifiedError = authError.code === 'ETELEGRAM' && 
            authError.response?.body?.description?.includes('message is not modified');
          
          if (!isMessageNotModifiedError) {
            console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç "${queueItem.answer}" –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
          }
          
          skipped++;
          user.answerQueue.splice(i, 1);
          i--; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        }
        
      } else {
        // –°–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await sendOrUpdateMessage(userId, 
          `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: ${error.message}\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successful}/${totalAnswers}`, 
          queueMessage.message_id
        );
        break;
      }
    }
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    if (i < user.answerQueue.length - 1 || processed < totalAnswers) {
      console.log(`‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ 1.2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–≤–µ—Ç–æ–º...`);
      await new Promise(resolve => setTimeout(resolve, 1200));
    }
  }
  
  if (user.answerQueue.length === 0) {
    user.isOnline = true;
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏
    let finalMessage = `‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successful} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`;
    if (skipped > 0) {
      finalMessage += `, ${skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ`;
    }
    finalMessage += ` –∏–∑ ${totalAnswers}`;
    
    await sendOrUpdateMessage(userId, finalMessage, queueMessage.message_id);
  }
  
  await saveUserData();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Encounter
async function sendToEncounterAPI(user, answer) {
  try {
    const api = new EncounterAPI(user.domain);

    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç cookies –∏–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
    if (!user.authCookies || Object.keys(user.authCookies).length === 0) {
      console.log(`üîê –ù–µ—Ç cookies, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è ${user.login}...`);
      console.log(`üéÆ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: –¥–æ–º–µ–Ω=${user.domain}, ID=${user.gameId}`);

      const authResult = await api.authenticate(user.login, user.password);
      if (authResult.success) {
        user.authCookies = authResult.cookies;
        await saveUserData();
        console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è ${user.login}`);
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authResult.message}`);
      }
    } else {
      console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ cookies –¥–ª—è ${user.login}`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (–ø–µ—Ä–µ–¥–∞–µ–º login/password)
    const result = await api.sendAnswer(user.gameId, answer, user.authCookies, user.login, user.password);

    // –ï—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã cookies (–∞–≤—Ç–æ—Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞) - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ
    if (result.newCookies) {
      console.log(`üîÑ Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏`);
      user.authCookies = result.newCookies;
      await saveUserData();
    }

    if (result.success) {
      console.log(`‚úÖ –û—Ç–≤–µ—Ç "${answer}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É ${user.gameId}. ${result.message}`);
      return result;
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API Encounter:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É
function parseGameUrl(url) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏ ID –∏–≥—Ä—ã
    const urlObj = new URL(url);
    const domain = `${urlObj.protocol}//${urlObj.hostname}`;
    
    // –¢–∏–ø 1: https://tech.en.cx/GameDetails.aspx?gid=80646
    if (urlObj.pathname.includes('/GameDetails.aspx') && urlObj.searchParams.has('gid')) {
      const gameId = urlObj.searchParams.get('gid');
      return {
        success: true,
        domain: domain,
        gameId: gameId,
        type: 'GameDetails'
      };
    }
    
    // –¢–∏–ø 2: https://tech.en.cx/gameengines/encounter/play/80646/
    const playMatch = urlObj.pathname.match(/\/gameengines\/encounter\/play\/(\d+)\/?$/);
    if (playMatch) {
      return {
        success: true,
        domain: domain,
        gameId: playMatch[1],
        type: 'Play'
      };
    }
    
    return {
      success: false,
      message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ:\n‚Ä¢ https://domain.en.cx/GameDetails.aspx?gid=XXXXX\n‚Ä¢ https://domain.en.cx/gameengines/encounter/play/XXXXX/'
    };
    
  } catch (error) {
    return {
      success: false,
      message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: https://tech.en.cx/GameDetails.aspx?gid=80646'
    };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuthentication(login, password, domain = 'https://world.en.cx') {
  try {
    const api = new EncounterAPI(domain);
    const result = await api.authenticate(login, password);
    return result; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ success
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–º–µ–Ω–∞, –ø—Ä–∏–Ω–∏–º–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    return {
      success: login.length > 0 && password.length > 0,
      message: login.length > 0 && password.length > 0 ? '–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞' : '–õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏'
    };
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
async function showUsersList(chatId, messageId, page = 0) {
  const USERS_PER_PAGE = 10;
  const users = Array.from(userData.entries());
  const totalPages = Math.ceil(users.length / USERS_PER_PAGE);
  const start = page * USERS_PER_PAGE;
  const end = start + USERS_PER_PAGE;
  const pageUsers = users.slice(start, end);

  if (users.length === 0) {
    const message = 'üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç';
    const keyboard = {
      inline_keyboard: [[{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]]
    };

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
    return;
  }

  let message = `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}/${totalPages})\n\n`;

  for (const [userId, user] of pageUsers) {
    const username = user.telegramUsername ? `@${user.telegramUsername}` : user.telegramFirstName || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const login = user.login || '‚Äî';
    const firstActivity = user.firstActivity ? new Date(user.firstActivity).toLocaleDateString('ru-RU') : '‚Äî';
    const lastActivity = user.lastActivity ? new Date(user.lastActivity).toLocaleString('ru-RU') : '‚Äî';

    message += `<b>${username}</b>\n`;
    message += `–õ–æ–≥–∏–Ω EN: <code>${login}</code>\n`;
    message += `–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: ${firstActivity}\n`;
    message += `–ü–æ—Å–ª–µ–¥–Ω–∏–π: ${lastActivity}\n\n`;
  }

  // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const keyboard = { inline_keyboard: [] };
  const navButtons = [];

  if (page > 0) {
    navButtons.push({ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `admin_users_${page - 1}` });
  }
  if (page < totalPages - 1) {
    navButtons.push({ text: '–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data: `admin_users_${page + 1}` });
  }

  if (navButtons.length > 0) {
    keyboard.inline_keyboard.push(navButtons);
  }

  keyboard.inline_keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'admin_back' }]);

  await bot.editMessageText(message, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'HTML',
    reply_markup: keyboard
  });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
 */
async function showModerationMenu(chatId, messageId) {
  const status = adminConfig.moderationEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ' : '–≤—ã–∫–ª—é—á–µ–Ω–∞ ‚ùå';
  const buttonText = adminConfig.moderationEnabled ? '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å' : '‚úÖ –í–∫–ª—é—á–∏—Ç—å';

  const message = `üîê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π</b>\n\n` +
    `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${status}\n\n` +
    `–ö–æ–≥–¥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.`;

  const keyboard = {
    inline_keyboard: [
      [{ text: buttonText, callback_data: 'moderation_toggle' }],
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]
    ]
  };

  await bot.editMessageText(message, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'HTML',
    reply_markup: keyboard
  });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º
 */
async function showWhitelistMenu(chatId, messageId, page = 0) {
  const ITEMS_PER_PAGE = 10;
  const whitelist = adminConfig.whitelist || [];
  const totalPages = Math.ceil(whitelist.length / ITEMS_PER_PAGE);
  const start = page * ITEMS_PER_PAGE;
  const end = start + ITEMS_PER_PAGE;
  const pageItems = whitelist.slice(start, end);

  let message = `üìã <b>–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</b>\n\n`;

  if (whitelist.length === 0) {
    message += '–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n\n';
    message += '–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
  } else {
    message += `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}/${totalPages}\n\n`;

    for (let i = 0; i < pageItems.length; i++) {
      const item = pageItems[i];
      const globalIndex = start + i;
      const typeIcon = item.type === 'encounter' ? 'üéÆ' : 'üì±';
      message += `${globalIndex + 1}. ${typeIcon} <code>${item.value}</code>\n`;
    }
  }

  // –ö–Ω–æ–ø–∫–∏
  const keyboard = { inline_keyboard: [] };

  // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
  const removeButtons = [];
  for (let i = 0; i < Math.min(pageItems.length, 5); i++) {
    const globalIndex = start + i;
    removeButtons.push({
      text: `üóëÔ∏è ${globalIndex + 1}`,
      callback_data: `whitelist_remove_${globalIndex}`
    });
  }

  if (removeButtons.length > 0) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for (let i = 0; i < removeButtons.length; i += 3) {
      keyboard.inline_keyboard.push(removeButtons.slice(i, i + 3));
    }
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  const navButtons = [];
  if (page > 0) {
    navButtons.push({ text: '‚óÄÔ∏è', callback_data: `admin_whitelist_${page - 1}` });
  }
  navButtons.push({ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data: 'whitelist_add' });
  if (page < totalPages - 1) {
    navButtons.push({ text: '‚ñ∂Ô∏è', callback_data: `admin_whitelist_${page + 1}` });
  }

  keyboard.inline_keyboard.push(navButtons);
  keyboard.inline_keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]);

  await bot.editMessageText(message, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'HTML',
    reply_markup: keyboard
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist
 */
async function handleWhitelistAdd(chatId, messageId) {
  const message = `‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</b>\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
    `<code>telegram:username</code>\n` +
    `–∏–ª–∏\n` +
    `<code>encounter:login</code>\n\n` +
    `–ü—Ä–∏–º–µ—Ä:\n` +
    `<code>telegram:johndoe</code>\n` +
    `<code>encounter:player123</code>`;

  const keyboard = {
    inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_whitelist_0' }]]
  };

  await bot.editMessageText(message, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'HTML',
    reply_markup: keyboard
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
  userStates.set(chatId, 'WAITING_FOR_WHITELIST_ENTRY');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ whitelist
 */
async function handleWhitelistRemove(chatId, messageId, index) {
  if (!adminConfig.whitelist || index < 0 || index >= adminConfig.whitelist.length) {
    await bot.answerCallbackQuery(query.id, {
      text: '‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      show_alert: true
    });
    return;
  }

  // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
  adminConfig.whitelist.splice(index, 1);
  await saveAdminConfig();

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
  await showWhitelistMenu(chatId, messageId, 0);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.onText(/\/reset/, async (msg) => {
  const chatId = msg.chat.id;
  
  // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userData.delete(chatId);
  userStates.delete(chatId);
  await saveUserData();
  
  bot.sendMessage(chatId, 
    `üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!\n\n` +
    `–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.`
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
bot.onText(/\/test/, async (msg) => {
  const chatId = msg.chat.id;
  const user = getUserInfo(chatId);
  
  if (!isUserReady(chatId)) {
    bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
    return;
  }
  
  bot.sendMessage(chatId, 'üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
  
  try {
    const api = new EncounterAPI(user.domain);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const isConnected = await api.checkConnection();
    
    if (isConnected) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é, –µ—Å–ª–∏ –µ—Å—Ç—å)
      let authResult = { success: false };
      
      if (user.authCookies && Object.keys(user.authCookies).length > 0) {
        console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è /test');
        authResult = { success: true, cookies: user.authCookies };
      } else {
        console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è /test');
        authResult = await api.authenticate(user.login, user.password);
        if (authResult.success) {
          user.authCookies = authResult.cookies;
          await saveUserData();
        }
      }
      
      if (authResult.success) {
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ (—Å –∞–≤—Ç–æ—Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)
        const gameInfo = await api.getGameInfo(user.gameId, user.authCookies, user.login, user.password);

        if (gameInfo.success) {
          const data = gameInfo.data;
          bot.sendMessage(chatId, 
            `‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!\n\n` +
            `üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –û–ö\n` +
            `üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –û–ö\n` +
            `üéÆ –ò–≥—Ä–∞: ${data.name} (‚Ññ${data.number})\n` +
            `üë§ –ò–≥—Ä–æ–∫: ${data.login}\n` +
            `üë• –ö–æ–º–∞–Ω–¥–∞: ${data.team || '–õ–∏—á–Ω–∞—è –∏–≥—Ä–∞'}\n` +
            `üìä –°—Ç–∞—Ç—É—Å: ${data.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n` +
            (data.level ? 
              `üèÜ –£—Ä–æ–≤–µ–Ω—å: ${data.level.name} (‚Ññ${data.level.number})\n` +
              `üìà –°–µ–∫—Ç–æ—Ä–∞: ${data.level.sectorsPassed}/${data.level.sectorsTotal}\n` : '') +
            `\n–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–æ–≤!`
          );
        } else {
          bot.sendMessage(chatId, 
            `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω—ã!\n` +
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ: ${gameInfo.error}\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.`
          );
        }
      } else {
        bot.sendMessage(chatId, `‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authResult.message}`);
      }
    } else {
      bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–æ–º–µ–Ω—É ${user.domain}`);
    }
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
bot.onText(/\/admin/, async (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ root user
  if (chatId !== ROOT_USER_ID) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
  await showAdminMainMenu(chatId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
bot.onText(/\/cancel/, async (msg) => {
  const chatId = msg.chat.id;
  const currentState = userStates.get(chatId);

  if (currentState) {
    userStates.delete(chatId);
    bot.sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  } else {
    bot.sendMessage(chatId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã');
  }
});

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 */
async function showAdminMainMenu(chatId) {
  const usersCount = userData.size;
  const moderationStatus = adminConfig.moderationEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ' : '–≤—ã–∫–ª—é—á–µ–Ω–∞ ‚ùå';
  const whitelistCount = adminConfig.whitelist ? adminConfig.whitelist.length : 0;

  const message = `üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n` +
    `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}\n` +
    `üîê –ú–æ–¥–µ—Ä–∞—Ü–∏—è: ${moderationStatus}\n` +
    `üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: ${whitelistCount} –∑–∞–ø–∏—Å–µ–π`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users_0' }
      ],
      [
        { text: 'üîê –ú–æ–¥–µ—Ä–∞—Ü–∏—è', callback_data: 'admin_moderation' }
      ],
      [
        { text: 'üìã –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫', callback_data: 'admin_whitelist_0' }
      ]
    ]
  };

  try {
    await bot.sendMessage(chatId, message, {
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω-–º–µ–Ω—é:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const user = getUserInfo(chatId);
  
  if (isUserReady(chatId)) {
    userStates.set(chatId, STATES.READY);
    bot.sendMessage(chatId, 
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ en_off_bot! üéÆ\n\n` +
      `–í—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –±–æ—Ç–∞:\n` +
      `üë§ –õ–æ–≥–∏–Ω: ${user.login}\n` +
      `üåê –î–æ–º–µ–Ω: ${user.domain}\n` +
      `üéØ ID –∏–≥—Ä—ã: ${user.gameId}\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã!`,
      createMainKeyboard()
    );
  } else {
    userStates.set(chatId, STATES.WAITING_FOR_LOGIN);
    bot.sendMessage(chatId, 
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ en_off_bot! üéÆ\n\n` +
      `–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –∏–≥—Ä—É Encounter, ` +
      `–¥–∞–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n\n` +
      `–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n` +
      `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:`
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ root user –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
  if (data.startsWith('admin_') && chatId !== ROOT_USER_ID) {
    await bot.answerCallbackQuery(query.id, {
      text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞',
      show_alert: true
    });
    return;
  }

  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
    if (data.startsWith('admin_users_')) {
      const page = parseInt(data.split('_')[2]) || 0;
      await showUsersList(chatId, messageId, page);
      await bot.answerCallbackQuery(query.id);
    } else if (data === 'admin_moderation') {
      await showModerationMenu(chatId, messageId);
      await bot.answerCallbackQuery(query.id);
    } else if (data.startsWith('admin_whitelist_')) {
      const page = parseInt(data.split('_')[2]) || 0;
      userStates.delete(chatId); // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ whitelist –º–µ–Ω—é
      await showWhitelistMenu(chatId, messageId, page);
      await bot.answerCallbackQuery(query.id);
    } else if (data === 'admin_back') {
      userStates.delete(chatId); // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await bot.deleteMessage(chatId, messageId);
      await showAdminMainMenu(chatId);
      await bot.answerCallbackQuery(query.id);
    } else if (data === 'moderation_toggle') {
      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      adminConfig.moderationEnabled = !adminConfig.moderationEnabled;
      await saveAdminConfig();
      await showModerationMenu(chatId, messageId);
      await bot.answerCallbackQuery(query.id, {
        text: adminConfig.moderationEnabled ? '‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞' : '‚ùå –ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞'
      });
    } else if (data === 'whitelist_add') {
      await handleWhitelistAdd(chatId, messageId);
      await bot.answerCallbackQuery(query.id);
    } else if (data.startsWith('whitelist_remove_')) {
      const index = parseInt(data.split('_')[2]);
      await handleWhitelistRemove(chatId, messageId, index);
      await bot.answerCallbackQuery(query.id, { text: 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞' });
    } else {
      await bot.answerCallbackQuery(query.id);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query:', error);
    await bot.answerCallbackQuery(query.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã',
      show_alert: true
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserActivity(chatId, msg.from.username, msg.from.first_name);

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text && text.startsWith('/')) {
    return;
  }

  const user = getUserInfo(chatId);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  let currentState = userStates.get(chatId);

  // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!currentState) {
    if (isUserReady(chatId)) {
      currentState = STATES.READY;
      userStates.set(chatId, STATES.READY);
    } else {
      currentState = STATES.WAITING_FOR_LOGIN;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è whitelist (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
  if (currentState === 'WAITING_FOR_WHITELIST_ENTRY' && chatId === ROOT_USER_ID) {
    const input = text.trim();
    const parts = input.split(':');

    if (parts.length !== 2 || !['telegram', 'encounter'].includes(parts[0])) {
      bot.sendMessage(chatId, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\ntelegram:username –∏–ª–∏ encounter:login');
      return;
    }

    const type = parts[0];
    const value = parts[1].toLowerCase().replace('@', '');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const exists = adminConfig.whitelist.some(item =>
      item.type === type && item.value.toLowerCase() === value
    );

    if (exists) {
      bot.sendMessage(chatId, '‚ö†Ô∏è –≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ');
      userStates.delete(chatId);
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ whitelist
    adminConfig.whitelist.push({
      type,
      value,
      addedBy: chatId,
      addedAt: Date.now()
    });

    await saveAdminConfig();
    await bot.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:\n${type === 'telegram' ? 'üì±' : 'üéÆ'} <code>${value}</code>`, {
      parse_mode: 'HTML'
    });

    userStates.delete(chatId);
    return;
  }

  switch (currentState) {
    case STATES.WAITING_FOR_LOGIN:
      user.login = text;
      userStates.set(chatId, STATES.WAITING_FOR_PASSWORD);
      bot.sendMessage(chatId, `–õ–æ–≥–∏–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${text}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:`);
      break;
      
    case STATES.WAITING_FOR_PASSWORD:
      user.password = text;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
      if (!user.login || !user.password || user.login.length < 2 || user.password.length < 2) {
        userStates.set(chatId, STATES.WAITING_FOR_LOGIN);
        bot.sendMessage(chatId, `‚ùå –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –µ—â–µ —Ä–∞–∑:`);
        break;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è (–æ–¥–∏–Ω —Ä–∞–∑)
      bot.sendMessage(chatId, `üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...`);
      
      try {
        const authResult = await checkAuthentication(user.login, user.password);
        
        if (authResult.success) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          user.authCookies = authResult.cookies;
          await saveUserData();
          
          userStates.set(chatId, STATES.WAITING_FOR_GAME_URL);
          bot.sendMessage(chatId, `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É Encounter.\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n‚Ä¢ https://domain.en.cx/GameDetails.aspx?gid=XXXXX\n‚Ä¢ https://domain.en.cx/gameengines/encounter/play/XXXXX/`);
        } else {
          userStates.set(chatId, STATES.WAITING_FOR_LOGIN);
          bot.sendMessage(chatId, `‚ùå ${authResult.message}\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –µ—â–µ —Ä–∞–∑:`);
        }
      } catch (error) {
        userStates.set(chatId, STATES.WAITING_FOR_LOGIN);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –µ—â–µ —Ä–∞–∑:`);
      }
      break;
      
    case STATES.WAITING_FOR_GAME_URL:
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ
      if (!(await checkGameAccess(chatId))) {
        return;
      }

      const gameUrlResult = parseGameUrl(text);

      if (gameUrlResult.success) {
        // –ï—Å–ª–∏ –¥–æ–º–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ cookies –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (user.domain && user.domain !== gameUrlResult.domain) {
          console.log(`üîÑ –î–æ–º–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${user.domain} –Ω–∞ ${gameUrlResult.domain}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º cookies`);
          user.authCookies = null;
        }
        
        user.domain = gameUrlResult.domain;
        user.gameId = gameUrlResult.gameId;
        userStates.set(chatId, STATES.READY);
        await saveUserData();
        
        bot.sendMessage(chatId, 
          `üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
          `üë§ –õ–æ–≥–∏–Ω: ${user.login}\n` +
          `üåê –î–æ–º–µ–Ω: ${user.domain}\n` +
          `üéÆ ID –∏–≥—Ä—ã: ${user.gameId}\n` +
          `üîó –¢–∏–ø —Å—Å—ã–ª–∫–∏: ${gameUrlResult.type}\n\n` +
          `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç.`,
          createMainKeyboard()
        );
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞
      } else {
        bot.sendMessage(chatId, `‚ùå ${gameUrlResult.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
      }
      break;
      
    case STATES.READY:
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      if (text === '–ó–∞–¥–∞–Ω–∏–µ') {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ
        if (!(await checkGameAccess(chatId))) {
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        const waitMsg = await bot.sendMessage(chatId, 'üîÑ –ü–æ–ª—É—á–∞—é –∑–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è...');
        try {
          const api = new EncounterAPI(user.domain);

          // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          if (!user.authCookies || Object.keys(user.authCookies).length === 0) {
            const auth = await api.authenticate(user.login, user.password);
            if (!auth.success) {
              throw new Error(auth.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
            }
            user.authCookies = auth.cookies;
            await saveUserData();
          }

          let gameState;
          try {
            gameState = await api.getGameState(user.gameId, user.authCookies);
          } catch (e) {
            const msg = String(e.message || '').toLowerCase();
            if (msg.includes('—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') || msg.includes('—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')) {
              const reauth = await api.authenticate(user.login, user.password);
              if (!reauth.success) throw new Error(reauth.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
              user.authCookies = reauth.cookies;
              await saveUserData();
              gameState = await api.getGameState(user.gameId, user.authCookies);
            } else {
              throw e;
            }
          }

          if (!gameState || !gameState.success) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã');
          }

          const model = gameState.data;
          if (model.Event !== 0) {
            // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (model.Event === 16) {
              gameState = await api.getGameState(user.gameId, user.authCookies);
              if (!gameState.success || gameState.data.Event !== 0) {
                await sendOrUpdateMessage(chatId, '‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å.', waitMsg.message_id);
                break;
              }
            } else {
              await sendOrUpdateMessage(chatId, '‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å.', waitMsg.message_id);
              break;
            }
          }

          const level = model.Level;
          if (!level) {
            await sendOrUpdateMessage(chatId, '‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', waitMsg.message_id);
            break;
          }

          const tasks = level.Tasks;
          let parts = [];
          if (Array.isArray(tasks)) {
            parts = tasks
              .map(t => escapeHtml(String(t?.TaskText || '').trim()))
              .filter(p => p.length > 0);
          } else if (tasks && typeof tasks === 'object') {
            const single = escapeHtml(String(tasks.TaskText || '').trim());
            if (single.length > 0) parts = [single];
          }

          const header = `<b>üìú –ó–∞–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è ‚Ññ${level.Number}${level.Name ? ` ‚Äî ${escapeHtml(level.Name)}` : ''}</b>`;
          const timeoutRemain = formatRemain(level.TimeoutSecondsRemain);
          const timeoutLine = timeoutRemain ? `\n<i>–î–æ –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: ${timeoutRemain}</i>` : '';
          // –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ —Ü–∏—Ç–∞—Ç–∞
          const body = parts.length > 0 
            ? parts.map(p => `<blockquote>${p}</blockquote>`).join('\n\n') 
            : '<blockquote>–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</blockquote>';

          // –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
          let helpsBlock = '';
          const helps = Array.isArray(level.Helps) ? level.Helps : [];
          if (helps.length > 0) {
            // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–∫—É–Ω–¥ –≤ –¥/—á/–º/—Å –±–µ–∑ –Ω—É–ª–µ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü
            const formatRemain = (seconds) => {
              const total = Number(seconds) || 0;
              if (total <= 0) return '';
              let s = Math.floor(total);
              const days = Math.floor(s / 86400); s %= 86400;
              const hours = Math.floor(s / 3600); s %= 3600;
              const minutes = Math.floor(s / 60); s %= 60;
              const parts = [];
              if (days > 0) parts.push(`${days}–¥`);
              if (hours > 0) parts.push(`${hours}—á`);
              if (minutes > 0) parts.push(`${minutes}–º`);
              if (s > 0) parts.push(`${s}—Å`);
              return parts.join(' ');
            };

            const helpSections = helps.map(h => {
              const number = h?.Number ?? '';
              const helpText = escapeHtml(h?.HelpText || '');
              const remainStr = formatRemain(h?.RemainSeconds);
              const remainLine = remainStr ? `\n<i>–î–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: ${remainStr}</i>` : '';
              return `<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ ${number}</b>\n<blockquote>${helpText}</blockquote>${remainLine}`;
            });
            helpsBlock = `\n\n${helpSections.join('\n\n')}`;
          }

          const fullHtml = `${header}${timeoutLine}\n\n${body}${helpsBlock}`;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML
          if (fullHtml.length <= 4000) {
            await bot.editMessageText(fullHtml, {
              chat_id: chatId,
              message_id: waitMsg.message_id,
              parse_mode: 'HTML',
              disable_web_page_preview: true
            });
          } else {
            await bot.editMessageText(header, {
              chat_id: chatId,
              message_id: waitMsg.message_id,
              parse_mode: 'HTML',
              disable_web_page_preview: true
            });
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –∫—É—Å–∫–∞–º–∏
            const rest = `\n\n${body}${helpsBlock}`;
            for (let i = 0; i < rest.length; i += 4000) {
              await bot.sendMessage(chatId, rest.slice(i, i + 4000), { parse_mode: 'HTML', disable_web_page_preview: true });
            }
          }
        } catch (error) {
          await sendOrUpdateMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ: ${error.message}`, waitMsg.message_id);
        }
      } else if (text === '–°–µ–∫—Ç–æ—Ä–∞') {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ
        if (!(await checkGameAccess(chatId))) {
          return;
        }

        const waitMsg = await bot.sendMessage(chatId, 'üîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ç–æ—Ä–æ–≤...');
        try {
          const api = new EncounterAPI(user.domain);

          if (!user.authCookies || Object.keys(user.authCookies).length === 0) {
            const auth = await api.authenticate(user.login, user.password);
            if (!auth.success) throw new Error(auth.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
            user.authCookies = auth.cookies;
            await saveUserData();
          }

          let gameState;
          try {
            gameState = await api.getGameState(user.gameId, user.authCookies);
          } catch (e) {
            const msg = String(e.message || '').toLowerCase();
            if (msg.includes('—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') || msg.includes('—Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')) {
              const reauth = await api.authenticate(user.login, user.password);
              if (!reauth.success) throw new Error(reauth.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
              user.authCookies = reauth.cookies;
              await saveUserData();
              gameState = await api.getGameState(user.gameId, user.authCookies);
            } else {
              throw e;
            }
          }

          if (!gameState || !gameState.success) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã');
          let model = gameState.data;
          if (model.Event !== 0) {
            if (model.Event === 16) {
              gameState = await api.getGameState(user.gameId, user.authCookies);
              if (!gameState.success || gameState.data.Event !== 0) {
                await sendOrUpdateMessage(chatId, '‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å.', waitMsg.message_id);
                return;
              }
              model = gameState.data;
            } else {
              await sendOrUpdateMessage(chatId, '‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å.', waitMsg.message_id);
              return;
            }
          }

          const level = model.Level;
          if (!level) {
            await sendOrUpdateMessage(chatId, '‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', waitMsg.message_id);
            return;
          }

          const sectors = Array.isArray(level.Sectors) ? level.Sectors : [];
          const totalRequired = Number(level.RequiredSectorsCount) || 0;
          const passedCount = Number(level.PassedSectorsCount) || 0;
          const leftToClose = Math.max(totalRequired - passedCount, 0);
          if (sectors.length === 0) {
            await bot.editMessageText('<b>üóÑ –°–µ–∫—Ç–æ—Ä—ã</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–∫—Ç–æ—Ä–∞—Ö.', {
              chat_id: chatId,
              message_id: waitMsg.message_id,
              parse_mode: 'HTML'
            });
            return;
          }

          const lines = sectors.map(s => {
            const order = s?.Order ?? '';
            const name = escapeHtml(s?.Name ?? '');
            const isAnswered = s?.IsAnswered === true;
            const answerTextRaw = s?.Answer;
            const answerText = extractSectorAnswerText(answerTextRaw);
            const condition = isAnswered
              ? (answerText ? `<code>${escapeHtml(answerText)}</code> ‚úÖ` : `<code>‚Äî</code> ‚úÖ`)
              : `<i>...</i>`;
            return `#${order} (${name}) ‚Äî ${condition}`;
          });

          const totalCount = sectors.length;
          const header = `<b>üóÑ –°–µ–∫—Ç–æ—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö ${totalRequired} –∏–∑ ${totalCount})</b>`;
          const summary = `–ó–∞–∫—Ä—ã—Ç–æ ‚Äî <b>${passedCount}</b>, –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî <b>${leftToClose}</b>`;
          const body = lines.join('\n');
          const full = `${header}\n\n${summary}\n\n${body}`;

          if (full.length <= 4000) {
            await bot.editMessageText(full, {
              chat_id: chatId,
              message_id: waitMsg.message_id,
              parse_mode: 'HTML',
              disable_web_page_preview: true
            });
          } else {
            await bot.editMessageText(header, {
              chat_id: chatId,
              message_id: waitMsg.message_id,
              parse_mode: 'HTML',
              disable_web_page_preview: true
            });
            for (let i = 0; i < body.length; i += 4000) {
              await bot.sendMessage(chatId, body.slice(i, i + 4000), { parse_mode: 'HTML', disable_web_page_preview: true });
            }
          }
        } catch (error) {
          await sendOrUpdateMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ç–æ—Ä–∞: ${error.message}`, waitMsg.message_id);
        }
      } else if (text === 'üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏') {
        const queueLength = user.answerQueue.length;
        const status = user.isOnline ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω';
        bot.sendMessage(chatId, 
          `–°—Ç–∞—Ç—É—Å: ${status}\n` +
          `–û—Ç–≤–µ—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${queueLength}\n\n` +
          `${queueLength > 0 ? '–û—á–µ—Ä–µ–¥—å:\n' + user.answerQueue.map((item, index) => 
            `${index + 1}. "${item.answer}" (${new Date(item.timestamp).toLocaleTimeString()})`
          ).join('\n') : '–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞'}`
        );
      } else if (text === 'üîó –°–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É') {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ
        if (!(await checkGameAccess(chatId))) {
          return;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º cookies –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–≥—Ä—ã
        user.authCookies = null;
        await saveUserData();

        userStates.set(chatId, STATES.WAITING_FOR_GAME_URL);
        bot.sendMessage(chatId, '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É:\n\n‚Ä¢ https://domain.en.cx/GameDetails.aspx?gid=XXXXX\n‚Ä¢ https://domain.en.cx/gameengines/encounter/play/XXXXX/');
      } else if (text === 'üë§ –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é') {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º cookies –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        user.authCookies = null;
        await saveUserData();
        
        userStates.set(chatId, STATES.WAITING_FOR_LOGIN);
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:');
      } else {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        if (!(await checkGameAccess(chatId))) {
          return;
        }

        // –≠—Ç–æ –æ—Ç–≤–µ—Ç –¥–ª—è –∏–≥—Ä—ã
        const progressMessage = await bot.sendMessage(chatId, `‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç "${text}"...`);
        const result = await sendAnswerToEncounter(chatId, text, progressMessage.message_id);
        
        if (result && user.answerQueue.length > 0) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
          setTimeout(() => processAnswerQueue(chatId), 1200);
        }
      }
      break;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  await loadUserData();
  await loadAdminConfig();
  console.log('ü§ñ Telegram-–±–æ—Ç en_off_bot –∑–∞–ø—É—â–µ–Ω!');
  console.log('üì± –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π...');
}

startBot();

// –ì—Ä–∞—Ü–∏–æ–∑–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', async () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  await saveUserData();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  await saveUserData();
  process.exit(0);
});